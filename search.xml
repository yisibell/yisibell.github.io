<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bootstrap-paginator分页插件的使用</title>
    <url>/2016/05/22/bootstrap/bootstrap-paginator/</url>
    <content><![CDATA[<p>​Bootstrap Paginator是一款基于Bootstrap的js分页插件，功能很丰富，个人觉得这款插件已经无可挑剔了。它提供了一系列的参数用来支持用户的定制，提供了公共的方法可随时获得插件状态的改变，以及事件来监听用户的动作。目前经过测试的浏览器包括： Firefox 5+, Chrome 14+, Safari 5+, Opera 11.6+ and IE 7+。</p>
<span id="more"></span>

<p>GitHub 官网地址：<a href="https://github.com/lyonlai/bootstrap-paginator">https://github.com/lyonlai/bootstrap-paginator</a></p>
<h2 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;pagintor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>   <span class="comment">&lt;!--版本3.x使用ul元素--&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#pagintor&quot;</span>).<span class="title function_">bootstrapPaginator</span>(&#123;</span><br><span class="line">  <span class="attr">bootstrapMajorVersion</span>:<span class="number">3</span>,<span class="comment">//默认是2，如果是bootstrap3版本，这个参数必填</span></span><br><span class="line">  <span class="attr">currentPage</span>:<span class="number">1</span>,<span class="comment">//当前页</span></span><br><span class="line">  <span class="attr">totalPages</span>:<span class="number">10</span>,<span class="comment">//总页数</span></span><br><span class="line">  <span class="attr">size</span>:<span class="string">&quot;small&quot;</span>,<span class="comment">//设置控件的大小，mini, small, normal,large</span></span><br><span class="line">  <span class="attr">onPageClicked</span>:<span class="keyword">function</span>(<span class="params">event, originalEvent, type,page</span>)&#123;</span><br><span class="line">    <span class="comment">//为按钮绑定点击事件 page:当前点击的按钮值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><table>
<thead>
<tr>
<th align="left"><strong>数据类型</strong></th>
<th align="center"><strong>参数名</strong></th>
<th align="center"><strong>描述</strong></th>
<th align="center"><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">number</td>
<td align="center">bootstrapMajorVersion</td>
<td align="center">搭配使用的Bootstrap版本，2.X 的 分页必须使用div元素，3.X分页的必须使用ul元素。请注意与所使用的bootstrap版本对应上。</td>
<td align="center">2</td>
</tr>
<tr>
<td align="left">string</td>
<td align="center">size</td>
<td align="center">设置控件的显示大小，是个字符串. 允许的值: <em>mini</em>, <em>small</em>, <em>normal</em>,<em>large。</em>值：mini版的、小号的、正常的、大号的。</td>
<td align="center">“normal”</td>
</tr>
<tr>
<td align="left">function</td>
<td align="center">itemContainerClass</td>
<td align="center">该参数接收一个函数，返回一个字符串，该字符串是一个我们自定义的class类样式。当控件内的每个操纵按钮被渲染(render)时，都会调用该函数，同时把有关该按钮的信息作为参数传入。参数：<strong>type</strong>,<strong>page</strong>, <strong>current</strong> 。<strong>type</strong>为该控件的操作按钮的类型，如上图所示的五种类型：first、prev、page、next、last。<strong>page</strong>为该按钮所属第几页。<strong>current</strong> 指示整个控件的当前页是第几页。</td>
<td align="center"></td>
</tr>
<tr>
<td align="left">number</td>
<td align="center">currentPage</td>
<td align="center">设置当前页.</td>
<td align="center">1</td>
</tr>
<tr>
<td align="left">number</td>
<td align="center">numberOfPages</td>
<td align="center">设置控件显示的页码数.即：类型为”page”的操作按钮的数量。</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">number</td>
<td align="center">totalPages</td>
<td align="center">设置总页数.</td>
<td align="center">1</td>
</tr>
<tr>
<td align="left">function</td>
<td align="center">pageUrl</td>
<td align="center">实际上，控件内的每个操作按钮最终会被渲染成超链接，该参数的作用就是设置超链接的链接地址。该参数是个函数，参数为：<strong>type</strong>,<strong>page</strong>, <strong>current。</strong>这样我们就可以通过这个函数为每个操作按钮动态设置链接地址。如：”<a href="http://example.com/list/page/%22+page">http://example.com/list/page/&quot;+page</a></td>
<td align="center"></td>
</tr>
<tr>
<td align="left">boolean&#x2F;function</td>
<td align="center">shouldShowPage</td>
<td align="center">该参数用于设置某个操作按钮是否显示，可是个布尔值也可是个函数。当为true时，显示。当为false时，不显示。如果该参数是个函数，需要返回个布尔值，通过这个返回值判断是否显示。函数有3个参数: <strong>type</strong>, <strong>page</strong>, <strong>current。</strong>使用函数的好处是，可以对每个操作按钮进行显示控制。</td>
<td align="center">true</td>
</tr>
<tr>
<td align="left">function</td>
<td align="center">itemTexts</td>
<td align="center">控制每个操作按钮的显示文字。是个函数，有3个参数: <strong>type</strong>, <strong>page</strong>, <strong>current。</strong>通过这个参数我们就可以将操作按钮上的英文改为中文，如first–&gt;首页，last–&gt;尾页。</td>
<td align="center"></td>
</tr>
<tr>
<td align="left">function</td>
<td align="center">tooltipTitles</td>
<td align="center">设置操作按钮的title属性。是个函数，有3个参数: <strong>type</strong>, <strong>page</strong>, <strong>current。</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="left">boolean</td>
<td align="center">useBootstrapTooltip</td>
<td align="center">设置是否使用Bootstrap内置的tooltip。 true是使用，false是不使用,默认是不使用。注意：如果使用，则需要引入bootstrap-tooltip.js插件。</td>
<td align="center">false</td>
</tr>
<tr>
<td align="left">object</td>
<td align="center">bootstrapTooltipOptions</td>
<td align="center">Default:    {        animation: true,        html: true,        placement: ‘top’,        selector: false,        title: “”,        container: false }该参数是个js对象。当参数useBootstrapTooltip为true时，会将该对象传给Bootstrap的bootstrap-tooltip.js插件。</td>
<td align="center"></td>
</tr>
<tr>
<td align="left">function</td>
<td align="center">onPageClicked</td>
<td align="center">为操作按钮绑定click事件。回调函数的参数：<strong>event</strong>, <strong>originalEvent</strong>, <strong>type</strong>,<strong>page。</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="left">function</td>
<td align="center">onPageChanged</td>
<td align="center">为操作按钮绑定页码改变事件，回调函数的参数：<strong>event</strong>, <strong>oldPage</strong>, <strong>newPage。</strong></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="公共命令"><a href="#公共命令" class="headerlink" title="公共命令"></a>公共命令</h2><p>另外该插件还提供了几个公共的命令，可以通过如下方法调用，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#example&#x27;</span>).<span class="title function_">bootstrapPaginator</span>(<span class="string">&quot;show&quot;</span>,<span class="number">3</span>);    <span class="comment">//调用show命令</span></span><br><span class="line">$(<span class="string">&#x27;#example&#x27;</span>).<span class="title function_">bootstrapPaginator</span>(<span class="string">&quot;getPages&quot;</span>);  <span class="comment">//调用getPages命令</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"><strong>命令名</strong></th>
<th align="center"><strong>参数</strong></th>
<th align="center"><strong>返回值</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>show</code></td>
<td align="center">page</td>
<td align="center"></td>
<td align="center"><strong>show</strong>命令用于直接跳转到特定的page，与直接点击操作按钮的效果是一样的。使用方法，如：<code>$(&#39;#example&#39;).bootstrapPaginator(&quot;show&quot;,3)</code> 直接跳转到第3页</td>
</tr>
<tr>
<td align="center"><code>showFirst</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>showFirst</strong> 命令用于直接跳转到首页，与点击first按钮相同。使用方法：<code>$(&#39;#example&#39;).bootstrapPaginator(&quot;showFirst&quot;)</code></td>
</tr>
<tr>
<td align="center"><code>showPrevious</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>showPrevious</strong> 命令用于直接跳转到上一页。使用方法：<code>$(&#39;#example&#39;).bootstrapPaginator(&quot;showPrevious&quot;)</code></td>
</tr>
<tr>
<td align="center"><code>showNext</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>showNext</strong>命令用于直接跳转到下一页。</td>
</tr>
<tr>
<td align="center"><code>showLast</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><strong>showLast</strong> 命令用于直接跳转到上一页。</td>
</tr>
<tr>
<td align="center"><code>getPages</code></td>
<td align="center"></td>
<td align="center"><em>object</em></td>
<td align="center"><strong>getPages</strong>命令用于返回当前控件中显示的页码，以数组形式返回。使用方法：<code>var arra = $(&#39;#example&#39;).bootstrapPaginator(&quot;getPages&quot;)</code></td>
</tr>
<tr>
<td align="center">setOptions</td>
<td align="center"><em>object</em></td>
<td align="center"></td>
<td align="center"><strong>setOptions</strong>命令用于重新设置参数，使用方法：<code>$(&#39;#example&#39;).bootstrapPaginator(&quot;setOptions&quot;,newoptions)</code></td>
</tr>
</tbody></table>
<h2 id="事件Events"><a href="#事件Events" class="headerlink" title="事件Events"></a>事件Events</h2><p>​	Bootstrap Paginator 提供了俩个事件：<em>page-clicked</em>和<em>page-changed</em>。这俩个事件作为参数使用，分别对应<em>onPageClicked</em>和<em>onPageChanged</em>。</p>
<table>
<thead>
<tr>
<th align="center"><strong>事件名</strong></th>
<th align="center"><strong>回调函数</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">page-clicked</td>
<td align="center">function(<em>event</em>, <em>originalEvent</em>, <em>type</em>, <em>page</em>)</td>
<td align="center">同上文。另外，参数<em>event</em>, <em>originalEvent是俩个jquery事件对象，可参考jquery相关文档</em></td>
</tr>
<tr>
<td align="center">page-changed</td>
<td align="center">function(<em>event</em>, <em>oldPage</em>, <em>newPage</em>)</td>
<td align="center">同上文</td>
</tr>
</tbody></table>
<p>注意：分页样式用<code>BootStrap</code> 的，如果单独使用，请去<code>BootStrap</code>中把分页样式拷出来。<code>jQuery</code>版本需要1.8及以上。</p>
]]></content>
      <categories>
        <category>bootstrap相关</category>
      </categories>
      <tags>
        <tag>bootstrap-paginator</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap-validator表单校验插件的使用</title>
    <url>/2016/05/21/bootstrap/bootstrap-validator/</url>
    <content><![CDATA[<p>基于bootstrap的表单校验插件使用说明。</p>
<span id="more"></span>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://blog.csdn.net/nazhidao/article/details/51542508">http://blog.csdn.net/nazhidao/article/details/51542508</a></li>
<li><a href="http://blog.csdn.net/u013938465/article/details/53507109">http://blog.csdn.net/u013938465/article/details/53507109</a></li>
<li><a href="http://www.cnblogs.com/v-weiwang/p/4834672.html?ptvd">http://www.cnblogs.com/v-weiwang/p/4834672.html?ptvd</a></li>
<li><a href="http://bootstrapvalidator.votintsev.ru/api/">http://bootstrapvalidator.votintsev.ru/api/</a></li>
</ul>
<h2 id="引包"><a href="#引包" class="headerlink" title="引包"></a>引包</h2><p>引入bootstrap-validator的css文件注意bootstrap-validator是bootstrap插件，因此依赖与bootstrap。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;lib/bootstrap/css/bootstrap<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;lib/bootstrap-validator/css/bootstrapValidator<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="引入js文件"><a href="#引入js文件" class="headerlink" title="引入js文件"></a>引入js文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;lib/jquery/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/bootstrap/js/bootstrap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/bootstrap-validator/js/bootstrapValidator.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;demo_form&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!--当需要自动触发验证时，type必须为submit--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--也可以是表单元素外的提交按钮,加上关联属性form即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">form</span>=<span class="string">&quot;demo_form&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="初始化表单校验插件"><a href="#初始化表单校验插件" class="headerlink" title="初始化表单校验插件"></a>初始化表单校验插件</h2><blockquote>
<p>bootstrap-validator插件会在表单提交的时候进行校验，如果校验成功了，表单会继续提交，但是如果校验失败了，就会阻止表单的提交。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用表单校验插件</span></span><br><span class="line">$(formSelector).<span class="title function_">bootstrapValidator</span>(&#123;</span><br><span class="line">  <span class="comment">//1. 指定不校验的类型，默认为[&#x27;:disabled&#x27;, &#x27;:hidden&#x27;, &#x27;:not(:visible)&#x27;],可以不设置</span></span><br><span class="line">  <span class="comment">// excluded: [&#x27;:disabled&#x27;, &#x27;:hidden&#x27;, &#x27;:not(:visible)&#x27;],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2. 指定校验时的图标显示，默认是bootstrap风格</span></span><br><span class="line">  <span class="attr">feedbackIcons</span>: &#123;</span><br><span class="line">    <span class="attr">valid</span>: <span class="string">&#x27;glyphicon glyphicon-ok&#x27;</span>,</span><br><span class="line">    <span class="attr">invalid</span>: <span class="string">&#x27;glyphicon glyphicon-remove&#x27;</span>,</span><br><span class="line">    <span class="attr">validating</span>: <span class="string">&#x27;glyphicon glyphicon-refresh&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3. 指定校验字段</span></span><br><span class="line">  <span class="attr">fields</span>: &#123;</span><br><span class="line">    <span class="comment">//校验用户名，对应name表单的name属性</span></span><br><span class="line">    <span class="attr">username</span>: &#123;</span><br><span class="line">      <span class="attr">validators</span>: &#123;</span><br><span class="line">        <span class="comment">//不能为空</span></span><br><span class="line">        <span class="attr">notEmpty</span>: &#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;用户名不能为空&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//长度校验</span></span><br><span class="line">        <span class="attr">stringLength</span>: &#123;</span><br><span class="line">          <span class="attr">min</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="attr">max</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;用户名长度必须在6到30之间&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//正则校验</span></span><br><span class="line">        <span class="attr">regexp</span>: &#123;</span><br><span class="line">          <span class="attr">regexp</span>: <span class="regexp">/^[a-zA-Z0-9_\.]+$/</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;用户名由数字字母下划线和.组成&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    email : &#123;</span><br><span class="line">       validators : &#123;</span><br><span class="line">          <span class="attr">notEmpty</span>: &#123;</span><br><span class="line">          	<span class="attr">message</span>: <span class="string">&#x27;用户名不能为空&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">emailAddress</span>: &#123;</span><br><span class="line">           	<span class="attr">message</span>: <span class="string">&#x27;邮箱地址格式有误&#x27;</span></span><br><span class="line">      	  &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="注册表单验证成功事件"><a href="#注册表单验证成功事件" class="headerlink" title="注册表单验证成功事件"></a>注册表单验证成功事件</h2><p>当表单校验成功时，会触发<code>success.form.bv</code>事件，此时会提交表单，这时候，通常我们需要禁止表单的自动提交，使用ajax进行表单的提交。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.当提交按钮是: [type=&quot;submit&quot;] 表单元素时，会在提交之前自动去进行表单验证</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#form&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;success.form.bv&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="comment">//使用ajax提交逻辑</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.当提交按钮是 普通按钮时</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;buttonName&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="comment">//获取表单对象</span></span><br><span class="line">    <span class="keyword">var</span> bootstrapValidator = $(<span class="string">&quot;form&quot;</span>).<span class="title function_">data</span>(<span class="string">&#x27;bootstrapValidator&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">        bootstrapValidator.<span class="title function_">validate</span>();  <span class="comment">//手动触发验证</span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>(bootstrapValidator.<span class="title function_">isValid</span>())&#123;  <span class="comment">//验证通过时执行相关操作</span></span><br><span class="line">            <span class="comment">//表单提交的方法、比如ajax提交</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="获取validator实例-对象"><a href="#获取validator实例-对象" class="headerlink" title="获取validator实例(对象)"></a>获取validator实例(对象)</h3><p>当我们初始化好表单校验插件时，我们可以通过以下方法来获取表单校验的validator实例，通过validator实例调用一些方法来完成某些功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> validator = $(<span class="string">&quot;#form&quot;</span>).<span class="title function_">data</span>(<span class="string">&#x27;bootstrapValidator&#x27;</span>);  <span class="comment">//获取表单校验实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用表单校验实例可以调用一些常用的方法。</span></span><br><span class="line">validator.<span class="title function_">methodName</span>(params);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.手动触发表单验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//触发全部验证</span></span><br><span class="line">$(formName).<span class="title function_">data</span>(<span class="string">&quot;bootstrapValidator&quot;</span>).<span class="title function_">validate</span>();</span><br><span class="line"><span class="comment">//触发指定字段的验证</span></span><br><span class="line">$(formName).<span class="title function_">data</span>(<span class="string">&quot;bootstrapValidator&quot;</span>).<span class="title function_">validateField</span>(<span class="string">&#x27;fieldName&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>2.获取当前表单验证状态</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flag = true/false , 返回true表示验证通过</span></span><br><span class="line"><span class="keyword">var</span> flag = $(formName).<span class="title function_">data</span>(“bootstrapValidator”).<span class="title function_">isValid</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h3><p>重置表单中设置过校验的内容，将隐藏所有错误提示和图标。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1:</span></span><br><span class="line">validator.<span class="title function_">resetForm</span>();<span class="comment">//重置表单，并且会隐藏所有的错误提示和图标</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法2:</span></span><br><span class="line"><span class="comment">//注册模态框关闭事件,模态框关闭后清除所有验证样式,隐藏所有的错误提示和图标</span></span><br><span class="line">  $(<span class="string">&#x27;#mymodal&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;hidden.bs.modal&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="comment">//清除验证样式</span></span><br><span class="line">    $(<span class="string">&quot;#user_form&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;bootstrapValidator&quot;</span>).<span class="title function_">destroy</span>();</span><br><span class="line">    $(<span class="string">&quot;#user_form&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;bootstrapValidator&quot;</span> , <span class="literal">null</span>);</span><br><span class="line">    <span class="title function_">formValidator</span>();  <span class="comment">//封装的验证函数</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>



<h3 id="更新字段的状态"><a href="#更新字段的状态" class="headerlink" title="更新字段的状态"></a>更新字段的状态</h3><p>BootstrapValidator在用户输入内容的时候，会做校验，当调用bootstrap的插件的方法可以手动会改变字段值的状态。可以使用<code>updateStatus(field, status, validatorName)</code>方法更新字段的状态</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数说明：</span></span><br><span class="line"><span class="comment">// field   字段名</span></span><br><span class="line"><span class="comment">// status  校验状态</span></span><br><span class="line"><span class="comment">// validatorName   验证器名字（例如：notEmpty）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//status的值有：</span></span><br><span class="line"><span class="comment">// &quot;NOT_VALIDATED&quot;   //未校验的</span></span><br><span class="line"><span class="comment">// &quot;VALIDATING&quot;    //校验中的</span></span><br><span class="line"><span class="comment">// &quot;INVALID&quot;     //校验失败的</span></span><br><span class="line"><span class="comment">// &quot;VALID&quot;    //校验成功的。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bootstrap相关</category>
      </categories>
      <tags>
        <tag>bootstrap-validator</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2018/04/14/git/git/</url>
    <content><![CDATA[<p>记录 <strong>Git</strong> 的常用操作命令，方便日后查看。</p>
<span id="more"></span>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><strong>git</strong> 的配置文件位于 <code>~/.gitconifg</code>（当前系统用户下）。修改配置的方式有如下 3 种。</p>
<h2 id="命令配置"><a href="#命令配置" class="headerlink" title="命令配置"></a>命令配置</h2><p><strong>1.配置用户名</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name [yourname]</span><br></pre></td></tr></table></figure>

<p><strong>2.配置邮箱</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email [youremail]</span><br></pre></td></tr></table></figure>

<p><strong>3.查看配置信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h2 id="vim-编辑器"><a href="#vim-编辑器" class="headerlink" title="vim 编辑器"></a>vim 编辑器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用此命令，会进入 vim 编辑器</span></span><br><span class="line">git config -e --global</span><br></pre></td></tr></table></figure>

<h2 id="gitconfig"><a href="#gitconfig" class="headerlink" title=".gitconfig"></a>.gitconfig</h2><p>直接进入到当前系统用户根目录下的 <code>.gitconfig</code> 配置文件中进行修改。</p>
<div class="note success"><p>更多的可配置信息可以参考：<a href="https://git-scm.com/docs/git-config" class="fc-danger"> git config docs </a>。</p>
</div>


<h1 id="配置忽略文件"><a href="#配置忽略文件" class="headerlink" title="配置忽略文件"></a>配置忽略文件</h1><p>通过在项目根目录下创建 <code>.gitignore</code> 文件来配置定义 一些文件(夹) 不被提交到 远程仓库。比如，当前项目的一些测试代码文件、编辑器配置文件、<code>npm</code> 管理包 <code>node_modules</code> 等。</p>
<p>可以使用 <code>touch .gitignore</code> 命令来生成该文件。（<strong>windows</strong> 下，无法创建没有名字的文件，其会把 <code>.</code> 后的认作后缀名）。</p>
<p><strong><code>.gitignore</code>文件示例</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">test/</span><br><span class="line">node_modules/</span><br><span class="line">.git</span><br><span class="line">.idea/</span><br><span class="line">.vscode</span><br><span class="line">.gitignore</span><br></pre></td></tr></table></figure>

<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化 <strong>git</strong> 仓库，在项目文件夹中打开 <strong>git bash</strong>，输入 <code>git init</code> 即可创建 <strong>git</strong> 仓库。</p>
<p>项目文件夹中会生成一个 <strong>.git</strong> 文件夹。里面创建有暂存区和本地仓库区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看当前项目中的文件状态，即做出了何种类型的修改（增、删、改），文件是否被追踪。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>将文件添加至暂存区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将指定文件添加至暂存区</span></span><br><span class="line">git add [文件名]  </span><br><span class="line"><span class="comment"># 将所有文件添加至暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git add -A</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git add --all</span><br></pre></td></tr></table></figure>

<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>将 <strong>暂存区</strong> 中的文件提交至 <strong>本地仓库</strong> 区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以行内提交信息的方式提交</span></span><br><span class="line">git commit -m <span class="string">&#x27;提交时的辅助说明信息&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以不带 -m 参数，直接回车，此时会进入 vim 编辑器 ，在这里书写你此次提交的信息</span></span><br><span class="line">git commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit , 替代上一次的提交，如果代码没有改变，则更新上一次的提交信息。</span></span><br><span class="line">git commit --amend -m [message]</span><br></pre></td></tr></table></figure>

<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>查看提交日志。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前head 及 以前的 日志</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看简洁的日志，每条提交日志以一条的形式展示</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有的提交日志</span></span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>将文件从暂存区还原到工作区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout [文件名.xxx]</span><br></pre></td></tr></table></figure>

<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>将指定版本项目从本地仓库区还原到工作区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard [版本号]</span><br></pre></td></tr></table></figure>

<h1 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h1><p>像其他版本控制系统（VCS）一样，<strong>Git</strong> 可以给历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。</p>
<h2 id="列出标签"><a href="#列出标签" class="headerlink" title="列出标签"></a>列出标签</h2><p>在 <code>Git</code> 中列出已有的标签是非常简单直观的。 只需要输入 <code>git tag</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有标签</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line">v1.0</span><br><span class="line">v2.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照指定模式列出标签</span></span><br><span class="line">$ git tag -l <span class="string">&#x27;v1.8.*&#x27;</span></span><br><span class="line"></span><br><span class="line">v1.8.2</span><br><span class="line">v1.8.4</span><br></pre></td></tr></table></figure>

<h2 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h2><p><code>Git</code> 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）。<br/></p>
<p>一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。</br></p>
<p>然而，附注标签是存储在 <code>Git</code> 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 <code>GNU Privacy Guard （GPG）</code>签名与验证。 通常建议创建附注标签，这样你可以拥有以上所有信息；但是如果你只是想用一个临时的标签，或者因为某些原因不想要保存那些信息，轻量标签也是可用的。</p>
<h3 id="附注标签"><a href="#附注标签" class="headerlink" title="附注标签"></a>附注标签</h3><p>在 <code>Git</code> 中创建一个附注标签是很简单的。 最简单的方式是当你在运行 <code>tag</code> 命令时指定 <code>-a</code> 选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag -a v1.4 -m <span class="string">&#x27;my version 1.4&#x27;</span></span><br><span class="line">$ git tag</span><br><span class="line">v0.1</span><br><span class="line">v1.3</span><br><span class="line">v1.4</span><br></pre></td></tr></table></figure>

<p><code>-m</code> 选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，<code>Git</code> 会运行 <code>vim</code> 编辑器要求你输入信息。</p>
<p>通过使用 <code>git show</code> 命令可以看到标签信息与对应的提交信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git show v1.4</span><br><span class="line">tag v1.4</span><br><span class="line">Tagger: Ben Straub &lt;ben@straub.cc&gt;</span><br><span class="line">Date:   Sat May 3 20:19:12 2014 -0700</span><br><span class="line"></span><br><span class="line">my version 1.4</span><br><span class="line"></span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class="line"></span><br><span class="line">    changed the version number</span><br></pre></td></tr></table></figure>
<p>输出显示了打标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息。</p>
<h3 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h3><p>另一种给提交打标签的方式是使用轻量标签。 轻量标签本质上是将提交校验和存储到一个文件中 - 没有保存任何其他信息。 创建轻量标签，不需要使用 <code>-a</code>、<code>-s</code> 或 <code>-m</code> 选项，只需要提供标签名字：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag v1.4-lw</span><br><span class="line">$ git tag</span><br><span class="line">v0.1</span><br><span class="line">v1.3</span><br><span class="line">v1.4</span><br><span class="line">v1.4-lw</span><br><span class="line">v1.5</span><br></pre></td></tr></table></figure>
<p>这时，如果在标签上运行 <code>git show</code>，你不会看到额外的标签信息。 命令只会显示出提交信息:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git show v1.4-lw</span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class="line"></span><br><span class="line">    changed the version number</span><br></pre></td></tr></table></figure>

<h3 id="后期打标签"><a href="#后期打标签" class="headerlink" title="后期打标签"></a>后期打标签</h3><p>你也可以对过去的提交打标签。 假设提交历史是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch <span class="string">&#x27;experiment&#x27;</span></span><br><span class="line">a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support</span><br><span class="line">0d52aaab4479697da7686c15f77a3d64d9165190 one more thing</span><br><span class="line">6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch <span class="string">&#x27;experiment&#x27;</span></span><br><span class="line">0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit <span class="keyword">function</span></span><br><span class="line">4682c3261057305bdd616e23b64b0857d832627b added a todo file</span><br><span class="line">166ae0c4d3f420721acbb115cc33848dfcc2121a started write support</span><br><span class="line">9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile</span><br><span class="line">964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo</span><br><span class="line">8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme</span><br></pre></td></tr></table></figure>

<p>现在，假设在 v1.2 时你忘记给项目打标签，也就是在 <strong>updated rakefile</strong> 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag -a v1.2 9fceb02</span><br></pre></td></tr></table></figure>

<p>可以看到你已经在那次提交上打上标签了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.1</span><br><span class="line">v1.2</span><br><span class="line">v1.3</span><br><span class="line">v1.4</span><br><span class="line">v1.4-lw</span><br><span class="line">v1.5</span><br><span class="line"></span><br><span class="line">$ git show v1.2</span><br><span class="line">tag v1.2</span><br><span class="line">Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Feb 9 15:32:16 2009 -0800</span><br><span class="line"></span><br><span class="line">version 1.2</span><br><span class="line">commit 9fceb02d0ae598e95dc970b74767f19372d61af8</span><br><span class="line">Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;</span><br><span class="line">Date:   Sun Apr 27 20:43:35 2008 -0700</span><br><span class="line"></span><br><span class="line">    updated rakefile</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="共享标签"><a href="#共享标签" class="headerlink" title="共享标签"></a>共享标签</h3><p>默认情况下，<code>git push</code> 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样 - 你可以运行 <code>git push origin [tagname]</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin v1.5</span><br><span class="line"></span><br><span class="line">Counting objects: 14, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (12/12), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 14 (delta 3), reused 0 (delta 0)</span><br><span class="line">To git@github.com:schacon/simplegit.git</span><br><span class="line"> * [new tag]         v1.5 -&gt; v1.5</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果想要一次性推送很多标签，也可以使用带有 <code>--tags</code> 选项的 <code>git push</code> 命令。 这将会把所有不在远程仓库服务器上的标签全部传送到那里。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<p>现在，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签。</p>
<h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>查看当前项目中的所有分支，在当前分支的前面会有一个 <code>*</code> 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支列表，不包含远程分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程分支列表</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有分支列表，包含本地和远程分支</span></span><br><span class="line">git branch --all </span><br><span class="line"></span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支，对于已经合并过的分支可以进行删除，删除的是本地分支</span></span><br><span class="line">git branch -d [分支名]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="批量删除分支"><a href="#批量删除分支" class="headerlink" title="批量删除分支"></a>批量删除分支</h3><p>实际开发中，我们会根据需求号 <code>feature/.*</code> 或 问题号 <code>iss/.*</code> 进行分支的切换。一段时间后，你会发现本地的分支非常多，并且大多数都是经过迭代的老分支。是可以删除的。</p>
<p>那么，我们可以利用 <code>git bash</code> 配合 <code>linux</code> 命令做批量删除分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch | egrep <span class="string">&#x27;iss/.*&#x27;</span> | xargs git branch -D</span><br></pre></td></tr></table></figure>

<p>以上命令表示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. git branch 列出本地所有分支</span><br><span class="line">2. egrep &#x27;iss/.*&#x27; 表示匹配这些分支字符传中以 `iss/` 开头的字符串（分支名）。</span><br><span class="line">3. xargs git branch -D 将第二步生成的字符串当做参数传递给 git branch -D</span><br><span class="line">4. 删除成功。</span><br></pre></td></tr></table></figure>

<p>再教你一个反向匹配的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch | egrep -v <span class="string">&#x27;master|base/func|release/20200313&#x27;</span> | xargs git branch -D</span><br></pre></td></tr></table></figure>

<p>以上命令表示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. git branch 列出本地所有分支。</span><br><span class="line">2. egrep -v &#x27;master|base/func|release/20200313&#x27; 表示匹配非 master, base/func, release/20200313 的其他分支。</span><br><span class="line">3. xargs git branch -D 将第二步生成的字符串当做参数传递给 git branch -D</span><br><span class="line">4. 删除成功。</span><br></pre></td></tr></table></figure>

<p>鼓掌!</p>
<h3 id="git-branch-vv"><a href="#git-branch-vv" class="headerlink" title="git branch -vv"></a>git branch -vv</h3><p>如果想要查看设置的所有跟踪分支，可以使用 <code>git branch</code> 的 <code>-vv</code> 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -vv</span><br><span class="line">  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets</span><br><span class="line">  master    1ae2a45 [origin/master] deploying index fix</span><br><span class="line">* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should <span class="keyword">do</span> it</span><br><span class="line">  testing   5ea463a trying something new</span><br></pre></td></tr></table></figure>

<p>这里可以看到 <code>iss53</code> 分支正在跟踪 <code>origin/iss53</code> 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 <code>master</code> 分支正在跟踪 <code>origin/master</code> 分支并且是最新的。 接下来可以看到 <code>serverfix</code> 分支正在跟踪 <code>teamone</code> 服务器上的 <code>server-fix-good</code> 分支并且领先 3 落后 1，意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 <code>testing</code> 分支并没有跟踪任何远程分支。</p>
<p>需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：<code>git fetch --all</code>; <code>git branch -vv</code>。</p>
<h2 id="git-checkout-1"><a href="#git-checkout-1" class="headerlink" title="git checkout"></a>git checkout</h2><p>切换分支，可以从当前分支切换到指定分支上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout [分支名]</span><br><span class="line"><span class="comment"># 创建新的分支，并切换到这个分支</span></span><br><span class="line">git checkout -b [分支名]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：当需要同步远程分支到本地仓库时，可以执行 <code>git checkout -b [branch] [remotename]/[branch]</code> 命令。将指定远程分支 <code>[remotename]/[branch]</code> 同步到本地仓库。</p>
</blockquote>
<p><strong>例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要同步远程分支 develop 到本地仓库</span></span><br><span class="line"></span><br><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure>

<p>运行 <code>git checkout -b [branch] [remotename]/[branch]</code>。 这是一个十分常用的操作所以 <code>Git</code> 提供了 <code>--track</code> 快捷方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout --track origin/serverfix</span><br></pre></td></tr></table></figure>

<p>该操作表示，在本地创建 <code>serverfix</code> 分支，并跟踪远程分支 <code>origin/serverfix</code>。当执行 <code>git pull</code> 命令时，会自动更新 <code>origin/serverfix</code> 远程分支的代码到 <code>serverfix</code> 分支上。</p>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>将指定分支合并到当前分支。git内部使用的是指针操作原理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge [分支名]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：在执行合并操作前，你首先需要切换到 <strong>要合入</strong> 的分支上，然后再执行合并操作。</p>
</blockquote>
<p><strong>例：</strong></p>
<p>你需要将 <code>trunk</code> 分支的代码合并到 <code>develop</code> 分支上，首先你需要切换到 <code>develop</code> 分支上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure>

<p>然后执行合并操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge trunk</span><br></pre></td></tr></table></figure>

<p>此时，<code>trunk</code> 分支上的新代码就被合并到了 <code>develop</code> 分支上。</p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>从远程仓库拷贝项目至本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [远程仓库地址] [重命名项目名]</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>注意：<br>项目名称参数不提供时，会默认使用原项目名称。</p>
</div>

<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>当 <code>git fetch</code> 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。<br>然而，有一个命令叫作 <code>git pull</code> 在大多数情况下它的含义是一个 <code>git fetch</code> 紧接着一个 <code>git merge</code> 命令。<br>如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 <code>clone</code> 或 <code>checkout</code> 命令为你创建的。<br><code>git pull</code> 都会查找当前分支所跟踪的服务器与分支，从服务器上抓取数据然后尝试合并入那个远程分支。</p>
<p>由于 <code>git pull</code> 的魔法经常令人困惑所以通常单独显式地使用 <code>fetch</code> 与 <code>merge</code> 命令会更好一些。</p>
<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>更新远程仓库代码至本地。用于更新项目其他成员提交的代码。一般在 <code>push</code> 前，一定要先 <code>pull</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [远程仓库地址/仓库别名] [分支名]</span><br></pre></td></tr></table></figure>

<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>将本地仓库中的代码提交至远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [远程仓库地址/仓库别名] [分支名]</span><br></pre></td></tr></table></figure>

<p><strong>推送本地分支至远程仓库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --set-upstream &lt;远程仓库地址/仓库别名&gt; &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用简写形式</span></span><br><span class="line">git push -u &lt;远程仓库地址/仓库别名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<p><strong>删除远程分支</strong></p>
<p>假设你已经通过远程分支做完所有的工作了 - 也就是说你和你的协作者已经完成了一个特性并且将其合并到了远程仓库的 <code>master</code> 分支（或任何其他稳定代码分支）。 可以运行带有 <code>--delete</code> 选项的 <code>git push</code> 命令来删除一个远程分支。 如果想要从服务器上删除 <code>serverfix</code> 分支，运行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin --delete serverfix</span><br><span class="line">To https://github.com/schacon/simplegit</span><br><span class="line"> - [deleted]         serverfix</span><br></pre></td></tr></table></figure>

<p>基本上这个命令做的只是从服务器上移除这个指针。 <code>Git</code> 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。</p>
<h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有的仓库别名</span></span><br><span class="line">git remote</span><br><span class="line"><span class="comment"># 新增仓库别名</span></span><br><span class="line">git remote add [别名] [远程仓库地址]</span><br><span class="line"><span class="comment"># 删除仓库别名</span></span><br><span class="line">git remote remove [别名]</span><br></pre></td></tr></table></figure>

<h1 id="SSH免密码登陆github配置"><a href="#SSH免密码登陆github配置" class="headerlink" title="SSH免密码登陆github配置"></a>SSH免密码登陆github配置</h1><h2 id="git-支持多种数据传输协议"><a href="#git-支持多种数据传输协议" class="headerlink" title="git 支持多种数据传输协议"></a>git 支持多种数据传输协议</h2><p><strong>例：</strong></p>
<p>https协议：<a href="https://github.com/jquery/jquery.git">https://github.com/jquery/jquery.git</a></p>
<p>ssh协议：<a href="git@github.com:jquery/jquery.git">git@github.com:jquery/jquery.git</a></p>
<p>每次 <code>push</code> 或者 <code>pull</code> 代码，如果使用 <code>https</code> 协议，那么都需要输入用户名和密码进行身份的确认，非常麻烦。</p>
<p><code>github</code> 为了账户的安全，需要对每一次 <code>push</code> 请求都要验证用户的身份，只有合法的用户才可以 <code>push</code>，使用 <code>ssh</code>协议，配置 <code>ssh</code> 免密码，可以做到免密码往 <code>github</code> 推送代码。</p>
<h2 id="SSH-免密码登录配置命令"><a href="#SSH-免密码登录配置命令" class="headerlink" title="SSH 免密码登录配置命令"></a>SSH 免密码登录配置命令</h2><ul>
<li><p>创建 SSH Key：<code>ssh-keygen -t rsa</code>。</p>
</li>
<li><p>在文件路径 <code>C:\用户\当前用户名\</code> 找到 <code>.ssh</code> 文件夹。</p>
</li>
<li><p>文件夹中有两个文件：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">私钥：id_rsa</span><br><span class="line">公钥：id_rsa.pub</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在 <code>github -&gt; settings -&gt; SSH and GPG keys</code> 页面中，新创建 <code>SSH key</code>。</p>
</li>
<li><p>粘贴公钥 <code>id_rsa.pub</code> 内容到对应文本框中。</p>
</li>
<li><p>在 <code>github</code> 中新建仓库或者使用现在仓库，拿到 <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#111;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#111;&#109;</a>:用户名&#x2F;仓库名.git。</p>
</li>
<li><p>此后，再次 <code>SSH</code> 方式与 <code>github</code> “通信”，不用输入密码确认身份了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Flex弹性布局</title>
    <url>/2018/10/01/css/css3-flex/</url>
    <content><![CDATA[<p>flex弹性布局简介(flexible box)。</p>
<span id="more"></span>

<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>采用flex布局的元素叫做 “容器” ，该元素(容器)内的所有子元素叫做 “项目”。沿着flex元素放置方向延伸的轴（比如页面上横向的行，纵向的列）被称为 “主轴” ，该轴的开始和结束分别称为 <code>main start</code> 和 <code>main end</code>。相反的，垂直于flex元素放置方向上的轴被称为 “交叉轴” 或 “横轴”，该轴的开始和结束分别称为 <code>cross start</code> 和 <code>cross end</code>。</p>
<blockquote>
<p>所有标签中的文本节点也可以当做项目来进行 <code>flex</code> 布局，即标签作为容器，文本作为项目。</p>
</blockquote>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><table>
<thead>
<tr>
<th align="center">Chrome</th>
<th align="center">Firefox</th>
<th align="center">Opera</th>
<th align="center">Safari</th>
<th align="center">IE</th>
</tr>
</thead>
<tbody><tr>
<td align="center">21+</td>
<td align="center">22+</td>
<td align="center">12.1+</td>
<td align="center">6.1+</td>
<td align="center">10+</td>
</tr>
</tbody></table>
<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>给要应用 <code>flex</code> 布局的元素设置 <code>display:flex</code> 或 <code>display:inline-flex</code> 属性。由于兼容性问题，webkit内核的浏览器需加上 <code>-webkit-</code> 前缀。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h1><p>容器属性有6个可以设置。分别是：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> flex-direction</span><br><span class="line"><span class="bullet">2.</span> flex-wrap</span><br><span class="line"><span class="bullet">3.</span> flex-flow</span><br><span class="line"><span class="bullet">4.</span> justify-content</span><br><span class="line"><span class="bullet">5.</span> align-items</span><br><span class="line"><span class="bullet">6.</span> align-content</span><br></pre></td></tr></table></figure>
<h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a><code>flex-direction</code>属性</h2><p>规定主轴的方向，即设置项目在容器里的排列方向。</p>
<table>
<thead>
<tr>
<th align="center">可选值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>row</code></td>
<td align="center">(默认)，主轴方向 <strong>水平从左向右</strong>，即项目依次从左向右排列</td>
</tr>
<tr>
<td align="center"><code>row-reverse</code></td>
<td align="center">主轴方向 <strong>水平从左向右</strong>，即项目依次从右向左排列</td>
</tr>
<tr>
<td align="center"><code>column</code></td>
<td align="center">主轴方向 <strong>垂直从上到下</strong>，即项目依次从上到下排列</td>
</tr>
<tr>
<td align="center"><code>column-reverse</code></td>
<td align="center">主轴方向 <strong>垂直从下到上</strong>，即项目从下往上排列</td>
</tr>
</tbody></table>
<h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a><code>flex-wrap</code>属性</h2><p>规定当项目在主轴方向上无法放下时，是否换行。</p>
<table>
<thead>
<tr>
<th align="center">可选值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>no-wrap</code></td>
<td align="center">(默认)，不换行</td>
</tr>
<tr>
<td align="center"><code>wrap</code></td>
<td align="center">换行，依次从上到下排列(主轴水平)</td>
</tr>
<tr>
<td align="center"><code>wrap-reverse</code></td>
<td align="center">换行，第一行在下方，即从下到上换行</td>
</tr>
</tbody></table>
<h2 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a><code>flex-flow</code>属性</h2><p><code>flex-direction</code> 和 <code>flex-wrap</code> 的简写属性。</p>
<table>
<thead>
<tr>
<th align="center">可选值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>row no-wrap</code></td>
<td align="center">(默认)，主轴从左到右，不换行。第一个值为 <code>flex-direction</code> 属性值<br/>第二个值为 <code>flex-wrap</code> 属性值</td>
</tr>
</tbody></table>
<h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a><code>justify-content</code>属性</h2><p>规定项目在主轴方向上的对齐方式。</p>
<table>
<thead>
<tr>
<th align="center">可选值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>flex-start</code></td>
<td align="center">(默认)，项目向主轴的开始处(main start)对齐</td>
</tr>
<tr>
<td align="center"><code>flex-end</code></td>
<td align="center">项目向主轴的结束处(main end)对齐</td>
</tr>
<tr>
<td align="center"><code>center</code></td>
<td align="center">项目在主轴方向上居中对齐</td>
</tr>
<tr>
<td align="center"><code>space-between</code></td>
<td align="center">项目在主轴方向上均匀分布排列，即项目之间留出空间，但项目与容器边缘不留空间</td>
</tr>
<tr>
<td align="center"><code>space-around</code></td>
<td align="center">项目在主轴方向均匀分布，不但项目与项目之间有间隙，项目与容器边缘也会有间隙</td>
</tr>
</tbody></table>
<h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a><code>align-items</code>属性</h2><p>规定项目在交叉轴上的对齐方式。</p>
<table>
<thead>
<tr>
<th align="center">可选值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>stretch</code></td>
<td align="center">(默认)，项目不设置高度或为 <code>auto</code> 时，将占满整个容器的高度</td>
</tr>
<tr>
<td align="center"><code>flex-start</code></td>
<td align="center">向交叉轴的起点对齐</td>
</tr>
<tr>
<td align="center"><code>flex-end</code></td>
<td align="center">向交叉轴的终点对齐</td>
</tr>
<tr>
<td align="center"><code>center</code></td>
<td align="center">项目在交叉轴上居中对齐</td>
</tr>
<tr>
<td align="center"><code>baseline</code></td>
<td align="center">向项目的第一行文字的基线对齐</td>
</tr>
</tbody></table>
<h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a><code>align-content</code>属性</h2><p>规定多根轴线的对齐方式，如果项目只有一个轴线，该属性不起作用。即有多个主轴时，控制主轴在交叉轴上的对齐方式，把一条轴线上的项目作为一个整体进行对齐。</p>
<table>
<thead>
<tr>
<th align="center">可选值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>stretch</code></td>
<td align="center">(默认)，在交叉轴上伸张，拉伸，即占满整个交叉轴</td>
</tr>
<tr>
<td align="center"><code>flex-start</code></td>
<td align="center">与交叉轴的起点对齐</td>
</tr>
<tr>
<td align="center"><code>flex-end</code></td>
<td align="center">与交叉轴的终点对齐</td>
</tr>
<tr>
<td align="center"><code>center</code></td>
<td align="center">在交叉轴上居中对齐</td>
</tr>
<tr>
<td align="center"><code>space-between</code></td>
<td align="center">与交叉轴两端对齐，轴线之间均匀分布</td>
</tr>
<tr>
<td align="center"><code>space-around</code></td>
<td align="center">每根轴线的两侧都相等</td>
</tr>
</tbody></table>
<h1 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h1><p>项目属性有6个可以设置，分别为：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> order</span><br><span class="line"><span class="bullet">2.</span> flex-grow</span><br><span class="line"><span class="bullet">3.</span> flex-shrink</span><br><span class="line"><span class="bullet">4.</span> flex-basis</span><br><span class="line"><span class="bullet">5.</span> flex</span><br><span class="line"><span class="bullet">6.</span> align-self</span><br></pre></td></tr></table></figure>
<h2 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a><code>order</code>属性</h2><p>规定项目的排列顺序。<br/></p>
<p>整数值，默认为 0 ，数值越小越靠前排列。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a><code>flex-grow</code>属性</h2><p>规定项目的放大比例。<br/></p>
<p>项目在容器中的占据位置比例值。整数值，默认为0，即容器存在多余的空间也不放大。当值大于0时，就按相应的倍数放大。</p>
<p>比如，主轴上有两个项目，分别设置两个项目 <code>flex-grow: 1</code> 。则表示两个项目各占据主轴空间 1&#x2F;2。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>又比如，主轴上有两个项目，分别设置 <code>flex-grow</code> 如下，则表示 <code>.left</code> 项目占据主轴的全部剩余空间。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">0</span>; <span class="comment">/* 0 是默认值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a><code>flex-shrink</code>属性</h2><p>规定项目的缩小比例。<br/></p>
<p>整数值，默认为 1 ，即当容器变小时，项目会按比例缩小。该值不可取负值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a><code>flex-basis</code>属性</h2><p>规定分配多余空间之前，设置项目占据的固定主轴空间(项目的固定宽度)。<br/></p>
<p>可选值是 <code>width</code> 和 <code>height</code> 能设置的值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a><code>flex</code>属性</h2><p><code>flex-grow</code> , <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写属性。<br/></p>
<p>默认值：<code>0 1 auto</code><br>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) , <code>none</code> (<code>0 0 auto</code>)<br><strong>例：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 放大，缩小*/</span></span><br><span class="line"><span class="attribute">flex</span>: auto;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*不放大，不缩小*/</span></span><br><span class="line"><span class="attribute">flex</span>: none;</span><br></pre></td></tr></table></figure>

<h2 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a><code>align-self</code>属性</h2><p>控制具体的单个项目在交叉轴上的对齐方式。</p>
<table>
<thead>
<tr>
<th align="center">可选值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>stretch</code></td>
<td align="center">(默认)，项目不设置高度或为 <code>auto</code> 时，将占满整个容器的高度</td>
</tr>
<tr>
<td align="center"><code>flex-start</code></td>
<td align="center">向交叉轴的起点对齐</td>
</tr>
<tr>
<td align="center"><code>flex-end</code></td>
<td align="center">向交叉轴的终点对齐</td>
</tr>
<tr>
<td align="center"><code>center</code></td>
<td align="center">在交叉轴上居中对齐</td>
</tr>
<tr>
<td align="center"><code>baseline</code></td>
<td align="center">与项目的第一行文字的基线对齐</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>css相关</category>
      </categories>
      <tags>
        <tag>flex</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Grid网格布局</title>
    <url>/2019/03/25/css/css3-grid/</url>
    <content><![CDATA[<p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。同时跟表格 <code>&lt;table&gt;</code> 也有些相似，也有 <code>单元格</code> 的概念。</p>
<p>Flex 布局是轴线布局，只能指定 “项目” 针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成 “行” 和 “列”，产生单元格，然后指定 “项目所在” 的单元格，可以看作是二维布局。Grid 布局是继 Flex 布局之后的又一布局利器。</p>
<span id="more"></span>

<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="容器和项目"><a href="#容器和项目" class="headerlink" title="容器和项目"></a>容器和项目</h2><p>采用网格布局的区域，称为 “容器”（container）。容器内部采用网格定位的子元素，称为 “项目”（item）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span> 4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span> 5 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span> 6 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，最外层的 <code>&lt;div&gt;</code> 元素就是 <code>容器</code>，内层的 6 个 <code>&lt;div&gt;</code> 元素就是 <code>项目</code>。</p>
<blockquote>
<p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的 <code>&lt;span&gt;</code> 元素 和文本内容就不是项目。Grid 布局只对项目生效。</p>
</blockquote>
<h2 id="行和列"><a href="#行和列" class="headerlink" title="行和列"></a>行和列</h2><p>容器里面的 <code>水平区域</code> 称为 “行”（row），<code>垂直区域</code> 称为 “列”（column）。</p>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1krst0r6lj30fo0aca9v.jpg" />

<p>上图中，水平的深色区域就是 “行”，垂直的深色区域就是 “列”。</p>
<h2 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h2><p>行和列的交叉区域，称为 “单元格”（cell）。</p>
<p>正常情况下，<code>n行 和 m列</code> 会产生 <code>n x m</code> 个单元格。比如，<code>3行3列</code> 会产生 <code>9</code> 个单元格。</p>
<h2 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h2><p>划分网格的线，称为 “网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。</p>
<p>正常情况下，<code>n</code> 行有 <code>n + 1</code> 根水平网格线，<code>m</code> 列有 <code>m + 1</code> 根垂直网格线，比如三行就有四根水平网格线。</p>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1ks3meyk8j30dw0cuglp.jpg" />

<p>上图是一个 4 x 4 的网格，共有 5 根水平网格线和 5 根垂直网格线。</p>
<h1 id="容器规则"><a href="#容器规则" class="headerlink" title="容器规则"></a>容器规则</h1><p>Grid 布局的规则分成两类。一类定义在容器上面，称为 <code>容器规则</code>；另一类定义在项目上面，称为<code>项目规则</code>。这部分先介绍 <code>容器规则</code>。</p>
<h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>将容器元素的 <code>display</code> 规则设置为 <code>grid</code> 即可启用 网格布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line"> 	<span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认情况下，容器元素都是块级元素，但也可以设成行内元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，设为网格布局以后，容器的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</p>
</blockquote>
<h2 id="grid-template-rows"><a href="#grid-template-rows" class="headerlink" title="grid-template-rows"></a>grid-template-rows</h2><h2 id="grid-template-columns"><a href="#grid-template-columns" class="headerlink" title="grid-template-columns"></a>grid-template-columns</h2><p>容器指定了网格布局以后，接着就要划分行和列。<code>grid-template-columns</code> 规则定义每一列的列宽，<code>grid-template-rows</code> 规则定义每一行的行高。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-1</span> &#123;</span><br><span class="line">  <span class="comment">/* 定义网格的行：这里为 3 行 ，每行的高度分别为：100px 100px 100px */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 定义网格的列：这里为 3 列 ，每列的宽度分别为：100px 100px 100px */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1ksuqjk89j30ao0awaai.jpg" />


<p>如上图，使用的是绝对单位，定义了 <code>3*3</code> 的网格布局，列宽和行高 还可以使用百分比，如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-2</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1kt4cjdc0j312l0audh9.jpg" />


<p>使用百分比单位时，会根据容器的宽高按比例自动分配行高和列宽。</p>
<h2 id="网格线的名称"><a href="#网格线的名称" class="headerlink" title="网格线的名称"></a>网格线的名称</h2><p><code>grid-template-columns</code> 和 <code>grid-template-rows</code> 的值中可以设置每条网格线的名称。<br>下面代码指定网格布局为 <code>2行 x 3列</code>，因此有 <code>4</code> 根垂直网格线和 <code>3</code> 根水平网格线。方括号里面依次是这 <code>7</code> 根线的名字。<br>网格布局允许同一根线有多个名字，比如 <code>[fifth-line row-5]</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-3</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [r1] <span class="number">50%</span> [r2] <span class="number">50%</span> [r3];  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [c1] <span class="number">33.33%</span> [c2] <span class="number">33.33%</span> [c3] <span class="number">33.33%</span> [c4];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1ktg1jvc9j30zn07awfg.jpg" />


<h2 id="grid-row-gap"><a href="#grid-row-gap" class="headerlink" title="grid-row-gap"></a>grid-row-gap</h2><h2 id="grid-column-gap"><a href="#grid-column-gap" class="headerlink" title="grid-column-gap"></a>grid-column-gap</h2><p><code>grid-row-gap</code> 定义网格中行与行之间的间距。<br><code>grid-column-gap</code> 定义网格中列与列之间的间距。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-4</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">200px</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>-<span class="attribute">gap</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>-<span class="attribute">gap</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1ktvd4ozfj30oq093js4.jpg" />



<p>如上图，定义了 <code>2*3</code> 的网格，行与行之间的间隔为 <code>50px</code> ，列与列之间的间隔为 <code>50px</code>。</p>
<h2 id="grid-gap"><a href="#grid-gap" class="headerlink" title="grid-gap"></a>grid-gap</h2><p><code>grid-gap</code> 是 <code>grid-row-gap</code> 和 <code>grid-column-gap</code> 的简写属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-gap</span>: [grid-row-gap] [grid-column-gap];</span><br></pre></td></tr></table></figure>
<p>如果 <code>grid-gap</code> 省略了第二个值，浏览器认为第二个值等于第一个值。</p>
<blockquote>
<p>根据最新标准，上面三个属性名的 <code>grid-</code> 前缀已经删除，<code>grid-column-gap</code> 和 <code>grid-row-gap</code> 写成 <code>column-gap</code> 和 <code>row-gap</code>，<code>grid-gap</code> 写成 <code>gap</code>。</p>
</blockquote>
<h2 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h2><p>网格布局允许指定 “区域”（area），一个区域由单个或多个单元格组成。<code>grid-template-areas</code> 属性用于定义区域。<br>下面代码先划分出 6 个单元格，然后将其定名为 a 到 f 的 6 个区域，分别对应这 6 个单元格。 如果某些区域不需要利用，则使用 “点”（.）表示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-5</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">200px</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">&#x27;a b c&#x27;</span> </span><br><span class="line">                       <span class="string">&#x27;d e f&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1kuelfqxwj30l607eq3g.jpg" />


<h2 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h2><p>划分网格以后，容器中的子元素 (项目) 会按照顺序，自动放置在每一个网格。<br>默认的放置顺序是 “先行后列”，即先填满第一行，再开始放入第二行，以此类推。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-auto-flow</span>: row;</span><br></pre></td></tr></table></figure>

<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1kujcrgo1j30ap0arwev.jpg" />

<p>将 <code>grid-auto-flow</code> 的值设置为 <code>column</code> 后，变为 “先列后行”。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-auto-flow</span>: column;</span><br></pre></td></tr></table></figure>

<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1kupm0idpj30aq0aswey.jpg" />


<p><code>grid-auto-flow</code> 的值还可以设成 <code>row dense</code> 和 <code>column dense</code>。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。</p>
<p>让 1号项目 和 2号项目 各占据两个单元格，然后在默认的 <code>grid-auto-flow: row</code> 情况下，会产生下面这样的布局。</p>
<p>1号项目 后面的位置是空的，因为 1号项目 的后方不够 2号项目 放置，并且 3号项目 默认跟着 2号项目，所以会排在2号项目后面。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-8</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-8</span> <span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ef342a</span>;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">3</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1kuxnhsfrj30as0arq39.jpg" />



<p>将 <code>grid-auto-flow</code> 的值设置为 <code>row dense</code> 后，表示 “先行后列”，并且尽可能紧密填满，尽量不出现空格。</p>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1kv27src2j30ak0alwet.jpg" />


<p>如果将设置改为 <code>column dense</code>，表示 “先列后行”，并且尽量填满空格。</p>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1kv53lphtj30al0amq38.jpg">


<h2 id="项目在单元格中的对齐方式"><a href="#项目在单元格中的对齐方式" class="headerlink" title="项目在单元格中的对齐方式"></a>项目在单元格中的对齐方式</h2><h3 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a>justify-items</h3><p>设置项目在单元格中水平方向上的位置（左 start 中 center 右 end 拉伸(默认) stretch）。</p>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>设置项目在单元格中垂直方向上的位置（左 start 中 center 右 end 拉伸(默认) stretch）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">start：对齐单元格的起始边缘。 </span><br><span class="line">end：对齐单元格的结束边缘。</span><br><span class="line">center：单元格内部居中。</span><br><span class="line">stretch：拉伸，占满单元格的整个宽度（默认值）。</span><br></pre></td></tr></table></figure>

<h3 id="place-items"><a href="#place-items" class="headerlink" title="place-items"></a>place-items</h3><p><code>place-items</code> 属性是 <code>align-items</code>  属性和 <code>justify-items</code>  属性的合并简写形式。 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">place-items: [align-items] [justify-items];</span><br></pre></td></tr></table></figure>


<p>单元格的内容左对齐，效果如下图。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">justify-items: start;</span><br></pre></td></tr></table></figure>

<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1l1pwrzswj30g306djrj.jpg">


<p>单元格的内容头部对齐，效果如下图。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: start;</span><br></pre></td></tr></table></figure>

<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1l1rqas4vj30ft06a0su.jpg">



<h2 id="项目在容器中的对齐方式"><a href="#项目在容器中的对齐方式" class="headerlink" title="项目在容器中的对齐方式"></a>项目在容器中的对齐方式</h2><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><code>justify-content</code> 属性可以定义整个内容区域在容器里面的水平放置位置（左中右）。</p>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><code>align-content</code> 属性可以定义整个内容区域在容器里面的垂直放置位置（左中右）。</p>
<p>上面两个属性都可以使用如下值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">start : 网格线开始位置，靠左或靠上。</span><br><span class="line">end : 网格线结束位置，靠右或靠下。</span><br><span class="line">center : 垂直或水平居中。</span><br><span class="line">stretch : 项目大小没有指定时，拉伸占据整个网格容器。</span><br><span class="line">space-around : 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</span><br><span class="line">space-between : 项目与项目的间隔相等，项目与容器边框之间没有间隔。</span><br><span class="line">space-evenly : 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这两个属性的写法完全相同，都可以取下面这些值。（下面的图都以 <code>justify-content</code> 属性为例，<code>align-content</code> 属性的图完全一样，只是将水平方向改成垂直方向。）</p>
</blockquote>
<ul>
<li>start 对齐容器的起始边框。</li>
</ul>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1l1zi7s5dj30g609p3yr.jpg">

<ul>
<li>end : 网格线结束位置，靠右或靠下。</li>
</ul>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1l1zfuz6jj30gf09a74j.jpg">

<ul>
<li>center : 垂直或水平居中。</li>
</ul>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1l1zfk02cj30g20970sz.jpg">

<ul>
<li>stretch : 项目大小没有指定时，拉伸占据整个网格容器。</li>
</ul>
<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1l1zkxbanj30gg09jaac.jpg">

<ul>
<li>space-around : 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</li>
</ul>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1l1zginodj30fz09e3ys.jpg">


<ul>
<li>space-between : 项目与项目的间隔相等，项目与容器边框之间没有间隔。</li>
</ul>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1l1zhe5gxj30fz09gt90.jpg">

<ul>
<li>space-evenly : 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</li>
</ul>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1l1zg43jnj30gc09dq38.jpg">




<h3 id="place-content"><a href="#place-content" class="headerlink" title="place-content"></a>place-content</h3><p><code>place-content</code> 属性是 <code>align-content</code> 属性和 <code>justify-content</code> 属性的合并简写形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">place-<span class="attribute">content</span>: [align-content] [justify-content];</span><br></pre></td></tr></table></figure>

<h2 id="grid-auto-columns"><a href="#grid-auto-columns" class="headerlink" title="grid-auto-columns"></a>grid-auto-columns</h2><h2 id="grid-auto-rows"><a href="#grid-auto-rows" class="headerlink" title="grid-auto-rows"></a>grid-auto-rows</h2><p><code>grid-auto-columns</code> 和 <code>grid-auto-rows</code>  属性用来设置，浏览器自动创建的多余网格的列宽和行高。用法和 <code>grid-template-columns 、grid-template-row</code> 一毛一样。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-11 grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-11</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>,<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-11</span> <span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1kvqqw8vzj30ai07v0t1.jpg">


<p>如上图所示，区域 1 占据了 2 个单元格，导致第6个单元格无法放置在原本的网格内，浏览器自动根据第6块内容的大小创建了一个单元格。该单元格的宽高取决于这块内容自身的大小。</p>
<p>当我们设置了 <code>grid-auto-columns</code> 和 <code>grid-auto-rows</code> 属性时，浏览器则会根据这两个属性值去生成多余单元格的大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-11</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如下图：</p>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1kvv5s848j30al0aoaad.jpg">



<h2 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template"></a>grid-template</h2><p><code>grid-template</code> 属性是 <code>grid-template-columns、grid-template-rows</code> 和 <code>grid-template-areas</code> 这三个属性的合并简写形式。</p>
<h2 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h2><p><code>grid</code> 属性是 <code> grid-template-rows、grid-template-columns、grid-template-areas、grid-auto-rows、grid-auto-columns、grid-auto-flow</code> 这六个属性的合并简写形式。</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="minmax"><a href="#minmax" class="headerlink" title="minmax()"></a>minmax()</h2><p>使用 <code>minmax()</code> 函数约定长度范围。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* 共定义了 3 列，第一、二列 占容器总宽度的 1/3  。第3列 最少占200px 宽度，最大占   容器总宽度的 1/3 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">200px</span> , <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1kw4vtodzj30zj03sdgd.jpg">





<p>上方代码规则定义了 <code>1*3</code> 的网格，第 3 列单元格 使用了 <code>minmax()</code> 函数定义该列的列宽规则。表示，最小有 <code>200px</code> 宽，最大有 容器总宽度的 <code>1/3</code>。如下图，当缩小容器宽度的时候，前 2 列的宽度值由于是相对单位，会进行适应缩放，而第 3 列 则会 最小保持 <code>200px</code> 的列宽。</p>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1kwjqhymrg30go023wn8.gif">


<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h2><p><code>repeat()</code> 函数可以某个值的次数。通常作用于 <code>grid-template-rows</code> 和 <code>grid-template-columns</code>。</p>
<blockquote>
<p>第一个参数：重复的次数。第二个参数：要重复的值。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-3</span> &#123;</span><br><span class="line">  <span class="comment">/* 使用 repeat() 函数 简化 重复值 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>( <span class="number">3</span>, <span class="number">33.33%</span> );  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>( <span class="number">3</span>, <span class="number">33.33%</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码规则等同于：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-3</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1kwziw7nlj30wg0art9w.jpg">


<blockquote>
<p>也可以使用 repeat() 函数重复某种模式。第一个参数：重复模式的次数。第二个参数：要重复的模式。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-4</span> &#123;</span><br><span class="line">  <span class="comment">/* 使用 repeat() 函数 以某种模式重复 */</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>( <span class="number">2</span>, <span class="number">200px</span> <span class="number">100px</span> );  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>( <span class="number">2</span>, <span class="number">200px</span> <span class="number">100px</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 上面代码定义了 4 行 ，4 列 ，也就是有 4*4=16 的单元格 */</span></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  拆分开来为：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  grid-template-rows: 200px 100px 200px 100px</span></span><br><span class="line"><span class="comment">  grid-template-columns: 200px 100px 200px 100px</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  第 1 个单元格的 高为 200px 宽为 200px</span></span><br><span class="line"><span class="comment">  第 2 个单元格的 高为 200px 宽为 100px</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ......</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>14<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>15<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>16<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1kx4ityo0j30l40l6abb.jpg">





<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="auto-fill"><a href="#auto-fill" class="headerlink" title="auto-fill"></a>auto-fill</h2><p>使用 <code>auto-fill</code> 关键字 控制自动填充。</p>
<blockquote>
<p>如下代码规则，列数自动填充，直到放不下为止，且每列的宽度为 200px。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-5</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">100px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 定义行高为 100px ，默认网格占据有 2 行的高度*/</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>( <span class="number">2</span> , <span class="number">100px</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 列数自动填充，直到放不下为止，且每列的宽度为 200px  */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>( auto-fill , <span class="number">200px</span> );</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1kze2k9mfg30go04lk7b.gif">


<h2 id="fr"><a href="#fr" class="headerlink" title="fr"></a>fr</h2><p>使用 fr 关键字表示比例关系。</p>
<blockquote>
<p>如下代码规则，第二列为第一列的2倍宽。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-6</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="comment">/* 第2列的宽度为第1列的 2 倍 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1ky0g114xj30u907awf5.jpg">


<blockquote>
<p>fr 与 绝对单位 结合使用。第一列为固定宽度 200px，第3列宽为第2列的2倍。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-7&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-7</span> &#123;</span><br><span class="line">  <span class="comment">/* 第3列的宽度为第2列的 2 倍 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1ky3lfugxj30ua07aq3r.jpg">


<h2 id="fr-之-圣杯布局"><a href="#fr-之-圣杯布局" class="headerlink" title="fr 之 圣杯布局"></a>fr 之 圣杯布局</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-8</span> &#123;</span><br><span class="line">  <span class="comment">/* 经典的 高度固定，两端固定，中间自适应的三列布局 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1l0itkqe7g30go02o46b.gif">

<h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p><code>auto</code> 关键字，表示由浏览器自己决定宽度。</p>
<blockquote>
<p>如下，第1、3列为固定100px宽度，中间的第2列宽度由浏览器自动计算，即自适应。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-2</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> auto <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1kyb1kzvxj30xi03xq3f.jpg">




<h1 id="项目规则"><a href="#项目规则" class="headerlink" title="项目规则"></a>项目规则</h1><p>下面这些规则定义在项目上面。</p>
<h2 id="grid-row-start"><a href="#grid-row-start" class="headerlink" title="grid-row-start"></a>grid-row-start</h2><h2 id="grid-row-end"><a href="#grid-row-end" class="headerlink" title="grid-row-end"></a>grid-row-end</h2><h2 id="grid-column-start"><a href="#grid-column-start" class="headerlink" title="grid-column-start"></a>grid-column-start</h2><h2 id="grid-column-end"><a href="#grid-column-end" class="headerlink" title="grid-column-end"></a>grid-column-end</h2><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">grid-row-start 用来设置 `上边框` 所在的网格线位置。</span><br><span class="line">grid-row-end 用来设置 `下边框` 所在网格线的位置。</span><br><span class="line">grid-column-start 用来设置 `左边框` 所在网格线的位置。</span><br><span class="line">grid-column-end 用来设置 `右边框` 所在网格线的位置。</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box box-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-1</span> <span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1l0v472phj30ak0ap74m.jpg">

<p>如上图：1号项目的左边框被设置在第2根垂直网格线上，右边框被设置在第4根垂直网格线上。使得 1 号项目横跨了 第2、3个单元格。</p>
<p>剩余项目则跟在其后自动排布。这时它们的位置由容器的 <code>grid-auto-flow</code> 属性决定，这个属性的默认值是 <code>row</code>，因此会”先行后列”进行排列。</p>
<p>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123; </span><br><span class="line">    <span class="attribute">grid-column-start</span>: header-start; </span><br><span class="line">    <span class="attribute">grid-column-end</span>: header-end; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这四个属性的值还可以使用 <code>span</code> 关键字，表示 “跨越”，即左右边框（上下边框）之间跨越多少个网格。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box box-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1l10o2he0j30ak0anjrp.jpg">

<p>如上图：第一个项目横跨了第一个和第二个单元格。<br>这与下面代码效果一样： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123; </span><br><span class="line">	<span class="attribute">grid-column-end</span>: span <span class="number">2</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>使用这四个属性，如果产生了项目的重叠，则使用 <code>z-index</code> 属性指定项目的重叠顺序。</p>
<h2 id="grid-column"><a href="#grid-column" class="headerlink" title="grid-column"></a>grid-column</h2><h2 id="grid-row"><a href="#grid-row" class="headerlink" title="grid-row"></a>grid-row</h2><p><code>grid-column</code> 属性是 <code>grid-column-start 和 grid-column-end</code> 的合并简写形式，<br><code>grid-row</code> 属性是 <code>grid-row-start 和 grid-row-end</code> 的合并简写形式。</p>
<p>下面是一个例子： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>; </span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">2</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* 等同于 */</span> </span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">grid-column-end</span>: <span class="number">3</span>; </span><br><span class="line">    <span class="attribute">grid-row-start</span>: <span class="number">1</span>; </span><br><span class="line">    <span class="attribute">grid-row-end</span>: <span class="number">2</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这两个属性之中，也可以使用 <code>span</code> 关键字，表示跨越多少个网格。 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#b03532</span>; </span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>; </span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* 等同于 */</span> </span><br><span class="line"><span class="selector-class">.item-1</span> &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#b03532</span>; </span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">2</span>; </span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">1</span> / span <span class="number">2</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1l186ij8fj30an0anaac.jpg">

<blockquote>
<p>斜杠以及后面的部分可以省略，默认跨越一个网格。 </p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123; </span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span>; </span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">1</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>上面代码中，项目item-1占据左上角第一个网格。</p>
<h2 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h2><p><code>grid-area</code> 属性指定项目放在哪一个区域。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid box-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box-4</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">&#x27;a b c&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;d e f&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;g h i&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-4</span> <span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b03532</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1l1co5eufj30al0anwew.jpg">

<blockquote>
<p>如上图：将 1 号项目放置在 e 区域中。</p>
</blockquote>
<h2 id="项目中内容的对齐方式"><a href="#项目中内容的对齐方式" class="headerlink" title="项目中内容的对齐方式"></a>项目中内容的对齐方式</h2><h3 id="justify-self"><a href="#justify-self" class="headerlink" title="justify-self"></a>justify-self</h3><p>设置单元格内容的水平位置（左中右），只作用于单个项目中。</p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>设置单元格内容的垂直位置（上中下），只作用于单个项目中。</p>
<p>这两个属性都可以去下面这些值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">start：对齐单元格的起始边缘。 </span><br><span class="line">end：对齐单元格的结束边缘。 </span><br><span class="line">center：单元格内部居中。 </span><br><span class="line">stretch：拉伸，占满单元格的整个宽度（默认值）。 </span><br></pre></td></tr></table></figure>

<p>下面是 <code>justify-self: start</code> 的例子：</p>
<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1l1iq5yrbj30ft068weg.jpg">



<h3 id="place-self"><a href="#place-self" class="headerlink" title="place-self"></a>place-self</h3><p><code>align-self</code> 和 <code>justify-self</code> 的简写属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">place-self: [align-self] [justify-self]; </span><br></pre></td></tr></table></figure>

<p>如果省略第二个值，<code>place-self</code> 属性会认为这两个值相等。</p>
]]></content>
      <categories>
        <category>css相关</category>
      </categories>
      <tags>
        <tag>Grid</tag>
        <tag>css 布局</tag>
        <tag>网格</tag>
      </tags>
  </entry>
  <entry>
    <title>linear-gradient线性渐变说明</title>
    <url>/2019/03/19/css/css3-linear-gradient/</url>
    <content><![CDATA[<p>记录 css3 中 <code>linear-gradient</code> 线性渐变的基本使用。</p>
<span id="more"></span>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CSS <code>linear-gradient()</code> 函数用于创建一个表示两种或多种颜色线性渐变的图片。其结果属于<code>&lt;gradient&gt;</code> 数据类型，是一种特别的 <code>&lt;image&gt;</code> 数据类型。</p>
<p><strong>列：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 渐变轴为180度，从红色渐变到蓝色 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>( <span class="number">180deg</span> , red , blue );</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 从右下到左上、从蓝色渐变到红色 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to left top, blue, red);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 从下到上，从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */</span></span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">0deg</span>, blue, green <span class="number">40%</span>, red);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="线性渐变的形成"><a href="#线性渐变的形成" class="headerlink" title="线性渐变的形成"></a>线性渐变的形成</h1><p>某个容器元素的线性渐变效果由 <code>渐变线</code> 上的各 <code>着色点</code> 平滑形成。而 <code>渐变线（Gradient Line）</code> 的形成由容器元素 <code>中心点</code> 和 <code>渐变角度</code> 所决定。一但 <code>渐变线</code> 被确定，那么渐变效果会从 <code>起始点（Starting Point）</code> 开始，沿着 <code>渐变线</code> ，将 <code>渐变线</code> 上各点的颜色映射到容器元素对应区域点上，直到 <code>结束点（Ending Point）</code>。这就像是，在一张画布上连续的放置了一排不同的颜料，刷子沿着这些颜料一刷后，你所看到的颜色效果。</p>
<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g18a3ndy0yj30a30dmglw.jpg" />

<blockquote>
<p>渐变 <code>起始点</code> 的确定：</p>
</blockquote>
<p><code>起始点</code> 是 <code>渐变线</code> 上代表起始颜色值的点。<code>起始点</code> 由 <code>渐变线</code> 和过容器元素顶点的垂直线之间的交叉点来定义。（垂直线跟渐变线在同一象限内）</p>
<blockquote>
<p>渐变 <code>结束点</code> 的确定：</p>
</blockquote>
<p><code>结束点</code> 是 <code>渐变线</code> 上代表最终颜色值的点。<code>结束点</code> 也是由 <code>渐变线</code> 和从最近的顶点发出的垂直线之间的交叉点定义的，然而从 <code>起始点</code> 的对称点来定义 <code>结束点</code> 是更容易理解的一种方式，因为 <code>结束点</code> 是 <code>起始点</code> 关于容器元素的 <code>中心点</code> 的反射点。</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">linear-gradient( <span class="selector-attr">[ &lt;angle&gt; | to &lt;side-or-corner&gt; ,]</span>? &lt;start <span class="attribute">color</span>&gt; <span class="selector-attr">[ &lt;percentage&gt; | &lt;length&gt; ]</span>, &lt;colors&gt; <span class="selector-attr">[ &lt;percentage&gt; | &lt;length&gt; ]</span> , &lt;end <span class="attribute">color</span>&gt; <span class="selector-attr">[ &lt;percentage&gt; | &lt;length&gt; ]</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>按顺序来解释<code>linear-gradient()</code> 函数的参数：</p>
<p>第一个参数：</p>
<blockquote>
<p>角度 或者 边角，由此指定渐变的方向。角度值单位为 <code>deg</code>，边角的可选值有：left , right , top , bottom , left top , left bottom , right top , right bottom 。边角值只是角度值的快捷值，角度值是以容器元素中心点为轴顺时针旋转形成，如果不给定此参数的话，默认的角度值为 <code>180deg</code> ，即 <code>to bottom</code>，渐变效果是从上到下的。</p>
</blockquote>
<p>第二个参数(必需)：</p>
<blockquote>
<p>起始点颜色值及其断点长度。断点长度值单位可以是 <code>px</code> 或 <code>百分比</code>。</p>
</blockquote>
<p>第三及其后的参数：</p>
<blockquote>
<p>中间点颜色值及其断点长度。即中间可以设置多个不同的颜色渐变。</p>
</blockquote>
<p>最后一个参数(必需)：</p>
<blockquote>
<p>结束点颜色值及其断点长度。</p>
</blockquote>
<p>**例： **</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>( <span class="number">180deg</span> , red <span class="number">50%</span> , blue , yellow );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g18a3jn2lij30e70awdfw.jpg" />














]]></content>
      <categories>
        <category>css相关</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>linear-gradient</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS radial-gradient() 函数</title>
    <url>/2019/04/02/css/css3-radial-gradient/</url>
    <content><![CDATA[<p>CSS radial-gradient() 函数创建一个 <code>&lt;image&gt;</code>，用来展示由 ** 原点（渐变中心）**  辐射开的颜色渐变。这个方法得到的是一个 CSS <code>&lt;gradient&gt;</code> 数据类型的对象。本篇文章记录其简单使用及案例。</p>
<span id="more"></span>

<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>首先献上 <strong>佐助万花筒写轮眼</strong> 效果案例。</p>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1o43b5zpaj30ej0ext9m.jpg" />

<p>以下是源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ordit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;maga1 mage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;maga2 mage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;maga3 mage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ordit</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="number">#525252</span>;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">position</span>:relative;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.mage</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">395px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">197.5px</span> <span class="number">75px</span> ellipse,transparent <span class="number">112px</span>,<span class="number">#E24545</span> <span class="number">190px</span>,<span class="number">#000</span> <span class="number">196px</span>,transparent <span class="number">197.5px</span>) ,</span><br><span class="line">              <span class="built_in">radial-gradient</span>(<span class="number">50px</span> circle,<span class="number">#525252</span> <span class="number">47px</span>,<span class="number">#000</span> <span class="number">49px</span>,transparent <span class="number">50px</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.maga1</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.maga2</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.maga3</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">135deg</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>由于 <code>radial-gradient()</code> 创建的是一个 <code>&lt;image&gt;</code> 类型，所以其只能作用于像 <code>background-image</code> 或 <code>border-image</code> 这样的定义图片的 css 规则上。</p>
<h2 id="径向渐变的形成"><a href="#径向渐变的形成" class="headerlink" title="径向渐变的形成"></a>径向渐变的形成</h2><p>径向渐变(Radial gradients) 由其 <code>中心点</code>、<code>边缘形状轮廓</code> 及 <code>位置</code>、<code>色值结束点（color stops）</code> 定义而成。  径向渐变的 <code>中心点</code> 至 <code>边缘形状</code> 以及其延伸的部分，由连续缩放的若干<code>同心轮廓</code> 组成，这个轮廓由设定的边缘形状决定。<code>色值结束点</code> 用于设定 <code>虚拟渐变射线（virtual gradient ray）</code> 的变化方式，由 <code>中心点</code> 水平变化至右侧（如下图）。<code>色值结束点</code> 由百分比设定时，则是相对于终点为 <code>渐变射线</code> 与边缘形状相交点的 <code>渐变半径</code>，<code>渐变半径</code> 的终点位置即为 100%。每个轮廓均为纯色，颜色由 <code>渐变射线</code> 上相应 <code>横切点</code> 所定义的颜色决定。边缘形状只能为圆形或者椭圆形。</p>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1o7zzsl7yj30dv06ojrq.jpg" />

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>radial-gradient()</code> 只存在两种渐变形状，正圆（circle）和椭圆（ellipse），大体的语法如下。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">radial-gradient( <span class="selector-attr">[ x [, y]</span> ] <span class="selector-attr">[ circle | ellipse ]</span> <span class="selector-attr">[ extent-keyword ]</span> at <span class="selector-attr">[ position ]</span> , <span class="selector-attr">[color-stop [, length | persentage]</span>]+ )</span><br></pre></td></tr></table></figure>


<h2 id="只设置起始颜色和结束颜色"><a href="#只设置起始颜色和结束颜色" class="headerlink" title="只设置起始颜色和结束颜色"></a>只设置起始颜色和结束颜色</h2><p>对于径向渐变，在不指定渐变类型以及起点位置的情况下，其渐变距离和位置是由容器的尺寸决定的。渐变的起点位置会在容器的正中间开始，渐变的类型则和容器的宽高比例相关。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(yellow,red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1o8r4thzvj30e707fdg0.jpg" />


<h2 id="circle关键字规定渐变形状为圆形"><a href="#circle关键字规定渐变形状为圆形" class="headerlink" title="circle关键字规定渐变形状为圆形"></a>circle关键字规定渐变形状为圆形</h2><p><code>circle</code> 关键字规定渐变的形状为圆形，设置了渐变形状后，其渐变距离为圆的最长对角线距离的一半，渐变结束线既不是按照宽度来的，也不是按照高度来的，是按照最远边角距离作为渐变结束线的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.b</span>&#123; </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle,yellow,red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1o8xtiu5cj30ed07hdfy.jpg" />


<h2 id="渐变的半径"><a href="#渐变的半径" class="headerlink" title="渐变的半径"></a>渐变的半径</h2><p>形状关键字前只写一个值表示圆形的半径，此时 <code>circle</code> 关键字可缺省。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.c</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">80px</span> circle,yellow,red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1o938yyldj30eb07ejrd.jpg" />


<h2 id="at关键字设置渐变起点"><a href="#at关键字设置渐变起点" class="headerlink" title="at关键字设置渐变起点"></a>at关键字设置渐变起点</h2><p><code>at</code> 后的第一个值表示：圆心（渐变起点）在容器中的横坐标，第二个值表示：圆心（渐变起点）在容器中的纵坐标 。</p>
<blockquote>
<p>注：坐标值可以是百分比值 或者 像素值。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.d</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(at <span class="number">50px</span> <span class="number">50px</span>,yellow,red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g1o98effsjj30ea07g74c.jpg" />

<p>通过 <code>at</code> 关键字，设置渐变的起始位置,去掉 <code>circle</code> 关键字，则渐变形状会与容器比例保持一致。这是会变成默认的椭圆。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.e</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(at <span class="number">50px</span> <span class="number">50px</span>,yellow,red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;e&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1o9ckojqbj30eb07et8u.jpg" />


<h2 id="设置渐变的结束位置"><a href="#设置渐变的结束位置" class="headerlink" title="设置渐变的结束位置"></a>设置渐变的结束位置</h2><p><code>radial-gradient</code> 径向渐变支持4个关键字可以指定渐变终止点位置，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">closest-side:    渐变中心距离容器最近的边作为终止位置。</span><br><span class="line">closest-corner:  渐变中心距离容器最近的角作为终止位置。</span><br><span class="line">farthest-side:   渐变中心距离容器最远的边作为终止位置。</span><br><span class="line">farthest-corner: 渐变中心距离容器最远的角作为终止位置(默认)。</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.f</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(closest-side at <span class="number">50px</span> <span class="number">50px</span>,yellow,red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;f&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g1o9h0jndij30ea07fdft.jpg" />


<h2 id="设置颜色断点的位置"><a href="#设置颜色断点的位置" class="headerlink" title="设置颜色断点的位置"></a>设置颜色断点的位置</h2><p>如果指定多个颜色，但未指定具体断点的位置，则这些颜色会均匀分配 <code>0%~100%</code> 的渐变区域。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.g</span>&#123; </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>( circle closest-side ,yellow,red <span class="number">33.33%</span>,orange <span class="number">66.666%</span>,white);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;g&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1o9k7w92zj30d507gjrd.jpg" />


<h2 id="ellipse关键字设置椭圆渐变"><a href="#ellipse关键字设置椭圆渐变" class="headerlink" title="ellipse关键字设置椭圆渐变"></a>ellipse关键字设置椭圆渐变</h2><p>椭圆渐变需要确定两个方向上的轴距离，第一个值表示横轴的半径值，第二个值表示纵轴的半径值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.h</span>&#123; </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">100px</span> <span class="number">50px</span> ellipse at <span class="number">100px</span> <span class="number">100px</span>,yellow,red <span class="number">33.33%</span>,orange <span class="number">66.666%</span>,skyblue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1o9mwaml5j30ea07eaa3.jpg" />


<h2 id="渐变的累加"><a href="#渐变的累加" class="headerlink" title="渐变的累加"></a>渐变的累加</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.j</span>&#123; </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="number">200px</span> <span class="number">100px</span> ellipse,transparent <span class="number">90px</span>,yellow <span class="number">91px</span>,red <span class="number">99px</span>,transparent <span class="number">100px</span>),</span><br><span class="line">              <span class="built_in">radial-gradient</span>(<span class="number">30px</span> circle, red, red <span class="number">29px</span>, transparent <span class="number">30px</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;j&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：当使用累加渐变背景的时候，需要给前一个渐变背景起始颜色设置为透明色<br>否则无法显示出后设置的渐变背景。</p>
</blockquote>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g1o9svndi0j308b048q2y.jpg" />


<h2 id="作用在border-image"><a href="#作用在border-image" class="headerlink" title="作用在border-image"></a>作用在border-image</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.i</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid;</span><br><span class="line">  <span class="comment">/* border-radius: 50%; */</span></span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-image</span>: <span class="built_in">radial-gradient</span>(circle, transparent <span class="number">50px</span>, yellow <span class="number">51px</span>, red) <span class="number">50</span> stretch;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*可惜border-image无法和border-radius同时生效*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;i&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可惜 <code>border-image</code> 无法和 <code>border-radius</code> 同时生效，否则，天然镂空的铜钱效果随即出现…</p>
</blockquote>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g1o9svzlxbj307h07j0sr.jpg" />]]></content>
      <categories>
        <category>css相关</category>
      </categories>
      <tags>
        <tag>radial-gradient</tag>
        <tag>径向渐变</tag>
        <tag>image type</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端rem布局</title>
    <url>/2017/07/06/css/css3-rem/</url>
    <content><![CDATA[<p><code>rem （root em）</code> 属于相对单位， 其不是像 <code>em</code> 单位那样是相对于当前元素的字体大小 <code>font-size</code> 计算得出的值，<code>rem</code> 始终相对于页面根元素，即 <code>html</code> 的 <code>font-size</code> 大小计算得出。</p>
<p>所以我们可以使用 <code>rem</code> 作为页面布局主单位，再利用 <code>媒体查询(@media screen)</code> 或 <code>javascript</code> 动态计算并设置在不同屏幕大小下根元素 <code>html</code> 的 <code>font-size</code> 属性值，使得页面元素可以响应式的显示合适的大小。</p>
<span id="more"></span>

<h1 id="动态设置-html-元素-font-size-的几种方式"><a href="#动态设置-html-元素-font-size-的几种方式" class="headerlink" title="动态设置 html 元素 font-size 的几种方式"></a>动态设置 <code>html</code> 元素 <code>font-size</code> 的几种方式</h1><h2 id="配置固定媒体查询法"><a href="#配置固定媒体查询法" class="headerlink" title="配置固定媒体查询法"></a>配置固定媒体查询法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/*font-size : 54px;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置媒体查询 E (来自苏宁手机端媒体查询数据)*/</span></span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>)&#123;</span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">21.33px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">360px</span>)&#123;</span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">375px</span>)&#123;  <span class="comment">/*UI设计图宽度为750px*/</span></span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">384px</span>)&#123;</span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">25.6px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">400px</span>)&#123;</span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">26.67px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>)&#123;</span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">27.6px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">424px</span>)&#123;</span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">28.27px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>)&#123;</span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">540px</span>)&#123;</span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置媒体查询 S */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="js动态计算"><a href="#js动态计算" class="headerlink" title="js动态计算"></a>js动态计算</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用js动态控制不同屏幕大小下html的font-size大小</span></span><br><span class="line"><span class="comment">//以 640px宽度的屏幕,此时html的font-size为54px 作为参考</span></span><br><span class="line"><span class="comment">//苏宁的媒体查询基准为：540px屏宽下html的font-size为36px</span></span><br><span class="line"><span class="comment">//设动态获得的屏幕宽度为w,w宽度下html的font-size为x</span></span><br><span class="line"><span class="comment">//则得出公式为：x = w * 54 / 640</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;html&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> w = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">offsetWidth</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> htmlFontSize = w * <span class="number">54</span> / <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line">  html.<span class="property">style</span>.<span class="property">fontSize</span> = htmlFontSize + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>( <span class="string">&quot;resize&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> w = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">offsetWidth</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> htmlFontSize = w * <span class="number">54</span> / <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( htmlFontSize &gt; <span class="number">54</span> )&#123;  <span class="comment">//控制根元素font-size值最大不超过54px</span></span><br><span class="line">      htmlFontSize = <span class="number">54</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  html.<span class="property">style</span>.<span class="property">fontSize</span> = htmlFontSize + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>


<h2 id="基于rem和vw的计算方式"><a href="#基于rem和vw的计算方式" class="headerlink" title="基于rem和vw的计算方式"></a>基于<code>rem</code>和<code>vw</code>的计算方式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">375px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="comment">/* iPhone6的375px尺寸作为16px基准，414px正好18px大小, 600 20px */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">2</span> * (<span class="number">100vw</span> - <span class="number">375px</span>) / <span class="number">39</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">16px</span> + <span class="number">2</span> * (<span class="number">100vw</span> - <span class="number">375px</span>) / <span class="number">39</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="comment">/* 414px-1000px每100像素宽字体增加1px(18px-22px) */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">112.5%</span> + <span class="number">4</span> * (<span class="number">100vw</span> - <span class="number">414px</span>) / <span class="number">586</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">18px</span> + <span class="number">4</span> * (<span class="number">100vw</span> - <span class="number">414px</span>) / <span class="number">586</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="comment">/* 600px-1000px每100像素宽字体增加1px(20px-24px) */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">125%</span> + <span class="number">4</span> * (<span class="number">100vw</span> - <span class="number">600px</span>) / <span class="number">400</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">20px</span> + <span class="number">4</span> * (<span class="number">100vw</span> - <span class="number">600px</span>) / <span class="number">400</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1000px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="comment">/* 1000px往后是每100像素0.5px增加 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">137.5%</span> + <span class="number">6</span> * (<span class="number">100vw</span> - <span class="number">1000px</span>) / <span class="number">1000</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">22px</span> + <span class="number">6</span> * (<span class="number">100vw</span> - <span class="number">1000px</span>) / <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><h2 id="配合-sass-在实际项目中使用"><a href="#配合-sass-在实际项目中使用" class="headerlink" title="配合 sass 在实际项目中使用"></a>配合 <code>sass</code> 在实际项目中使用</h2><p>通常我们想要使用 <code>rem</code> 布局，那么就需要解决 <code>px</code> 转 <code>rem</code> 的问题。以便在使用时，直观，易于理解。</p>
<p>借助 <code>sass</code> 中的 <code>@function</code> 将 <code>px</code> 转换成 <code>rem</code>：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">@function</span> px2rem(<span class="variable">$px</span>)&#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$px</span> / <span class="number">16px</span> * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码表示，在当前页面的 <code>html</code> 元素的 <code>font-size</code> 值为：<code>16px</code> 时，将 <code>$px</code> 转换为 <code>rem</code> 单位值。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">px2rem</span>(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码将被编译为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span> : <span class="number">12.5rem</span>;  <span class="comment">/* 200px / 16px = 12.5rem */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在实际项目开发时，我们可以将 此功能函数封装在一个单独的 <code>util.scss</code> 文件中 </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假定在页面 html 元素 font-size 为 16px 的屏幕宽 375px 下开发</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$base-root-font-size</span>: <span class="number">16px</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">@function</span> px2rem(<span class="variable">$px</span>)&#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$px</span> / <span class="variable">$base-root-font-size</span> * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将动态处理 <code>html</code> 元素的 <code>font-size</code> 的样式文件单独全局引入。</p>
<p>然后在你的 某个页面 的样式文件中引入你的功能函数。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;@/style/util.scss&#x27;</span></span><br><span class="line"></span><br><span class="line">// 开始你的表演 ...</span><br><span class="line"></span><br><span class="line">.foo &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">px2rem</span>(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就像上面代码那样，你只需要像之前你使用 <code>px</code> 进行布局一样简单，只不过是需要 加上 <code>px2rem()</code>。</p>
]]></content>
      <categories>
        <category>css相关</category>
      </categories>
      <tags>
        <tag>布局</tag>
        <tag>css</tag>
        <tag>rem</tag>
      </tags>
  </entry>
  <entry>
    <title>天然吸顶效果之sticky属性</title>
    <url>/2019/08/28/css/css3-sticky/</url>
    <content><![CDATA[<p>元素吸顶效果很常见，最常见的实现方式莫过于通过 js 实现，但现如今我们有了更简便，更直接的方式来实现某元素吸顶效果，那就是使用 css3 中的 <code>position: sticky</code> 来实现。</p>
<span id="more"></span>


<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g6fflfxlnag30cg0mctck.gif" width="300" height="500" />

<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p><strong>html结构</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> this is a div <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> this is a sticky h3 element <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  this is a p</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>css样式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">  <span class="comment">/* 核心代码 */</span></span><br><span class="line">  <span class="attribute">position</span>: -webkit-sticky;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上代码所示，仅仅需要将 <code>position</code> 的属性设置为 <code>sticky</code> 并且使 <code>top</code> 是有值的，那么天然的吸顶效果瞬间达成。</p>
<h1 id="sticky-说明"><a href="#sticky-说明" class="headerlink" title="sticky 说明"></a>sticky 说明</h1><p>经测试总结，<code>position: sticky</code> 规则有如下特性：</p>
<div class="note success"><ol>
<li>该规则属性，相当于 <code>position: relative</code> 和 <code>position: fixed</code> 的结合体。</li>
<li>必须明确设置（<code>top,right,bottom,left</code>）其中一个值，否则无粘滞效果。例：<code>top: 10px</code> 表示元素产生粘滞效果时，距离顶部的距离。</li>
<li>父元素不能设置 <code>overflow: hidden</code>，否则无粘滞效果。</li>
<li>父级元素也不能设置固定的 height 高度值，否则也没有粘滞效果。</li>
<li>同一个父容器中的 <code>sticky</code> 元素，如果定位值相等，则会重叠；如果属于不同父元素，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。</li>
</ol>
</div>

<blockquote>
<p>可能还会有其他意想不到的效果，后续发现后再补充说明。</p>
</blockquote>
]]></content>
      <categories>
        <category>css相关</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>sticky</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题集</title>
    <url>/2019/10/02/interview/index/</url>
    <content><![CDATA[<p>本文记录前端面试中的一些常见题型，如果有幸让你看到了这篇文章，欢迎探讨学习！</p>
<span id="more"></span>

<h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><h2 id="实现-call-函数"><a href="#实现-call-函数" class="headerlink" title="实现 call 函数"></a>实现 call 函数</h2><p><code>call</code> 函数的作用，可以改变调用者函数内部的 <code>this</code> 指向，立即执行，第二个参数为 <code>rest</code> 类型参数。如果没有指定第一个参数，则 <code>this</code> 指向 window。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">con</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取执行环境，如果传入的值为 非真值 则将 window 作为 上下文环境</span></span><br><span class="line">  <span class="keyword">let</span> context = con || <span class="variable language_">window</span>,</span><br><span class="line">    _fn = <span class="title class_">Symbol</span>(<span class="string">&quot;_fn&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 谁调 myCall 这里的 this 就指的是谁。将调用者挂载到当前指定的 上下文执行环境 上</span></span><br><span class="line">  context[_fn] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取出传入 myCall 中 除了第一个参数外的其他参数</span></span><br><span class="line">  <span class="keyword">let</span> arg = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = context[_fn](...arg);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行完后，删除 fn</span></span><br><span class="line">  <span class="keyword">delete</span> context[_fn];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回执行结果</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foo</span> + num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">myCall</span>(obj, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">call</span>(obj, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>我们在使用 <code>_fn</code> 作为临时属性时，使用的是 <code>Symbol</code> 类型，这是为了避免与上下文环境中的其他属性重复而发生冲突。</p>
</div>

<h2 id="实现-apply-函数"><a href="#实现-apply-函数" class="headerlink" title="实现 apply 函数"></a>实现 apply 函数</h2><p><code>apply</code> 函数的作用，可以改变调用者函数内部的 <code>this</code> 指向，立即执行，第二个参数为数组类型。如果没有指定第一个参数，则 <code>this</code> 指向 window。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">con, arr = []</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> context = con || <span class="variable language_">window</span>,</span><br><span class="line">    _fn = <span class="title class_">Symbol</span>(<span class="string">&quot;_fn&quot;</span>);</span><br><span class="line"></span><br><span class="line">  context[_fn] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = context[_fn](...arr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context[_fn];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foo</span> + num1 + num2 + num3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">myApply</span>(obj, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">apply</span>(obj, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="实现-bind-函数"><a href="#实现-bind-函数" class="headerlink" title="实现 bind 函数"></a>实现 bind 函数</h2><p><code>bind</code> 函数的作用，返回新的函数，该函数内的 <code>this</code> 指向 <code>bind</code> 函数的第一个参数对象，第二个参数为传入新函数内的 rest 参数。如果没有指定第一个参数，则 <code>this</code> 指向 window。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">con</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = con || <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 因为返回了一个函数，我们可以 new Fn()，所以需要判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Fn</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">_this</span>(...args, ...<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _this.<span class="title function_">apply</span>(context, [...args, ...<span class="variable language_">arguments</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foo</span> + num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是累计的，多出的参数不会被使用</span></span><br><span class="line"><span class="keyword">var</span> fn1 = a.<span class="title function_">bind</span>(obj, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">fn1</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn2 = a.<span class="title function_">myBind</span>(obj, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h2 id="对多维数组进行降维（扁平化）"><a href="#对多维数组进行降维（扁平化）" class="headerlink" title="对多维数组进行降维（扁平化）"></a>对多维数组进行降维（扁平化）</h2><p>实现的效果类似这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, [<span class="number">2</span>]], [<span class="number">3</span>], [<span class="number">4</span>]];</span><br></pre></td></tr></table></figure>

<p>扁平化后，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flatArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure>

<p><strong>方式 1：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">4</span>, [<span class="number">5</span>]]], <span class="number">3</span>].<span class="title function_">flat</span>(<span class="title class_">Infinity</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方式1&quot;</span>, arr1);</span><br></pre></td></tr></table></figure>

<p><strong>方式 2：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">flattenDeep</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)</span><br><span class="line">    ? arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> [...a, ...<span class="title function_">flattenDeep</span>(b)], [])</span><br><span class="line">    : [arr];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title function_">flattenDeep</span>([<span class="number">1</span>, [[<span class="number">2</span>], [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方式2&quot;</span>, arr2);</span><br></pre></td></tr></table></figure>

<p><strong>方式 3：</strong></p>
<p>使用 <code>generater</code> 函数 和 <code>for ...of</code> 循环 或 使用 扩展运算符 <code>...</code> 也行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">iterArr</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* <span class="title function_">iterArr</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = [],</span><br><span class="line">  arr3 = [<span class="number">1</span>, [[<span class="number">2</span>], [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">iterArr</span>(arr3)) &#123;</span><br><span class="line">  newArr.<span class="title function_">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方式3&quot;</span>, newArr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方式3(扩展运算符)&quot;</span>, [...<span class="title function_">iterArr</span>(arr3)]);</span><br></pre></td></tr></table></figure>

<h2 id="实现支持注册、分发和解绑的事件类"><a href="#实现支持注册、分发和解绑的事件类" class="headerlink" title="实现支持注册、分发和解绑的事件类"></a>实现支持注册、分发和解绑的事件类</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组置空的方法：</span></span><br><span class="line"><span class="comment">// arr = []; arr.length = 0; arr.splice(0, arr.length)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_cache</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册事件：如果不存在此种type，创建相关数组</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">type, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_cache</span>[type] = <span class="variable language_">this</span>.<span class="property">_cache</span>[type] || [];</span><br><span class="line">    <span class="keyword">let</span> fns = <span class="variable language_">this</span>.<span class="property">_cache</span>[type];</span><br><span class="line">    <span class="keyword">if</span> (fns.<span class="title function_">indexOf</span>(callback) === -<span class="number">1</span>) &#123;</span><br><span class="line">      fns.<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发事件：对于一个type中的所有事件函数，均进行触发</span></span><br><span class="line">  <span class="title function_">trigger</span>(<span class="params">type, ...data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fns = <span class="variable language_">this</span>.<span class="property">_cache</span>[type];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(fns)) &#123;</span><br><span class="line">      fns.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fn</span>(...data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除事件：删除事件类型对应的array</span></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">type, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fns = <span class="variable language_">this</span>.<span class="property">_cache</span>[type];</span><br><span class="line">    <span class="comment">// 检查是否存在type的事件绑定</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(fns)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">        <span class="comment">// 卸载指定的回调函数</span></span><br><span class="line">        <span class="keyword">let</span> index = fns.<span class="title function_">indexOf</span>(callback);</span><br><span class="line">        <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">          fns.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 全部清空</span></span><br><span class="line">        fns = [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是测试函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> <span class="title class_">Event</span>();</span><br><span class="line">event</span><br><span class="line">  .<span class="title function_">on</span>(<span class="string">&quot;test&quot;</span>, <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">trigger</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="实现斐波那契数列"><a href="#实现斐波那契数列" class="headerlink" title="实现斐波那契数列"></a>实现斐波那契数列</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fib</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 两个变量，第 3 个值为 prev + curr ...</span></span><br><span class="line">  <span class="keyword">let</span> [prev, curr] = [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">yield</span> curr;</span><br><span class="line">    [prev, curr] = [curr, prev + curr];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">fib</span>()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (v &gt; <span class="number">55</span>) <span class="keyword">break</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用 <code>Generater</code> 函数 和 <code>for ...of</code> 循环可以很巧妙的实现，注意，<code>generator</code> 函数在被执行后，里面的代码并不会立即执行，需要依靠遍历器驱动 <code>yield</code> 执行。</p>
<p>所以，<code>for(;;)&#123;&#125;</code> 并不会有什么性能问题。</p>
<h2 id="实现防抖和节流函数"><a href="#实现防抖和节流函数" class="headerlink" title="实现防抖和节流函数"></a>实现防抖和节流函数</h2><ol>
<li>防抖</li>
</ol>
<p>功能：触发高频事件后 interval 毫秒内函数只会执行一次，如果 interval 毫秒 内高频事件再次被触发，则重新计算时间。</p>
<p>会清除定时器，对于高频率触发的动作，会限制其频率降低。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, interval = <span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 每次执行该函数时，就清除已注册的定时器程序</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="comment">// 生成新的定时器程序，如果用户没有在指定延时时间内再次出发该函数，则该函数会被执行</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;, interval);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>节流</li>
</ol>
<p>功能：高频事件触发，但在 interval 毫秒内只会执行一次，所以节流会稀释函数的执行频率。</p>
<p>不会清除定时器，对于高频率触发的动作，会减少其触发次数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, interval = <span class="number">1000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) <span class="keyword">return</span>;</span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, interval);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现对字符串进行金额格式化的功能函数"><a href="#实现对字符串进行金额格式化的功能函数" class="headerlink" title="实现对字符串进行金额格式化的功能函数"></a>实现对字符串进行金额格式化的功能函数</h2><p>显示类似如下的字符串格式转换功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">52545455454</span>;</span><br><span class="line">num.<span class="title function_">toLocaleString</span>(); <span class="comment">// 52,545,455,454</span></span><br></pre></td></tr></table></figure>

<p>实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toPriceRight</span>(<span class="params">str, gap, type</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">String</span>(str)</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">init, v, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (i % gap == gap - <span class="number">1</span>) &#123;</span><br><span class="line">        init += type + v;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        init += v;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> init;</span><br><span class="line">    &#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toPriceRight</span>(<span class="string">&quot;52545455454&quot;</span>, <span class="number">3</span>, <span class="string">&quot;,&quot;</span>)); <span class="comment">// 52,545,455,454</span></span><br></pre></td></tr></table></figure>

<h2 id="对指定数组生成树形结构数据"><a href="#对指定数组生成树形结构数据" class="headerlink" title="对指定数组生成树形结构数据"></a>对指定数组生成树形结构数据</h2><p>题目：对于如下数据，<code>pid</code> 表示 父节点的值，如果没有 <code>pid</code> 则表示该对象对象为根节点，请将其格式化为树形数据结构，要求可以达到无限深度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> origin = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">111</span>, <span class="attr">pid</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">112</span>, <span class="attr">pid</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">21</span>, <span class="attr">pid</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">31</span>, <span class="attr">pid</span>: <span class="number">3</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tree</span>(<span class="params">arr, ori</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> === <span class="number">0</span>) arr = ori.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> !(<span class="string">&quot;pid&quot;</span> <span class="keyword">in</span> v));</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> childs = ori.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">pid</span> === v.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (childs.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      v.<span class="property">children</span> = <span class="title function_">tree</span>(childs, ori);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">tree</span>([], origin));</span><br></pre></td></tr></table></figure>

<h2 id="实现倒计时功能"><a href="#实现倒计时功能" class="headerlink" title="实现倒计时功能"></a>实现倒计时功能</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> endtime = +<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2019/12/15 0:0:0&quot;</span>); <span class="comment">//定义结束时间日期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">daojishi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> nowtime = +<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="comment">//获取当前的时间日期</span></span><br><span class="line">    leftime = (endtime - nowtime) / <span class="number">1000</span>, <span class="comment">//获取剩余的秒数</span></span><br><span class="line">    d = <span class="built_in">parseInt</span>(leftime / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>), <span class="comment">//获取剩余天数</span></span><br><span class="line">    h = <span class="built_in">parseInt</span>((leftime / <span class="number">60</span> / <span class="number">60</span>) % <span class="number">60</span>), <span class="comment">//获取剩余小时数</span></span><br><span class="line">    m = <span class="built_in">parseInt</span>((leftime / <span class="number">60</span>) % <span class="number">60</span>), <span class="comment">//获取剩余分钟数</span></span><br><span class="line">    s = <span class="built_in">parseInt</span>(leftime % <span class="number">60</span>); <span class="comment">//获取剩余秒数</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`距离结束还有：<span class="subst">$&#123;d&#125;</span> 天 <span class="subst">$&#123;h&#125;</span> 小时 <span class="subst">$&#123;m&#125;</span> 分钟 <span class="subst">$&#123;s&#125;</span>秒`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nowtime &lt;= endtime) <span class="built_in">setTimeout</span>(daojishi, <span class="number">1000</span>); <span class="comment">//递归循环刷新时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">daojishi</span>();</span><br></pre></td></tr></table></figure>

<h2 id="给定一个数组，对里面所有的奇数求和"><a href="#给定一个数组，对里面所有的奇数求和" class="headerlink" title="给定一个数组，对里面所有的奇数求和"></a>给定一个数组，对里面所有的奇数求和</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="number">6</span>, <span class="number">4</span>, -<span class="number">99</span>, -<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">init, v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (v % <span class="number">2</span> !== <span class="number">0</span>) init += <span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(v);</span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// -196</span></span><br></pre></td></tr></table></figure>

<h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><p>题目：完成 bindLeft 实现函数参数的部分绑定功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindLeft</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 完成这里的代码</span></span><br><span class="line">  <span class="comment">// 绑定参数个数以传进来的为准</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span> = (<span class="params">a, b, c, d</span>) =&gt; a - b * c + d;</span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="title function_">bindLeft</span>(fn1, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 绑定参数 a = 1, b = 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn2</span>(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 1 - 2 * 3 + 4 输出 -1</span></span><br></pre></td></tr></table></figure>

<p>实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span> = (<span class="params">a, b, c, d</span>) =&gt; a - b * c + d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindLeft</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [...args, ...<span class="variable language_">arguments</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="title function_">bindLeft</span>(fn1, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn2</span>(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> - <span class="number">2</span> * <span class="number">3</span> + <span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<h2 id="使用冒泡排序对数组中所有正整数排序（非正整数位置保持不变）"><a href="#使用冒泡排序对数组中所有正整数排序（非正整数位置保持不变）" class="headerlink" title="使用冒泡排序对数组中所有正整数排序（非正整数位置保持不变）"></a>使用冒泡排序对数组中所有正整数排序（非正整数位置保持不变）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>, -<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, -<span class="number">4</span>, -<span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> ori = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">init, v, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      init.<span class="title function_">push</span>(&#123; <span class="attr">value</span>: v, <span class="attr">index</span>: i &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> init;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">v</span> =&gt;</span> v &gt;= <span class="number">0</span>),</span><br><span class="line">    right = arr.<span class="title function_">slice</span>(index);</span><br><span class="line"></span><br><span class="line">  ori.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    right.<span class="title function_">splice</span>(v.<span class="property">index</span>, <span class="number">0</span>, v.<span class="property">value</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(arr)); <span class="comment">// [5, -1, 6, 8, -4, -7, 9, 11]</span></span><br></pre></td></tr></table></figure>

<h2 id="已知一个对象-obj-，在不知道第一个属性键名的情况下，如何获取第一个属性的值"><a href="#已知一个对象-obj-，在不知道第一个属性键名的情况下，如何获取第一个属性的值" class="headerlink" title="已知一个对象 obj ，在不知道第一个属性键名的情况下，如何获取第一个属性的值"></a>已知一个对象 obj ，在不知道第一个属性键名的情况下，如何获取第一个属性的值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj)[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="将数组去除重复项并按降序排列"><a href="#将数组去除重复项并按降序排列" class="headerlink" title="将数组去除重复项并按降序排列"></a>将数组去除重复项并按降序排列</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = arr</span><br><span class="line">  .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)</span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="function">(<span class="params">init, v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (init.<span class="property">length</span> === <span class="number">0</span> || init[init.<span class="property">length</span> - <span class="number">1</span>] !== v) &#123;</span><br><span class="line">      init.<span class="title function_">push</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> init;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// [8, 5, 2, 1, 0]</span></span><br></pre></td></tr></table></figure>

<h1 id="看题作答"><a href="#看题作答" class="headerlink" title="看题作答"></a>看题作答</h1><ol>
<li>请写出下面程序的打印结果</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>对于以上这类型的题，看到 <code>Promsie</code> 和 <code>setTimeout</code> 这样的字眼，就知道肯定考察的是与 js 的运行机制 <code>事件循环</code> 相关的。</p>
<p>ok，我们捋一下上面代码的执行过程：</p>
<p>首先，<code>new Promise()</code> 构造函数被执行，<code>console.log(&#39;a&#39;)</code> 被率先执行。打印出 <code>a</code>。</p>
<p>然后，遇到 <code>setTimeout()</code> 函数，其被执行后，回调函数被推入 <code>宏任务</code> 队列中，等待下一轮事件循环时执行。</p>
<p>紧接着，<code>p.then()</code> 被执行，其中的回调函数被推入 <code>微任务</code> 队列中，等到这一轮事件循环的执行栈为空时，再清空 <code>微任务</code> 队列。</p>
<p>接下来，同步代码 <code>console.log(&#39;b&#39;)</code> 被执行。打印出 <code>b</code></p>
<p>此时，执行栈空，清空 <code>微任务</code> 队列，<code>console.log(&#39;c&#39;)</code> 被压入执行栈中执行。打印出 <code>c</code>。</p>
<p>最后，开始第二轮事件循环，<code>console.log(&#39;d&#39;)</code> 出队，压入执行栈中执行，打印出 <code>d</code>。程序结束。</p>
<p>所以最终的打印结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a b c d</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>请写出下面程序的打印结果</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">o.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">o.<span class="property">m</span> = test;</span><br><span class="line"></span><br><span class="line">o.<span class="property">m</span>.<span class="title function_">apply</span>(); <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p>ok！定眼一看，这是一道有关 <code>this</code> 问题的题目。所以，你的脑中应该迅速回忆起 <code>this</code> 相关的知识点。</p>
<p>该题涉及到 <code>3</code> 种 <code>this</code> 指向情况：</p>
<ul>
<li><p>普通函数中的 <code>this</code></p>
</li>
<li><p>对象方法中的 <code>this</code></p>
</li>
<li><p>被 <code>apply</code> 改变过的 <code>this</code></p>
</li>
</ul>
<p>首先，代码中，在全局定义了 3 个变量：变量<code>x</code> 、<code>test</code>函数、对象<code>o</code>。</p>
<p>第一条执行语句，使用 <code>apply</code> 的方式调用了 <code>o.m()</code> 方法。这里只要使用了 <code>apply</code> 函数，没有指定 <code>thisArg</code> 的话，那么 <code>o.m()</code> 方法中的 <code>this</code> 就指向 <code>window</code>。所以打印出 0</p>
<p>第二条执行语句，<code>test()</code> 被直接调用，其中的 <code>this</code> 指向全局 <code>window</code>，打印出 0。</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>node</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>glob文件匹配规则</title>
    <url>/2020/03/12/manual/glob-syntax-rules/</url>
    <content><![CDATA[<p><strong>glob</strong> 是由普通字符和 <code>/</code> 或 <code>通配符</code> 组成的字符串，用于 <strong>匹配文件路径</strong>。可以利用一个或多个 <strong>glob</strong> 在文件系统中定位文件。</p>
<p>它本身属于一种标准，并且各类语言都有其完整实现。本文将基于 <a class="fc-danger" href="https://github.com/isaacs/node-glob"> node-glob </a> 进行语法讲解。</p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件匹配对于操作文件系统是很有必要的，他能帮助你方便，快捷的匹配到要找的目标文件，这对构建工具尤其有用，比如 <code>gulp</code> 、<code>webpack</code> 等，它可以根据你书写的规则高效匹配文件资源，提升构建速度。</p>
<p>下面将介绍 <code>glob</code> 的匹配语法。</p>
<h1 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h1><p>字符串片段（segment）是指两个分隔符之间的所有字符组成的字符串。在 <strong>glob</strong> 中，分隔符永远是 <code>/</code> 字符。不区分操作系统，即便是在采用 <code>\\</code> 作为分隔符的 <strong>Windows</strong> 操作系统中。</p>
<p>下面表示匹配 <code>src</code> 下的 <code>a.js</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;src/a.js&#x27;</span></span><br></pre></td></tr></table></figure>

<div class="note warning"><p>注意：<br>在 <strong>glob</strong> 中，<code>\\</code> 字符被保留作为转义符使用。</p>
</div>

<p>如下， <code>*</code> 被转义了，因此，<code>*</code> 将被作为一个普通字符使用，而不再是 <strong>通配符</strong> 了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;glob_with_uncommon_\\*_character.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>所以，以上规则表示，匹配当前目录下的 <code>glob_with_uncommon_*_character.js</code> 文件。</p>
<h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><p>特殊字符用来限制文件的匹配规则，你也可以称之为 <strong>通配符</strong>。</p>
<h2 id="一个星号"><a href="#一个星号" class="headerlink" title="*(一个星号)"></a><code>*</code>(一个星号)</h2><p>在一个字符串片段中匹配任意数量的字符，包括零个匹配。对于匹配单级目录下的文件很有用。</p>
<p>下面这个 <strong>glob</strong> 能够匹配类似 <code>index.js</code> 的文件，但是不能匹配类似 <code>scripts/index.js</code> 或 <code>scripts/nested/index.js</code> 的文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;*.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="两个星号"><a href="#两个星号" class="headerlink" title="**(两个星号)"></a><code>**</code>(两个星号)</h2><p>在多个字符串片段中匹配任意数量的字符，包括零个匹配。 对于匹配嵌套目录下的文件很有用。请确保适当地限制带有两个星号的 <strong>glob</strong> 的使用，以避免匹配大量不必要的目录。</p>
<p>下面这个 <strong>glob</strong> 被适当地限制在 <code>scripts/</code> 目录下。它将匹配类似 <code>scripts/index.js、scripts/nested/index.js</code> 和 <code>scripts/nested/twice/index.js</code> 的文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;scripts/**/*.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，如果没有 <code>scripts/</code> 这个前缀做限制，<code>node_modules</code> 目录下的所有目录或其他目录也都将被匹配。</p>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="? 通配符"></a><code>?</code> 通配符</h2><p><code>?</code> 表示匹配 <code>1</code> 个字符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;abc?.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上表示匹配，类似 <code>abc0.js</code> 或 <code>abc1.js</code> 这样的文件。<code>?</code> 占据的位置可以是任何字符，但是你得存在。</p>
<h2 id="pattern-pattern-pattern"><a href="#pattern-pattern-pattern" class="headerlink" title="?(pattern|pattern|pattern)"></a><code>?(pattern|pattern|pattern)</code></h2><p>匹配满足 0 个 条件 或 1 个条件的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test/dir/?(ab)c.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上表示匹配，<code>test/dir</code> 文件夹下的 <code>abc.js</code> 或 <code>c.js</code> 文件。</p>
<h2 id="pattern-pattern-pattern-1"><a href="#pattern-pattern-pattern-1" class="headerlink" title="!(pattern|pattern|pattern)"></a><code>!(pattern|pattern|pattern)</code></h2><p>匹配不满足提供的条件的文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test/dir/!(a|c)b.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上会匹配在 <code>test/dir</code> 文件夹下，非 <code>a</code> 、<code>c</code> 开头的，以 <code>b</code> 结尾的文件。</p>
<h2 id="pattern-pattern-pattern-2"><a href="#pattern-pattern-pattern-2" class="headerlink" title="+(pattern|pattern|pattern)"></a><code>+(pattern|pattern|pattern)</code></h2><p>匹配满足 1 个及以上条件的文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test/dir/+(ab)c.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上模式会匹配到 <code>test/dir</code> 文件夹下的 <code>ababc.js</code> 或 <code>abc.js</code> 这样的文件。</p>
<h2 id="pattern-pattern-pattern-3"><a href="#pattern-pattern-pattern-3" class="headerlink" title="*(pattern|pattern|pattern)"></a><code>*(pattern|pattern|pattern)</code></h2><p>匹配满足 0 个及以上条件的文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test/dir/*(a|b)b.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上模式会匹配到 <code>test/dir</code> 文件夹下的 <code>b.js</code> 、<code>ab.js</code> 或 <code>bb.js</code> 文件。</p>
<h2 id="pattern-pat-pat-erN"><a href="#pattern-pat-pat-erN" class="headerlink" title="@(pattern|pat*|pat?erN)"></a><code>@(pattern|pat*|pat?erN)</code></h2><p>精确匹配提供条件之一的文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test/dir/@(a|c)b.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上表示精确匹配 <code>test/dir</code> 文件夹下的 <code>ab.js</code> 或 <code>cb.js</code> 文件。</p>
<h2 id="字符范围匹配"><a href="#字符范围匹配" class="headerlink" title="字符范围匹配"></a>字符范围匹配</h2><p>这个匹配规则类似于 <code>RegExp</code> 对象中的 <code>[...]</code>。可以用于表示一个字符的范围。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test/dir/[a-z].js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上表示匹配 <code>test/dir</code> 文件夹下像 <code>a.js</code> 、<code>b.js</code> 等等这样的文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test/dir/[0-9].js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上表示匹配 <code>test/dir</code> 文件夹下像 <code>0.js</code> 、<code>1.js</code> 等等这样的文件。</p>
<p>你还可以像 <code>RegExp</code> 对象那样，使用 <code>^</code> 或 <code>!</code> 进行取反操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test/dir/[^0-9].js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;test/dir/[!0-9].js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这样对匹配 <code>test/dir</code> 文件夹下，以非单个数字命名的文件。例如 <code>1.js</code>，就不会被匹配到。</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h2><p>在 <strong>gulp</strong> 中，其将 <strong>glob</strong> 进行了扩展，可以将多个 <strong>glob</strong> 进行组合，<strong>glob</strong> 匹配时按照每个 <strong>glob</strong> 在数组中的位置依次进行匹配操作。</p>
<p>下面是 <code>gulp</code> 中的一个取反匹配操作：</p>
<p>第一个 <strong>glob</strong> 匹配到一组匹配项，然后后面的取反 <strong>glob</strong> 删除这些匹配项中的一部分。</p>
<p><strong>glob</strong> 数组中的取反 <strong>（negative）glob</strong> 必须跟在一个非取反 <strong>（non-negative）glob</strong> 后面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;script/**/*.js&#x27;</span>, <span class="string">&#x27;!scripts/vendor/&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>如果任何取反 <strong>（non-negative）glob</strong> 跟随着一个非取反 <strong>（negative）glob</strong>，任何匹配项都不会被删除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;script/**/*.js&#x27;</span>, <span class="string">&#x27;!scripts/vendor/&#x27;</span>, <span class="string">&#x27;scripts/vendor/react.js&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>如上规则，由于第三个 <strong>glob</strong> 的原因，第二个 <strong>glob</strong> 配置并不会生效，所以该条规则会递归返回 <code>script</code> 文件夹下的所有 <code>.js</code> 文件。</p>
<p>取反 <strong>（negative） glob</strong> 可以作为对带有两个星号的 <strong>glob</strong> 的限制手段。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;**/*.js&#x27;</span>, <span class="string">&#x27;!node_modules/&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，如果取反 <strong>（negative）glob</strong> 是 <code>!node_modules/**/*.js</code>，那么各匹配项都必须与取反 <strong>glob</strong> 进行比较，这将导致执行速度极慢。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://github.com/isaacs/node-glob#glob-primer" class="fc-danger"> node-glob </a></li>
</ul>
]]></content>
      <categories>
        <category>manual</category>
      </categories>
      <tags>
        <tag>glob</tag>
        <tag>node-glob</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法说明</title>
    <url>/2017/06/06/markdown/markdown/</url>
    <content><![CDATA[<p>介绍 <code>markdown</code> 基本语法，方便日后查看。</p>
<span id="more"></span>

<h1 id="markdown编辑器"><a href="#markdown编辑器" class="headerlink" title="markdown编辑器"></a>markdown编辑器</h1><ul>
<li><a href="https://www.typora.io">Typora</a></li>
<li><a href="http://25.io/mou/">Mou</a></li>
<li><a href="https://macdown.uranusjr.com">MacDown</a></li>
</ul>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>标题使用 <code>#</code> 号开头来表示 <code>h1</code> - <code>h6</code> 。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>



<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用 <code>+</code> 或 <code>-</code> 开头的方式来定义无需列表。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span> 无序列表1</span><br><span class="line"><span class="bullet">-</span> 无序列表2</span><br></pre></td></tr></table></figure>

<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用 <code>1.</code> 开头的方式来定义有序列表。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表1</span><br><span class="line"><span class="bullet">2.</span> 有序列表2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p>使用 <code>** **</code> 双星号包裹文字的方式来加粗文字。或者使用 <code>__ __</code> 来加粗文字。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**加粗字体**</span></span><br><span class="line"><span class="strong">__加粗文字__</span></span><br></pre></td></tr></table></figure>

<h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>使用<code>* *</code> 单星号包裹文字的方式来倾斜文字。你也可以使用 <code>_ _</code> 下划线的方式包裹文字倾斜字体。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体字*</span></span><br><span class="line"><span class="emphasis">_斜体字_</span></span><br></pre></td></tr></table></figure>

<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>使用 <code>~~ ~~</code> 来给文字添加删除中线。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~被删除的文字~~</span><br></pre></td></tr></table></figure>

<h1 id="高亮代码块"><a href="#高亮代码块" class="headerlink" title="高亮代码块"></a>高亮代码块</h1><p>使用 <strong>2个反引号</strong> 高亮行内代码，使用 <strong>3个或3个以上的反引号</strong> 来包裹代码块，表示代码块时在 <strong>反引号</strong> 后可以指定代码块的语言类型。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">​<span class="code">``` javascript</span></span><br><span class="line"><span class="code">  function hello ()&#123;</span></span><br><span class="line"><span class="code">    console.log(&#x27;hello markdown!&#x27;)</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure>

<p>有的时候，你可能会需要使用 <strong>代码块</strong> 语法去包裹展示另一语言，那么在转义的时候，会出现错误样式，例如下方的输入：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">``` md</span></span><br><span class="line"><span class="code">​``` </span>javascript</span><br><span class="line">  function hello ()&#123;</span><br><span class="line"><span class="code">    console.log(&#x27;hello markdown!&#x27;)</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>那么，你可以采用递增式的反引号包裹的方式：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">```` md</span></span><br><span class="line"><span class="code">​``` javascript</span></span><br><span class="line"><span class="code">  function hello ()&#123;</span></span><br><span class="line"><span class="code">    console.log(&#x27;hello markdown!&#x27;)</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"><span class="code">````</span></span><br></pre></td></tr></table></figure>

<p>这样，代码块的样式就会正常渲染。</p>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>使用 <code>*****</code> 、<code>-----</code> 、<code>_____</code> 或 <code>+++++</code> 来添加分割线，每个符号保持 5 个以上即可。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"><span class="strong">****</span>*</span></span><br><span class="line"><span class="section">-----</span></span><br><span class="line"><span class="strong">____</span>_</span><br><span class="line">+++++</span><br></pre></td></tr></table></figure>


<h1 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h1><p>使用 <code>&gt;</code> 开头的方式可以添加区块引用的效果，并且可嵌套使用。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 这段文字会在一个区块内显示</span></span><br><span class="line">&gt;&gt; 还可以嵌套</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>表格的实现语法同样简单，如下：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">| 表头1 | 表头2 | 表头3 |</span><br><span class="line">| :--- | :---:| ---: |</span><br><span class="line">| 文字左对齐 | 文字居中 | 文字右对齐 |</span><br><span class="line">| 第二行文字 | 第二行文字 | 第二行文字 |</span><br></pre></td></tr></table></figure>

<p>我如何控制单元格的宽度？</p>
<p>可以利用在 HTML 标签中包裹文本的方式，例如：</p>
<p>输入：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">| 表头1 | 表头2 | 表头3 |</span><br><span class="line">| :--- | :---:| ---: |</span><br><span class="line">| <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 120px;&quot;</span>&gt;</span></span>文字左对齐<span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> | 文字居中 | 文字右对齐 |</span><br><span class="line">| 第二行文字 | 第二行文字 | 第二行文字 |</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<table>
<thead>
<tr>
<th align="left">表头1</th>
<th align="center">表头2</th>
<th align="right">表头3</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><div style="width: 120px;">文字左对齐</div></td>
<td align="center">文字居中</td>
<td align="right">文字右对齐</td>
</tr>
<tr>
<td align="left">第二行文字</td>
<td align="center">第二行文字</td>
<td align="right">第二行文字</td>
</tr>
</tbody></table>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p>使用 <code>![]&#123;&#125;</code> 的方式来插入图片。<code>[title]</code> 中可以书写图片的标题，<code>&#123;&#125;</code> 中为图片地址，可以是本地地址，也可以是远程地址。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![图片]&#123;./imgs/1.jpg&#125;</span><br></pre></td></tr></table></figure>

<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>使用 <code>[]&#123;&#125;</code> 的方式使用超链接，<code>[title]</code> 中添加标题，<code>&#123;&#125;</code> 中为链接地址。你也可以使用 <code>html</code> 中的 <code>&lt;a&gt;</code> 标签来使用超链接。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[百度]&#123;http://www.baidu.com&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span>百度<span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p>将流程图代码包裹在 3个反斜杠 + <code>flow</code> 和 另一个 3反斜杠 之间即可。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">​<span class="code">``` flow</span></span><br><span class="line"><span class="code">  st=&gt;start: 开始</span></span><br><span class="line"><span class="code">  io1=&gt;inputoutput: 输入用户名密码</span></span><br><span class="line"><span class="code">  cond1=&gt;condition: 确定要修改密码吗?</span></span><br><span class="line"><span class="code">  op=&gt;operation: 修改用户密码</span></span><br><span class="line"><span class="code">  e=&gt;end: 结束</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">  st-&gt;io1-&gt;cond1</span></span><br><span class="line"><span class="code">  cond1(no)-&gt;io1</span></span><br><span class="line"><span class="code">  cond1(yes)-&gt;op-&gt;e</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"><span class="code">````</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">流程图代码分两块，上面一块是创建你的流程（创建元素），然后隔一行，创建流程的走向(连接元素)。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">创建流程（元素）：tag=&gt;type: content:&gt;url</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- tag 是流程图中的标签，在第二段连接元素时会用到。名称可以任意，一般为流程的英文缩写和数字的组合。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- type 用来确定标签的类型，=&gt;后面表示类型。由于标签的名称可以任意指定，所以要依赖type来确定标签的类型</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- 标签有6种类型：`start` `end` `operation` `subroutine` `condition` `inputoutput`</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- content 是流程图文本框中的描述内容，: 后面表示内容，中英文均可。特别注意，冒号与文本之间一定要有个空格</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- url是一个连接，与框框中的文本相绑定，:&gt;后面就是对应的 url 链接，点击文本时可以通过链接跳转到 url 指定页面</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">  ​</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">指向流程(连接元素)：标识（类别）-&gt;下一个标识</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- 使用 -&gt; 来连接两个元素</span></span><br><span class="line"><span class="code">- 对于`condition`类型，有`yes`和`no`两个分支，如示例中的`cond(yes)`和`cond(no)`</span></span><br><span class="line"><span class="code">- 每个元素可以制定分支走向，默认向下，也可以用`right`指向右边，如示例中`cond2(yes,right)`。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">``` flow</span></span><br><span class="line"><span class="code">st=&gt;start: 开始</span></span><br><span class="line"><span class="code">io1=&gt;inputoutput: 输入用户名密码</span></span><br><span class="line"><span class="code">cond1=&gt;condition: 确定要修改密码吗?</span></span><br><span class="line"><span class="code">op=&gt;operation: 修改用户密码</span></span><br><span class="line"><span class="code">e=&gt;end: 结束</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">st-&gt;io1-&gt;cond1</span></span><br><span class="line"><span class="code">cond1(no)-&gt;io1</span></span><br><span class="line"><span class="code">cond1(yes)-&gt;op-&gt;e</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<h1 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h1><p>使用双冒号 <code>: :</code> 中间加入表情名的方式来插入表情图标Emoji。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">:emojiName:</span><br></pre></td></tr></table></figure>

<p><strong>例：</strong></p>
<p><code>:smile:</code> :smile:</p>
<h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><table>
<thead>
<tr>
<th>图标</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>:smile:</td>
<td><code>:smile:</code></td>
</tr>
<tr>
<td>:cry:</td>
<td><code>:cry:</code></td>
</tr>
<tr>
<td>:kissing:</td>
<td><code>:kissing:</code></td>
</tr>
<tr>
<td>:blush:</td>
<td><code>:blush:</code></td>
</tr>
<tr>
<td>:smirk:</td>
<td><code>:smirk:</code></td>
</tr>
<tr>
<td>:kissing_closed_eyes:</td>
<td><code>:kissing_closed_eyes:</code></td>
</tr>
<tr>
<td>:satisfied:</td>
<td><code>:satisfied:</code></td>
</tr>
<tr>
<td>:stuck_out_tongue_winking_eye:</td>
<td><code>:stuck_out_tongue_winking_eye:</code></td>
</tr>
<tr>
<td>:sleeping:</td>
<td><code>:sleeping:</code></td>
</tr>
<tr>
<td>:anguished:</td>
<td><code>:anguished:</code></td>
</tr>
<tr>
<td>:confused:</td>
<td><code>:confused:</code></td>
</tr>
<tr>
<td>:unamused:</td>
<td><code>:unamused:</code></td>
</tr>
<tr>
<td>:disappointed_relieved:</td>
<td><code>:disappointed_relieved:</code></td>
</tr>
<tr>
<td>:disappointed:</td>
<td><code>:disappointed:</code></td>
</tr>
<tr>
<td>:cold_sweat:</td>
<td><code>:cold_sweat:</code></td>
</tr>
<tr>
<td>:sob:</td>
<td><code>:sob:</code></td>
</tr>
<tr>
<td>:scream:</td>
<td><code>:scream:</code></td>
</tr>
<tr>
<td>:angry:</td>
<td><code>:angry:</code></td>
</tr>
<tr>
<td>:sleepy:</td>
<td><code>:sleepy:</code></td>
</tr>
<tr>
<td>:heartpulse:</td>
<td><code>:heartpulse:</code></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><table>
<thead>
<tr>
<th>图标</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>:warning:</td>
<td><code>:warning:</code></td>
</tr>
<tr>
<td>:link:</td>
<td><code>:link:</code></td>
</tr>
<tr>
<td>:one:</td>
<td><code> :one:</code></td>
</tr>
<tr>
<td>:four:</td>
<td><code>:four:</code></td>
</tr>
<tr>
<td>:seven:</td>
<td><code>:seven:</code></td>
</tr>
<tr>
<td>:keycap_ten:</td>
<td><code>:keycap_ten:</code></td>
</tr>
<tr>
<td>:hash:</td>
<td><code>:hash:</code></td>
</tr>
<tr>
<td>:arrow_down:</td>
<td><code>:arrow_down:</code></td>
</tr>
<tr>
<td>:capital_abcd:</td>
<td><code>:capital_abcd:</code></td>
</tr>
<tr>
<td>:arrow_lower_left:</td>
<td><code>:arrow_lower_left:</code></td>
</tr>
<tr>
<td>:arrow_up:</td>
<td><code>:arrow_up:</code></td>
</tr>
<tr>
<td>:arrow_double_down:</td>
<td><code>:arrow_double_down:</code></td>
</tr>
<tr>
<td>:arrow_heading_down:</td>
<td><code>:arrow_heading_down:</code></td>
</tr>
<tr>
<td>:arrow_right_hook:</td>
<td><code>:arrow_right_hook:</code></td>
</tr>
<tr>
<td>:arrow_up_small:</td>
<td><code>:arrow_up_small:</code></td>
</tr>
<tr>
<td>:rewind:</td>
<td><code>:rewind:</code></td>
</tr>
<tr>
<td>:ok:</td>
<td><code>:ok:</code></td>
</tr>
<tr>
<td>:repeat_one:</td>
<td><code>:repeat_one:</code></td>
</tr>
<tr>
<td>:up:</td>
<td><code>:up:</code></td>
</tr>
<tr>
<td>:ng:</td>
<td><code>:ng:</code></td>
</tr>
<tr>
<td>:signal_strength:</td>
<td><code>:signal_strength:</code></td>
</tr>
<tr>
<td>:sa:</td>
<td><code>:sa:</code></td>
</tr>
<tr>
<td>:womens:</td>
<td><code>:womens:</code></td>
</tr>
<tr>
<td>:parking:</td>
<td><code>:parking:</code></td>
</tr>
<tr>
<td>:baggage_claim:</td>
<td><code>:baggage_claim:</code></td>
</tr>
<tr>
<td>:potable_water:</td>
<td><code>:potable_water:</code></td>
</tr>
<tr>
<td>:congratulations:</td>
<td><code>:congratulations:</code></td>
</tr>
<tr>
<td>:left_luggage:</td>
<td><code>:left_luggage:</code></td>
</tr>
<tr>
<td>:cl:</td>
<td><code>:cl:</code></td>
</tr>
<tr>
<td>:no_entry_sign:</td>
<td><code>:no_entry_sign:</code></td>
</tr>
<tr>
<td>:do_not_litter:</td>
<td><code>:do_not_litter:</code></td>
</tr>
<tr>
<td>:no_pedestrians:</td>
<td><code>:no_pedestrians:</code></td>
</tr>
<tr>
<td>:eight_spoked_asterisk:</td>
<td><code>:eight_spoked_asterisk:</code></td>
</tr>
<tr>
<td>:vs:</td>
<td><code>:vs:</code></td>
</tr>
<tr>
<td>:chart:</td>
<td><code>:chart:</code></td>
</tr>
<tr>
<td>:taurus:</td>
<td><code>:taurus:</code></td>
</tr>
<tr>
<td>:leo:</td>
<td><code>:leo:</code></td>
</tr>
<tr>
<td>:scorpius:</td>
<td><code>:scorpius:</code></td>
</tr>
<tr>
<td>:aquarius:</td>
<td><code>:aquarius:</code></td>
</tr>
<tr>
<td>:six_pointed_star:</td>
<td><code>:six_pointed_star:</code></td>
</tr>
<tr>
<td>:b:</td>
<td><code>:b:</code></td>
</tr>
<tr>
<td>:on:</td>
<td><code>:on:</code></td>
</tr>
<tr>
<td>:diamond_shape_with_a_dot_inside:</td>
<td><code>:diamond_shape_with_a_dot_inside:</code></td>
</tr>
<tr>
<td>:copyright:</td>
<td><code>:copyright:</code></td>
</tr>
<tr>
<td>:interrobang:</td>
<td><code>:interrobang:</code></td>
</tr>
<tr>
<td>:heavy_plus_sign:</td>
<td><code>:heavy_plus_sign:</code></td>
</tr>
<tr>
<td>:white_flower:</td>
<td><code>:white_flower:</code></td>
</tr>
<tr>
<td>:ballot_box_with_check:</td>
<td><code>:ballot_box_with_check:</code></td>
</tr>
<tr>
<td>:curly_loop:</td>
<td><code>:curly_loop:</code></td>
</tr>
<tr>
<td>:trident:</td>
<td><code>:trident:</code></td>
</tr>
<tr>
<td>:white_check_mark:</td>
<td><code>:white_check_mark:</code></td>
</tr>
<tr>
<td>:black_circle:</td>
<td><code>:black_circle:</code></td>
</tr>
<tr>
<td>:large_blue_circle:</td>
<td><code>:large_blue_circle:</code></td>
</tr>
<tr>
<td>:small_blue_diamond:</td>
<td><code>:small_blue_diamond:</code></td>
</tr>
<tr>
<td>:small_red_triangle_down:</td>
<td><code>:small_red_triangle_down:</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>如何更好的维护你的 npm 包</title>
    <url>/2019/09/06/npm/howToMaintainYourPckBetter/</url>
    <content><![CDATA[<p>我们已经知道如何发布一个 <code>node</code> 包到 <code>npm</code>，整个操作过程也不是很复杂，在看这篇文章之前，如果你还不知道如何发布，你可以参考我之前的一篇文章 <a class="fc-danger" href="https://hongwenqing.com/2019/04/01/npm/howToPublishANodeModuleToNpm/"> 如何发布一个自己的node模块到npm </a>。</p>
<p>这篇文章将介绍如何在后期维护你已发布的 <code>npm</code> 包，以及如何更好的管理你的 <code>包版本</code>。</p>
<span id="more"></span>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先，我们来思考一个问题。假设，我们已经成功的发布了一个自己开发的插件包到 <code>npm</code> ，在使用这个插件包的过程中，我们不时的会发现一些 <code>BUGS</code> ，或者，有了一些新的 <code>IDEAS</code> ，这时我们就需要及时的修复这些 <code>BUGS</code>，并不定时的把新的想法（功能或优化）添加到你的插件包中，然后<strong>悄悄咪咪地</strong>发布到 <code>npm</code>。那么，请问你如何管理该插件包的版本呢？</p>
<p>小众的操作是每次的代码更新（BUGS fix, new APIS）都简单的使用 <code>npm version patch</code> 或 <code>npm version minor</code> 对版本号进行递增升级后，直接来一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<p>将所有更新发布到 <code>npm</code>。</p>
<div class="note warning"><p><strong>注意：</strong> 这种操作方式只能将版本号 <code>向上递增式</code> 的进行维护，而无法对 <code>低的大版本</code> 进行持续维护。这里的 <code>低的大版本</code> 指的是，比如你的插件包已经持续更新到 <code>2.x</code>，那么相对于 <code>2.x</code> 版本更低的大版本，比如 <code>1.x</code> 就是 <code>低的大版本</code>。虽然插件包已经更新到了 <code>2.x</code>，相对于 <code>1.x</code> 的版本在功能 <code>APIS</code> 上有了较大的优化改变，但依然有很大一部分使用者在使用着 <code>1.x</code> 的版本，并且他们不得不继续使用 <code>1.x</code>（原因或许是因为 <code>2.x</code>的版本实现太过激进，以至于较老的环境难以支持 whatever！）此时，作为包的开发者，我们就该继续维护 <code>1.x</code> 的版本，因为该大版本依然可能会存在某些漏洞。那么上面的那种包版本升级方式就不再适用了。因为，我们现在既需要保持最新版本的更新，又要对低版本的代码进行维护。</p>
</div>


<p>在正式开始案例教程之前，我们还需要了解一些必要的知识点。如果你很了解以下说的这些命令，你可以跳过它们，直接看案例。</p>
<h1 id="npm-verison-命令"><a href="#npm-verison-命令" class="headerlink" title="npm verison 命令"></a>npm verison 命令</h1><p><code>npm version</code> 命令用来升级 <code>npm包</code> 的版本号，该升级操作符合 <code>语义化版本规则</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm version &lt;newversion&gt;</span><br></pre></td></tr></table></figure>

<p>其中 <code>&lt;newversion&gt;</code> 参数的值包括以下这几种：</p>
<p>假定，当前包的版本为 <code>1.0.0</code>。</p>
<ul>
<li>patch 补丁版本的升级。版本号第三位递增 +1。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version patch</span><br><span class="line">v1.0.1</span><br></pre></td></tr></table></figure>

<ul>
<li>minor 小版本升级。版本号第二位递增 +1。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version minor</span><br><span class="line">v1.1.0</span><br></pre></td></tr></table></figure>

<ul>
<li>major 大版本升级。版本号第一位 +1。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version major</span><br><span class="line">v2.0.0</span><br></pre></td></tr></table></figure>

<ul>
<li>prepatch 预先补丁版本。版本第三位 +1，第四位递增（从 0 开始）。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version prepatch</span><br><span class="line">v1.0.1-0</span><br></pre></td></tr></table></figure>

<ul>
<li>preminor 预先小版本。版本号第二位 +1，第四位递增（从 0 开始）。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version preminor</span><br><span class="line">v1.1.0-0</span><br></pre></td></tr></table></figure>

<ul>
<li>premajor 预先大版本。版本号第一位 +1，第四位递增（从 0 开始）。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version premajor</span><br><span class="line">v2.0.0-0</span><br></pre></td></tr></table></figure>

<ul>
<li>prerelease 预先发布版本。版本号第四位递增（从 0 开始）。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version prerelease [--preid=&lt;prelease-id&gt;]</span><br><span class="line">v1.0.0-0</span><br></pre></td></tr></table></figure>

<p>使用 <code>--preid</code> 参数时，会添加 <code>tag</code> 类型值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version prerelease --preid=beta</span><br><span class="line">v1.0.0-beta.0</span><br></pre></td></tr></table></figure>

<ul>
<li>from-git 使用关联 git 仓库中的最新 <code>tag</code> 作为版本号。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version from-git</span><br><span class="line"><span class="comment"># 绑定的 git 仓库中的最新一个标签 tag 为 v1.1.0</span></span><br><span class="line">v1.1.0</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义版本号</li>
</ul>
<p>除了使用 <code>npm</code> 提供的规则值外，你还可以自定义版本号更新。这跟直接修改 <code>package.json</code> 文件中的 <code>version</code> 字段的方式如出一辙。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version 1.0.1</span><br><span class="line">v1.0.1</span><br></pre></td></tr></table></figure>


<p>以上就是 <code>npm version</code> 命令的所有可选参数值。本篇文章所用到的重点则是 <code>npm version from-git</code> 这条命令。</p>
<h1 id="npm-dist-tag-命令"><a href="#npm-dist-tag-命令" class="headerlink" title="npm dist-tag 命令"></a>npm dist-tag 命令</h1><p><code>npm dist-tag</code> 命令的作用是对 <code>npm</code> 包的 <code>dist-tags</code> 进行增删改操作。说白了就是给包的某个版本号打上标签 tag。使得用户可以通过 <code>npm i hello-npm-test@alpha --save</code> 的方式去安装 <code>npm</code> 包。其中 <code>alpha</code> 就是该包的一个标签名。</p>
<div class="note success"><p><strong>注：</strong> pckname 包名；version 版本号；tagname 标签名。</p>
</div>

<ol>
<li>新增标签</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm dist-tag add &lt;pckname&gt;@version [&lt;tagname&gt;]</span><br></pre></td></tr></table></figure>

<p>新增时，<code>tagname</code> 参数可选，默认值为 <code>latest</code>，即最后版本。如果执行新增命令时，已存在相同的 <code>tagname</code> 则会被覆盖。</p>
<ol start="2">
<li>删除标签</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm dist-tag <span class="built_in">rm</span> &lt;pckname&gt; &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看存在的标签</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm dist-tag <span class="built_in">ls</span> [&lt;pckname&gt;]</span><br></pre></td></tr></table></figure>

<p>列出包中已添加的 <code>tags</code>。会给出各标签名对应的版本号。</p>
<h1 id="npm-publish-命令"><a href="#npm-publish-命令" class="headerlink" title="npm publish 命令"></a>npm publish 命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm publish [--tag &lt;tagname&gt;]</span><br></pre></td></tr></table></figure>

<p>执行该命令后，当前版本的包就会在 <code>npm</code> 上得到更新，并对该版本打上 <code>&lt;tagname&gt;</code> 标签，如果没有传入 <code>--tag</code> 参数，则其默认值为 <code>latest</code>。</p>
<h1 id="git-tag-命令"><a href="#git-tag-命令" class="headerlink" title="git tag 命令"></a>git tag 命令</h1><p>这条命令是在 <code>git push</code> 之前为该代码版本打上标签 tag。通常我们会使用附注标签。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag -a &lt;tagversion&gt; -m <span class="string">&#x27;&lt;tagmessage&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>例如，我们给当前仓库代码打上 <code>v1.2.0</code> 的标签 tag。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假定 working tree is clean</span></span><br><span class="line">$ git tag -a v1.2.0 -m <span class="string">&#x27;version 1.2.0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure>

<p>现在我们的远程仓库中就有名为 <code>v1.2.0</code> 的 <code>tags</code> 标签版本了。</p>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>OK！需要了解的额外知识就是以上这些了。现在开始一个简单的案例。</p>
<p>首先，我们在之前已经有发布过一个 <code>npm</code> 包了，名字就叫做 <code>hello-npm-test</code>。现在，我们开始对它进行更新及版本维护。</p>
<p>当前 <code>hello-npm-test</code> 的版本图是这样的：</p>
<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g6pwqgvfkoj30rl0kf40k.jpg" />

<p>观察上图，<code>hello-npm-test</code> 的最后版本(latest)是 <code>2.0.1</code>，还有一个预先发布的测试版本(alpha) <code>2.0.3-alpha.0</code>。</p>
<p>经过一段时间的测试，alpha 版 <code>2.0.3-alpha.0</code> 已经可以升级为最后的稳定版（latest）发布了。</p>
<p>首先 git 工作区是干净的，所有修改已全部提交至 github，然后我们对版本进行更新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version patch</span><br><span class="line">v2.0.3</span><br></pre></td></tr></table></figure>

<p><code>hello-npm-test</code> 的版本从 <code>2.0.3-alpha.0</code> 更新到了 <code>2.0.3</code>。然后执行发布命令：、</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm publish</span><br></pre></td></tr></table></figure>

<p>发布成功后的版本如下：</p>
<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g6pwqiwd33j30qz0kxac9.jpg" />

<p>现在 <code>2.0.3-alpha.0</code> 这个版本的 dist-tag <code>alpha</code> 就可以删除了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm dist-tag <span class="built_in">rm</span> hello-npm-test alpha</span><br><span class="line">-alpha: hello-npm-test@2.0.3-alpha.0</span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g6pwqjhlzfj30qo0jn40i.jpg" />

<p>现在 <strong>Current Tags</strong> 中就只有 <code>2.0.3</code> 这个 latest 标签了。其作为最后的稳定版本。</p>
<h2 id="最高版本的小版本升级"><a href="#最高版本的小版本升级" class="headerlink" title="最高版本的小版本升级"></a>最高版本的小版本升级</h2><p>一段时间后，我们对 <code>hello-npm-test</code> 又加入了一些新的功能，这时，我们需要对其进行小版本(minor)的升级了。</p>
<p>先更新版本号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version minor</span><br><span class="line">v2.1.0</span><br></pre></td></tr></table></figure>

<p>再发布：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm publish</span><br></pre></td></tr></table></figure>

<p>更新后的版本图：</p>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g6pwqjvxvxj30qo0kywgo.jpg" />


<h2 id="低的大版本持续维护"><a href="#低的大版本持续维护" class="headerlink" title="低的大版本持续维护"></a>低的大版本持续维护</h2><p>当前 <code>hello-npm-test</code> 的最新版本为 <code>2.x</code>。但是此时，还在使用着 <code>1.x</code> 的同学们提交了 <code>issue</code> 说是有 BUGS 存在，希望尽快修复。那么我们会这样做：</p>
<blockquote>
<p>注：在 <code>hello-npm-test</code> 的版本还是 1.x 的时，2.x准备开发的时候，我们创建了名为 <code>1.x</code> 的分支来管理 <code>1.x</code> 的代码。</p>
</blockquote>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g6pwqcrw61j30dp0cp751.jpg" />

<p>好，我们切换到 1.x 分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout 1.x</span><br></pre></td></tr></table></figure>

<p>然后一顿操作，BUGS 修复了，真快呢！嗯，男人不能说快，这叫猛！好了，提交至 github。这时，注意一定要打上标签附注版本号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&#x27;bug fix&#x27;</span></span><br><span class="line">$ git tag -a v1.2.1 -m <span class="string">&#x27;bug fix to 1.2.1&#x27;</span></span><br><span class="line">$ git push --tags</span><br></pre></td></tr></table></figure>

<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g6pwqg2xhlj30dg0k0t9h.jpg" />

<p>然后根据这个 git tag 来为 <code>1.x</code> 升级版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version from-git</span><br><span class="line">v1.2.1</span><br><span class="line">$ npm publish</span><br></pre></td></tr></table></figure>

<p>这样发布之后，<code>1.2.1</code> 就变为最后版本（latest）。我们需要将 <code>2.1.0</code> 重新设置为 latest。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm dist-tag add hello-npm-test@2.1.0 latest</span><br></pre></td></tr></table></figure>

<p>这样就完成了一次 <code>低的大版本</code> 升级。然后我们就可以切换回 master 分支，继续 <code>2.x</code> 版本的开发维护了。</p>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g6pwqh7y6oj30rg0ie40e.jpg" />

<h2 id="升级大版本"><a href="#升级大版本" class="headerlink" title="升级大版本"></a>升级大版本</h2><p>为了响应新时代的召唤，我们决定对 <code>hello-npm-test</code> 进行一次大的颠覆性的改动，好刺激呢！</p>
<p>首先，我们新建一个 2.x 的分支，用于之后维护 2.x 版本的代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b 2.x</span><br><span class="line">$ git push origin 2.x</span><br></pre></td></tr></table></figure>

<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g6pwqeja6mj30db09ymxi.jpg" />

<p>推送到 github 上之后，我们再切换回 master 分支，进行 <code>3.x</code> 的开发工作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure>

<p>又是一顿华丽操作后，我们需要将 <code>hello-npm-test</code> 升级为 <code>3.x</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version major</span><br><span class="line">v3.0.0</span><br><span class="line">$ npm publish</span><br></pre></td></tr></table></figure>

<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g6pwqeyhzxj30rb0hu40b.jpg" />


<p>现在最新版本就是 <code>3.0.0</code> 了。</p>
<p>之后的各种升级就大同小异了，玩的愉快呢！</p>
]]></content>
      <categories>
        <category>npm相关</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>package</tag>
        <tag>version</tag>
        <tag>dist-tag</tag>
        <tag>git tag</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js版本控制器nvm的使用</title>
    <url>/2019/02/01/nodejs/howtousenvm/</url>
    <content><![CDATA[<p>介绍如何使用 <code>node.js</code> 的版本控制工具 <code>nvm</code>。可用于切换不同版本的 node.js。</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>进入安装包下载地址 <a href="https://github.com/coreybutler/nvm-windows/releases">nvm 安装包 github地址</a> ，下载后，直接解压安装即可。</p>
<p><strong>注：</strong> 如果已经单独安装了 <code>node</code> ，请先行卸载该 <code>node</code> ，因为<code>nvm</code> 会将你 <code>use</code> 的 <code>node</code> 版本安装到你设置的<code>path</code> 路径中。  </p>
<h1 id="如何修改当前-node-的保存路径"><a href="#如何修改当前-node-的保存路径" class="headerlink" title="如何修改当前 node 的保存路径"></a>如何修改当前 <code>node</code> 的保存路径</h1><p>在 <code>nvm</code> 文件夹下的 <code>settings.txt</code> 文件中修改 <code>path</code> 字段即可。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">root: E:\nvm</span><br><span class="line">path: E:\nodejs</span><br></pre></td></tr></table></figure>

<h1 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h1><p><strong>注：</strong> 在 <code>nvm-1.1.6</code> 及以下版本，默认不会在安装时自动配置环境变量，所以如果没有正确设置 <code>nvm</code> 的环境变量，会导致如下错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elenh@elenh MINGW64 ~/Desktop</span><br><span class="line">$ node -v</span><br><span class="line">bash: node: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">elenh@elenh MINGW64 ~/Desktop</span><br><span class="line">$ npm -v</span><br><span class="line">bash: npm: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">elenh@elenh MINGW64 ~/Desktop</span><br><span class="line">$ nvm -v</span><br><span class="line">bash: nvm: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>

<blockquote>
<p>新版的 <code>nvm-1.1.7</code>不存在这个问题，她会在安装时自动为你设置好环境变量。所以如果你使用的是 <code>nvm-1.1.7</code> 及以上版本，那么下面的环境变量设置流程你可以忽略不看。</p>
</blockquote>
<p><strong>window 10下设置流程：</strong></p>
<ul>
<li>找到<code>控制面板</code></li>
</ul>
<p><img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g0ncypiazbj31160fvjua.jpg"></p>
<ul>
<li>点击进入<code>系统和安全</code></li>
</ul>
<p><img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g0ncyrqwj5j30y40kddku.jpg"></p>
<ul>
<li>点击进入 <code>系统</code></li>
</ul>
<p><img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g0ncyr8bo1j31ha0jjn1o.jpg"></p>
<ul>
<li>点击左侧<code>高级系统设置</code></li>
</ul>
<p><img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g0ncyoin4ij31300o6tdn.jpg"></p>
<ul>
<li>点击弹窗中的 <code>环境变量</code></li>
</ul>
<p><img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g0ncyp1xoej310d0phgqw.jpg"></p>
<ul>
<li>在 <code>系统变量 </code>  模块 新建一个系统变量 <code>NVM_HOME</code> 并将值设置为 你安装的 <code>nvm</code> 所在目录。</li>
</ul>
<p><img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g0ncys5quej30ne0623z9.jpg"></p>
<ul>
<li>再在<code>系统变量 </code>  模块新建一个系统变量 <code>NVM_SYMLINK</code> 并将值设置为 <code>node</code> 所在目录。</li>
</ul>
<p><img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g0ncysloiej30nd064dgo.jpg"></p>
<ul>
<li>最后将 <code>%NVM_HOME%</code>  和  <code>%NVM_SYMLINK%</code>  添加进 <code>path</code> 变量中保存确定即可。</li>
</ul>
<p><img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g0ncyq9ph5j313o0paqbw.jpg"></p>
<p>到此便配置完成，现在你可以在任意地方打开 <code>cmd.exe</code>、<code>powershell.exe</code> 或 <code>git.exe</code> 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 nvm 版本</span></span><br><span class="line">nvm -v</span><br><span class="line"></span><br><span class="line">Running version 1.1.6.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">  nvm <span class="built_in">arch</span>                     : Show <span class="keyword">if</span> node is running <span class="keyword">in</span> 32 or 64 bit mode.</span><br><span class="line">  nvm install &lt;version&gt; [<span class="built_in">arch</span>] : The version can be a node.js version or <span class="string">&quot;latest&quot;</span> <span class="keyword">for</span> the latest stable version.</span><br><span class="line">                                 Optionally specify whether to install the 32 or 64 bit version (defaults to system <span class="built_in">arch</span>).</span><br><span class="line">                                 Set [<span class="built_in">arch</span>] to <span class="string">&quot;all&quot;</span> to install 32 AND 64 bit versions.</span><br><span class="line">                                 Add --insecure to the end of this <span class="built_in">command</span> to bypass SSL validation of the remote download server.</span><br><span class="line">  nvm list [available]         : List the node.js installations. Type <span class="string">&quot;available&quot;</span> at the end to see what can be installed. Aliased as <span class="built_in">ls</span>.</span><br><span class="line">  nvm on                       : Enable node.js version management.</span><br><span class="line">  nvm off                      : Disable node.js version management.</span><br><span class="line">  nvm proxy [url]              : Set a proxy to use <span class="keyword">for</span> downloads. Leave [url] blank to see the current proxy.</span><br><span class="line">                                 Set [url] to <span class="string">&quot;none&quot;</span> to remove the proxy.</span><br><span class="line">  nvm node_mirror [url]        : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url.</span><br><span class="line">  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https://github.com/npm/npm/archive/. Leave [url] blank to default url.</span><br><span class="line">  nvm uninstall &lt;version&gt;      : The version must be a specific version.</span><br><span class="line">  nvm use [version] [<span class="built_in">arch</span>]     : Switch to use the specified version. Optionally specify 32/64bit architecture.</span><br><span class="line">                                 nvm use &lt;<span class="built_in">arch</span>&gt; will <span class="built_in">continue</span> using the selected version, but switch to 32/64 bit mode.</span><br><span class="line">  nvm root [path]              : Set the directory <span class="built_in">where</span> nvm should store different versions of node.js.</span><br><span class="line">                                 If &lt;path&gt; is not <span class="built_in">set</span>, the current root will be displayed.</span><br><span class="line">  nvm version                  : Displays the current running version of nvm <span class="keyword">for</span> Windows. Aliased as v.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上所示，打印出了正确的 <code>nvm</code> 版本，就表示 <code>nvm</code> 已经安装成功了，接下来使用 <code>nvm</code> 的安装命令来安装你需要的 <code>node</code> 版本。</p>
<h1 id="下载源配置"><a href="#下载源配置" class="headerlink" title="下载源配置"></a>下载源配置</h1><p>由于 <code>nvm</code> 默认的下载地址 <a href="http://nodejs.org/dist/">http://nodejs.org/dist/</a> 是外国外服务器，网速不快的时候，经常会导致 <code>npm</code> 下载失败，所以可以设置 <code>node</code> 和 <code>npm</code> 的下载源地址为淘宝镜像，速度还是很可观的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 nodejs 的下载源地址</span></span><br><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 npm 的下载源地址</span></span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

<p>你也可以通过直接修改 <code>nvm</code> 安装包里的 <code>settings.txt</code> 文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

<h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install 10.19.0</span><br></pre></td></tr></table></figure>

<p>安装完成后，使用 <code>nvm ls</code> 命令，可以查看你已经安装了哪些版本的 <code>node</code>。</p>
<p>然后再使用 <code>nvm on</code> 命令启用 <code>nvm</code>。</p>
<p>接着再使用 <code>nvm use 10.19.0</code> 命令，切换到 <code>node v10.19.0</code>。</p>
<p>为了检验是否切换成功了，可以使用下面的方式进行检查。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elenh@elenh MINGW64 ~/Desktop</span><br><span class="line">$ node -v</span><br><span class="line">v10.16.3</span><br><span class="line"></span><br><span class="line">elenh@elenh MINGW64 ~/Desktop</span><br><span class="line">$ npm -v</span><br><span class="line">6.9.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打印出了正确的 <code>node</code> 和 <code>npm</code> 版本，就表示切换成功了。</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nvm是否安装成功，安装成功则会显示当前版本号和一些命令说明</span></span><br><span class="line">nvm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nvm的当前版本</span></span><br><span class="line">nvm version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版node</span></span><br><span class="line">nvm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装某个版本的node</span></span><br><span class="line"><span class="comment"># 例：nvm install v10.15.2 64 安装64位的，版本为 10.15.2 的node</span></span><br><span class="line">nvm install &lt;version&gt; [<span class="built_in">arch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载某个版本</span></span><br><span class="line">nvm uninstall &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 nvm</span></span><br><span class="line">nvm on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用 nvm</span></span><br><span class="line">nvm off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已被管理的版本</span></span><br><span class="line">nvm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可安装的 nodejs 版本</span></span><br><span class="line">nvm list available</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换node版本</span></span><br><span class="line">nvm use &lt;version&gt; [<span class="built_in">arch</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前版本</span></span><br><span class="line">nvm current</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给不同的版本号添加别名</span></span><br><span class="line">nvm <span class="built_in">alias</span> &lt;name&gt; &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除已定义的别名</span></span><br><span class="line">nvm <span class="built_in">unalias</span> &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设置与代理</span></span><br><span class="line">nvm proxy </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span></span><br><span class="line">nvm node_mirror [url] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置或者查看setting.txt中的npm_mirror，如果不设置的话默认的是 https://github.com/npm/npm/archive/.</span></span><br><span class="line">nvm npm_mirror [url] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置和查看root路径（nvm的安装路径）</span></span><br><span class="line">nvm root [path] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前版本node环境下，重新全局安装指定版本号的npm包</span></span><br><span class="line">nvm reinstall-packages &lt;version&gt; </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>如何发布一个自己的node模块到npm</title>
    <url>/2019/04/01/npm/howToPublishANodeModuleToNpm/</url>
    <content><![CDATA[<p>本文介绍如何创建一个自己的 <code>node</code> 模块，以及怎样发布到 <code>npm</code> ，与其他开发人员共享你的模块。</p>
<span id="more"></span>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个前端开发人员，或者 <code>nodejs</code> 开发人员，目前我们使用最多的模块管理机制实属是 <code>npm</code>。我们可以使用很简单方式引用其他开发者发布到 <code>npm</code> 的模块。例如，当需要在你的项目中使用 <code>vue</code>。那么你可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install vue --save</span><br></pre></td></tr></table></figure>

<p>安装 <code>vue</code> 模块到你的项目中，然后通过简单的导入命令使用她：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用 es Module 语法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么，我们自己怎样去创建一个自己模块，并且发布到 <code>npmjs</code> 呢？</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在开始之前，你需要有 3 样关键的工具，请确保你已经安装或者注册了。</p>
<ol>
<li>编辑器，推荐使用 <a class="fc-danger" href="https://code.visualstudio.com/Download">Visual Studio Code</a></li>
<li><a class="fc-danger" href="https://nodejs.org/en/download/">Node.js 环境</a></li>
<li><a class="fc-danger" href="https://www.npmjs.com">npm 账户</a></li>
</ol>
<h1 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h1><h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><p>首先，我们要初始化一个 <code>node</code> 项目，也就是你的 <code>node</code> 包。随便在电脑的哪个位置创建一个新的文件夹，名字嘛，假定我们叫她 <code>hello-npm-test</code>。什么！你说她俗气？没办法！因为 <code>苏大强</code> 喜欢，我 <code>苏明成</code> 表示也没有办法。</p>
<p>OK！使用编辑器打开并进入到 <code>hello-npm-test</code> 文件夹，使用 <code>npm init</code> 初始化 <code>package.json</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure>

<p>这时你会看到一些提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elenh@elenh MINGW64 ~/Desktop/hello-npm-test</span><br><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm <span class="built_in">help</span> json` <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (hello-npm-test) hello-npm-test</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description: a node <span class="built_in">test</span> module <span class="built_in">which</span> will be published to npm.</span><br><span class="line">entry point: (index.js)</span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>:</span><br><span class="line">git repository:</span><br><span class="line">keywords: npm node <span class="built_in">test</span></span><br><span class="line">author: elenh</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to C:\Users\yisiw\Desktop\hello-npm-test\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello-npm-test&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;a node test module which will be published to npm.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;npm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;elenh&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (<span class="built_in">yes</span>) y</span><br></pre></td></tr></table></figure>

<p>具体的意思就是确定 <code>package.json</code> 文件中的一些必要字段信息。比如，包的名字 <code>name</code> ，包的语义化版本号 <code>version</code> ，包的描述信息 <code>description</code>，包的入口点 （entry point）<code>main</code>，测试脚本命令 （test command）<code>script</code>，git 仓库地址 （git repository），在 <code>npm</code> 中的搜索关键字 <code>keywords</code> ，包的作者名 <code>author</code> 以及该包的开源许可证类别 <code>license</code>。</p>
<blockquote>
<p>注：如果直接按回车的话，表示直接使用默认值设置该字段，但是作为一个即将要把包发布到 <code>npm</code> 的模块分享者来说，请仔细填写这些信息。因为这关系到该模块是否能正常使用（main 入口点），或者说别的开发者能够方便检索到你的模块（keywords, description）。很关键的一点是，你的 <code>version</code> 字段一定要遵循 <code>npm</code> 的语义化版本定义规则。以便使用此模块的开发者知道使用该模块的哪个版本。关于 <code>语义化版本规则</code> 请参考本博客的另一篇文章 <a href="http://hongwenqing.com/2019/03/14/npm/npm/" class="fc-danger">npm使用说明</a>。</p>
</blockquote>
<h2 id="编写模块"><a href="#编写模块" class="headerlink" title="编写模块"></a>编写模块</h2><p>现在，我们已经初始化好了 <code>package.json</code> 文件。是时候创建模块文件了。在 <code>hello-npm-test</code> 文件夹中新建一个名为 <code>index.js</code> 的文件。并在里面写入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params"> str </span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&#x27;hello&#x27;</span> + str )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>如上，使用 <code>CommonJs</code> 模块语法默认导出了一个函数，代码质量及其酷炫。<code>苏明玉</code> 都表示很惊讶！</p>
<p>至于为什么使用名为 <code>index.js</code> 的文件呢？这边要说的话就需要展开 <code>nodejs</code> 的模块加载规则了，嗯，<code>苏明哲</code>让我别展开了，听大哥的话，所以请自行 <code>Google</code>。</p>
<p>另一点需要说的是，在 <code>package.json</code> 文件中，我们定义了模块的入口点（entry point）<code>main</code> 字段，其默认值就是 <code>index.js</code>。她表示当使用模块导入语法使用该模块时，使用哪个文件作为入口点。当然，你可以修改她，比如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>表示模块入口点为 <code>src</code> 文件夹下的 <code>index.js</code> 文件。</p>
<h1 id="测试你的模块"><a href="#测试你的模块" class="headerlink" title="测试你的模块"></a>测试你的模块</h1><p>到目前为止，你的模块已经可用了，那么怎么测试你的模块呢？此时，因为还没有发布到 <code>npm</code> ，所以不能使用如下方式直接安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hello-npm-test</span><br></pre></td></tr></table></figure>

<p>重新创建一个项目文件夹用来测试我们新写的模块，名为 <code>my-project</code> 。进入到该文件夹，初始化 <code>node</code> 项目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时，我们直接使用默认的 <code>package.json</code> 的设置即可，因为只是用来测试的。</p>
</blockquote>
<p>同样，我们新建一个 <code>index.js</code> 文件，并准备在该文件中使用 <code>hello-npm-test</code> 模块。</p>
<p>两种方式来引用她：</p>
<ul>
<li>可以使用本地绝对路径引用的方式来使用她。</li>
</ul>
<p><code>cd</code> 进入到 <code>my-project</code> 文件夹中，并安装 <code>hello-npm-test</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install C:/Users/yisiw/Desktop/hello-npm-test</span><br></pre></td></tr></table></figure>

<p>然后你可以看到 <code>my-project</code> 文件夹中的 <code>package.json</code> 文件中多出了 <code>dependencies</code> 字段如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-project&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hello-npm-test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:../hello-npm-test&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>index.js</code> 中使用她。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// my-project/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> log = <span class="built_in">require</span>(<span class="string">&#x27;hello-npm-test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;npm&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在终端执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node index.js</span><br><span class="line">hellonpm</span><br></pre></td></tr></table></figure>

<p>没错！成功的打印出了 <code>hellonpm</code>，鼓掌。</p>
<ul>
<li>你也可以使用 <code>npm link</code> 将 <code>hello-npm-test</code> 包关联到全局后通过 <code>npm link hello-npm-test</code> 来使用她。</li>
</ul>
<p>首先进入到 <code>hello-npm-test</code> 文件中，打开命令行，输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">link</span></span><br></pre></td></tr></table></figure>

<p>这句命令的意思是将本模块地址关联到 <code>nodejs</code> 的全局环境中，以便可以在本机的任何项目中使用她。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ E:\nodejs\node_modules\hello-npm-test -&gt; C:\Users\yisiw\Desktop\hello-npm-test</span><br></pre></td></tr></table></figure>

<p>执行完 <code>npm link</code> 后，会出现上方的提示信息，表示 <code>hello-npm-test</code> 模块的副本已经安装关联到 <code>nodejs</code> 的全局环境中了，你可以打开如上方的路径地址找到<code>hello-npm-test</code> 模块文件夹，就在 <code>（E:\nodejs\node_modules\hello-npm-test）</code>。</p>
<p>为了同第一种方式区分开，我们首先把之前的 <code>node_modules</code> 文件夹、<code>package-lock.json</code> 和 <code>package.json</code> 中的 <code>dependencies</code> 字段删除，然后进入到 <code>my-project</code> 文件夹中。输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">link</span> hello-npm-test</span><br><span class="line"></span><br><span class="line">elenh@elenh MINGW64 ~/Desktop/my-project</span><br><span class="line">$ npm <span class="built_in">link</span> hello-npm-test</span><br><span class="line">C:\Users\yisiw\Desktop\my-project\node_modules\hello-npm-test -&gt; E:\nodejs\node_modules\hello-npm-test -&gt; C:\Users\yisiw\Desktop\hello-npm-test</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行完 <code>npm link hello-npm-test</code> 命令后，你会发现，<code>my-project</code> 文件夹中的 <code>node_mnodules</code> 又出现了，并且里面存在 <code>hello-npm-test</code> 包。那么我们再次执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node index.js</span><br><span class="line">hellonpm</span><br></pre></td></tr></table></figure>

<p>没错，同样是有用的。</p>
<h1 id="将模块管理到-Github"><a href="#将模块管理到-Github" class="headerlink" title="将模块管理到 Github"></a>将模块管理到 Github</h1><p>接下来，我们应该将我们的包使用版本控制工具管理起来，方便之后的维护及更新。没错！是 <a href="https://github.com/yisibell/hello-npm-test">Github</a>。理所当然！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&#x27;Initial commit&#x27;</span></span><br><span class="line">$ git remote add origin https://github.com/yisibell/hello-npm-test</span><br><span class="line">$ git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在 <code>package.json</code> 文件中加入 <code>homepage</code> 字段，并写上你的<strong>仓库地址</strong>或者<strong>项目文档地址</strong>。这样，当用户在 <strong>npm</strong> 中查看你的包信息时，就可以看到她。帮助用户熟悉并使用。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/yisibell/hello-npm-test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="添加-README-md"><a href="#添加-README-md" class="headerlink" title="添加 README.md"></a>添加 README.md</h1><p>在开发完你的包功能后，你应该创建一个 <code>README.md</code> 文件来描述你的包。</p>
<ul>
<li>这个包怎么安装</li>
<li>这个包是用来干什么的</li>
<li>这个包解决了什么问题</li>
<li>这个包有哪些配置项及APIS</li>
</ul>
<h2 id="独立说明文档"><a href="#独立说明文档" class="headerlink" title="独立说明文档"></a>独立说明文档</h2><p>如果，你的包提供的功能特别多，比如像，一些 <strong>UI 组件库</strong>，她会提供很多组件，指令，api 服务等。</p>
<p>那么，一个简单的 <strong>README.md</strong> 就不是很合适了，目前，推荐的方式是，使用 <strong>vuepress</strong>, <strong>hexo</strong> 等这类静态站点部署工具，来构建文档。</p>
<p>然后，部署在 <strong>GitHub Pages</strong> 或者 <strong>Gitee Pages</strong> 上。</p>
<p>这里推荐一个快速构建文档的框架: <a href="http://elenhong.gitee.io/aidol/" target="_blank"> aidol </a>。基于 <strong>vuepress</strong>。</p>
<p>具体细节，可参照其说明文档，进行构建部署。</p>
<h1 id="添加-npmignore"><a href="#添加-npmignore" class="headerlink" title="添加.npmignore"></a>添加.npmignore</h1><p>在开发你的包的过程中，你可能会新建一些依赖文件，测试文件等，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">package-lock.json</span><br><span class="line">node_modules/</span><br><span class="line">.gitignore</span><br><span class="line">test/</span><br></pre></td></tr></table></figure>

<p>打包构建配置、以及 <code>.npmignore</code> 自身。这些都是不需要发布到 <code>npm</code> 上的。</p>
<p>判别的基本原则就是，与该包不相关且其他人引入时，不需要加载的，我们都应该进行忽略。</p>
<p><code>cd</code> 进入到 <code>hello-npm-test</code> ，打开你的终端命令行敲入 <code>touch .npmignore</code> 在项目包的根目录下新建 <code>.npmignore</code> 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> .npmignore</span><br></pre></td></tr></table></figure>

<p>然后在该文件中写入你要忽略的文件、文件夹配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">.gitignore</span><br><span class="line"><span class="built_in">test</span>/</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：可别把 <code>package.json</code> 忽略掉了。这是必须上传的关键文件，该包的信息都被保存在该文件中，使用者使用导入语法导入该模块时，也是通过 <code>package.json</code> 文件中的  <code>main</code> 字段来查找入口文件。</p>
</blockquote>
<h1 id="发布到-npm"><a href="#发布到-npm" class="headerlink" title="发布到 npm"></a>发布到 npm</h1><p>最后一步就是发布你的模块到 <code>npm</code>。进入到 <code>hello-npm-test</code> ，打开命令行。敲入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">$ npm adduser</span><br><span class="line"></span><br><span class="line"><span class="comment"># or </span></span><br><span class="line"><span class="comment"># 直接登录</span></span><br><span class="line">$ npm login</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elenh@elenh MINGW64 ~/Desktop/hello-npm-test (master)</span><br><span class="line">$ npm adduser</span><br><span class="line">Username: elenh</span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) yisiwings@163.com</span><br><span class="line">Logged <span class="keyword">in</span> as elenh on https://registry.npmjs.org/.</span><br></pre></td></tr></table></figure>

<p>按提示输入 用户名（Username）、密码（Password）以及邮箱（Email）后，便会提示你已经作为谁谁谁登陆到了 <code>npm</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Logged <span class="keyword">in</span> as elenh on https://registry.npmjs.org/.</span><br></pre></td></tr></table></figure>


<p>你可以使用 <code>npm version</code> 查看该模块当前所处的版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version</span><br><span class="line">&#123; <span class="string">&#x27;hello-npm-test&#x27;</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">  npm: <span class="string">&#x27;5.6.0&#x27;</span>,</span><br><span class="line">  ares: <span class="string">&#x27;1.10.1-DEV&#x27;</span>,</span><br><span class="line">  cldr: <span class="string">&#x27;32.0&#x27;</span>,</span><br><span class="line">  http_parser: <span class="string">&#x27;2.8.0&#x27;</span>,</span><br><span class="line">  icu: <span class="string">&#x27;60.1&#x27;</span>,</span><br><span class="line">  modules: <span class="string">&#x27;57&#x27;</span>,</span><br><span class="line">  napi: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">  nghttp2: <span class="string">&#x27;1.29.0&#x27;</span>,</span><br><span class="line">  node: <span class="string">&#x27;8.11.2&#x27;</span>,</span><br><span class="line">  openssl: <span class="string">&#x27;1.0.2o&#x27;</span>,</span><br><span class="line">  tz: <span class="string">&#x27;2017c&#x27;</span>,</span><br><span class="line">  unicode: <span class="string">&#x27;10.0&#x27;</span>,</span><br><span class="line">  uv: <span class="string">&#x27;1.19.1&#x27;</span>,</span><br><span class="line">  v8: <span class="string">&#x27;6.2.414.54&#x27;</span>,</span><br><span class="line">  zlib: <span class="string">&#x27;1.2.11&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>当前版本为 <code>1.0.0</code>。</p>
<p>紧接着就是将包发布。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 私有包发布方式</span></span><br><span class="line">$ npm publish</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开源包发布方式</span></span><br><span class="line">$ npm publish --access=public</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在发布的过程中，你可能会遇到一些错误，比如 <code>npm</code> 中已经有存在你当前的这个包名了。那么修改你的包名再发布。</p>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>现在，你可以使用诸如：<code>$ npm install hello-npm-test --save</code>，这样的方式来安装你自己的包了，并且在其他项目中使用她。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> log = <span class="built_in">require</span>(<span class="string">&#x27;hello-npm-test&#x27;</span>)</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;，明玉&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ node index.js</span><br><span class="line">hello，明玉</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="维护和升级"><a href="#维护和升级" class="headerlink" title="维护和升级"></a>维护和升级</h1><p>你的包在不断使用的过程中，使用者们或你自己会发现，她存在某些 <strong>BUGS</strong> ，或者需要优化，再或者你需要添加新的功能 <strong>APIS</strong>。</p>
<p>假定，你已经对包升级完毕，那么怎样更新 <code>npm</code> 上的包数据呢？这同样很简单，你只需要按照 <code>语义化版本规则</code> 更新你的版本号后，再修改下 <code>README.md</code> 说明文档，指出你的哪些改动，以及新的 <strong>API</strong> 用法。</p>
<p>你就可以在该包根目录下打开命令行再次键入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm publish --access=public</span><br></pre></td></tr></table></figure>

<p>你的包就会在 <code>npmjs</code> 被更新为一个新的版本。使用者们，不定期的执行 <code>npm outdated</code> 就会看到你的包的更新情况，并更新他们本地的包文件。</p>
<h1 id="版本号更新方式"><a href="#版本号更新方式" class="headerlink" title="版本号更新方式"></a>版本号更新方式</h1><p>通常，当你的爱包中的代码被你优化修改了，你需要先升级你的包版本号，然后再 <code>npm publish</code>。你有以下两种更新版本号的方式。</p>
<ol>
<li>手动修改 <code>package.json</code> 中的 <code>version</code> 字段，注意遵循 <code>语义化版本规则</code>。然后再 <code>npm publish</code>。</li>
<li>使用 <code>npm version &lt;update_type&gt;</code> 命令。</li>
</ol>
<p>其中 <code>update_type</code> 参数有 3 个常用可选值：<code>patch</code> , <code>minor</code> 和 <code>major</code>。</p>
<ul>
<li>patch 表示补丁级别的版本更新，即递增第三位版本号</li>
<li>minor 表示小版本级别的版本更新，即递增第二位版本号</li>
<li>major 表示大版本级别的版本更新，即递增第一位版本号</li>
</ul>
<blockquote>
<p><code>&lt;update_type&gt;</code> 的其他值，不在此处列出，<code>| premajor | preminor | prepatch | prerelease [--preid=&lt;prerelease-id&gt;] | from-git</code>。</p>
</blockquote>
<p>例：当前 <code>hello-npm-test</code> 的版本号为 <code>1.0.1</code>，我们现在对小版本进行更新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm version minor</span><br><span class="line">v1.1.0</span><br></pre></td></tr></table></figure>

<p>如上打印结果，版本号已经升级到了第二位上，注意，因为是递增制，所以第三位版本号恢复从 0 开始。</p>
<p>然后你就可以将新的版本发布到 <code>npm</code> 了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm publish --access=public</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>注意：在使用 <code>npm version &lt;update_type&gt;</code> 更新版本号之前，你需要先将你的代码提交到 <strong>github</strong> 否则会调用命令失败！</p>
</div>





]]></content>
      <categories>
        <category>npm相关</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>npm源管理器nrm</title>
    <url>/2019/08/26/npm/npm-nrm/</url>
    <content><![CDATA[<p>本文介绍 <code>npm</code> 的源管理器 <code>nrm</code> 如何使用。<code>nrm</code> 可以帮助你快速、方便的在各个下载源之间切换，目前已经包括有：<code>npm, cnpm, taobao, nj(nodejitsu).</code> 等可供选择切换。</p>
<span id="more"></span>


<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>nrm</code> 是一个 <code>node</code> 模块，所以使用 <code>npm</code> 命令安装即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install nrm -g</span><br></pre></td></tr></table></figure>

<p>可以通过 <code>nrm -V</code> 查看 <code>nrm</code> 的版本号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nrm -V</span><br><span class="line"></span><br><span class="line">$ 1.2.1</span><br></pre></td></tr></table></figure>

<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="nrm-ls"><a href="#nrm-ls" class="headerlink" title="nrm ls"></a>nrm ls</h2><p>查看可用的源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nrm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">$ * npm -------- https://registry.npmjs.org/</span><br><span class="line">  yarn ------- https://registry.yarnpkg.com/</span><br><span class="line">  cnpm ------- http://r.cnpmjs.org/</span><br><span class="line">  taobao ----- https://registry.npm.taobao.org/</span><br><span class="line">  nj --------- https://registry.nodejitsu.com/</span><br><span class="line">  npmMirror -- https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm ----- http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure>

<p>如上打印所示，以 <code>*</code> 号开头的表示当前正在使用的源，默认使用的则是<code>npm</code> 官方源地址。</p>
<h2 id="nrm-use"><a href="#nrm-use" class="headerlink" title="nrm use"></a>nrm use</h2><p>切换 <code>npm</code> 的源。例如，切换到淘宝的源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nrm use taobao</span><br></pre></td></tr></table></figure>

<h2 id="nrm-add"><a href="#nrm-add" class="headerlink" title="nrm add"></a>nrm add</h2><p>新增一个自定义的源。你可以增加定制的源，特别适用于添加企业内部的私有源，执行命令 <code>nrm add &lt;registry&gt; &lt;url&gt;</code>，其中 <code>reigstry</code> 为源名，<code>url</code> 为源的路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm add myregistry http://192.168.10.127:8081/repository/npm-public/</span><br></pre></td></tr></table></figure>

<p>添加完后，你可以使用 <code>nrm ls</code> 命令查看可用源列表，使用 <code>nrm use</code> 切换源。</p>
<h2 id="nrm-del"><a href="#nrm-del" class="headerlink" title="nrm del"></a>nrm del</h2><p>删除指定源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nrm del &lt;registry&gt;</span><br></pre></td></tr></table></figure>

<p>例如，删除 <code>myregistry</code> 这个源：<code>nrm del myregistry</code>。</p>
<h2 id="nrm-test"><a href="#nrm-test" class="headerlink" title="nrm test"></a>nrm test</h2><p>测试指定源的响应速度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nrm <span class="built_in">test</span> &lt;registry&gt;</span><br></pre></td></tr></table></figure>

<p>例：<code>nrm test npm</code>，测试官方源的响应速度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ * npm ---- 812ms</span><br></pre></td></tr></table></figure>

<p>测试淘宝源的速度：<code>nrm test taobao</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ taobao - 132ms</span><br></pre></td></tr></table></figure>

<p>可以看出淘宝源是要快很多的！所以对于网速慢的同学，可以通过 <code>nrm</code> 这个工具灵活切换合适的源，提高开发效率。</p>
]]></content>
      <categories>
        <category>npm相关</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>nrm</tag>
      </tags>
  </entry>
  <entry>
    <title>npm使用说明</title>
    <url>/2019/03/14/npm/npm/</url>
    <content><![CDATA[<p>介绍 <code>npm</code> 的使用。</p>
<span id="more"></span>


<h1 id="npm简介"><a href="#npm简介" class="headerlink" title="npm简介"></a>npm简介</h1><p><code>npm</code>有两层含义。一层含义是<code>Node</code>的开放式模块登记和管理系统，网址为<code>npmjs.org</code>。另一层含义是<code>Node</code>默认的模块管理器，是一个命令行下的软件，用来安装和管理<code>Node</code>模块。</p>
<p><code>npm</code>不需要单独安装。在安装<code>Node</code>的时候，会连带一起安装<code>npm</code>。但是，<code>Node</code>附带的<code>npm</code>可能不是最新版本，使用下方命令查看<code>npm</code>的版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ npm --version</span><br></pre></td></tr></table></figure>

<blockquote>
<p><i class="fa fa-exclamation-circle fc-warning"></i> 如果不是最新的，最好用下面的命令，更新到最新版本：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install npm@latest -g</span><br></pre></td></tr></table></figure>

<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h2 id="npm-list"><a href="#npm-list" class="headerlink" title="npm list"></a>npm list</h2><p><code>npm list</code> 列出项目的依赖信息。也可以使用 <code>npm ls</code> 简写命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前项目的说有依赖项</span></span><br><span class="line">$ npm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只列出一层深度依赖项</span></span><br><span class="line">$ npm list --depth 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出在全局的所有安装包信息</span></span><br><span class="line">$ npm list -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只列出全局的一层递归深度的安装包信息</span></span><br><span class="line">$ npm list -g --depth 0</span><br></pre></td></tr></table></figure>


<h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><p>使用<code>npm init</code>初始化包。即初始化 <code>package.json</code> 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会有一系列提问设置，根据提问设置package.json文件中的基本字段内容</span></span><br><span class="line">$ npm init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过提问环节，直接使用默认设置初始化package.json文件</span></span><br><span class="line">$ npm init -y</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ npm init -<span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>我们可以为 <code>init</code> 命令初始化一些值，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; npm <span class="built_in">set</span> init.author.email <span class="string">&quot;yisiwings@163.com&quot;</span></span><br><span class="line">&gt; npm <span class="built_in">set</span> init.author.name <span class="string">&quot;hongwenqing&quot;</span></span><br><span class="line">&gt; npm <span class="built_in">set</span> init.license <span class="string">&quot;MIT&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><p><code>Node</code>模块采用<code>npm install</code>命令安装。</p>
<p>每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如<code>eslint</code>和<code>@vue/cli</code>。“本地安装”指的是将一个模块下载到当前项目的<code>node_modules</code>子目录，然后只有在项目目录之中，才能调用这个模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地安装</span></span><br><span class="line">$ npm install &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">$ sudo npm install --global &lt;package name&gt;</span><br><span class="line">$ sudo npm install -g &lt;package name&gt;</span><br></pre></td></tr></table></figure>

<p>安装之前，<code>npm install</code>会先检查，<code>node_modules</code>目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>
<p>如果你希望，一个模块不管是否安装过，<code>npm</code> 都要强制重新安装，可以使用<code>-f</code>或<code>--force</code>参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install &lt;package name&gt; --force</span><br></pre></td></tr></table></figure>

<p>如果你希望，所有模块都要强制重新安装，那就删除<code>node_modules</code>目录，重新执行<code>npm install</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> -rf node_modules</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p><code>install</code>命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上<code>@</code>和<code>版本号</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install sax@latest</span><br><span class="line">$ npm install sax@0.1.1</span><br><span class="line">$ npm install sax@<span class="string">&quot;&gt;=0.1.0 &lt;0.2.0&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果使用<code>--save-exact</code>参数，会在<code>package.json</code>文件指定安装模块的确切版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install readable-stream --save --save-exact</span><br></pre></td></tr></table></figure>

<p><code>install</code>命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在<code>packages.json</code>文件的哪一项中。</p>
<blockquote>
<p>–save：模块名将被添加到dependencies，可以简化为参数-S。<br>–save-dev: 模块名将被添加到devDependencies，可以简化为参数-D。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install sax --save</span><br><span class="line">$ npm install node-tap --save-dev</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ npm install sax -S</span><br><span class="line">$ npm install node-tap -D</span><br></pre></td></tr></table></figure>

<p><code>npm install</code>默认会安装<code>dependencies</code>字段和<code>devDependencies</code>字段中的所有模块，如果使用<code>--production</code>参数，可以只安装<code>dependencies</code>字段的模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --production</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ NODE_ENV=production npm install</span><br></pre></td></tr></table></figure>


<blockquote>
<p>如果你的网速很慢，建议使用淘宝镜像代理。安装完后，你就可以使用 <code>cnpm</code> 代替 <code>npm</code> 命令。<code>npm</code> 特有的一些命令除外，比如：<code>npm adduser</code> 、<code>npm login</code> 、<code>npm publish</code>等等。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装cnpm 命令行工具 ，使用淘宝的npm 镜像</span></span><br><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>


<h2 id="npm-update"><a href="#npm-update" class="headerlink" title="npm update"></a>npm update</h2><p><code>npm update</code>命令可以更新本地安装的模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级当前项目的指定模块或所有可以更新的模块</span></span><br><span class="line">$ npm update [package name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级全局安装的模块</span></span><br><span class="line">$ npm update --global [package name]</span><br></pre></td></tr></table></figure>

<p>它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。在升级包时，<code>npm</code> 会根据 <code>package.json</code> 文件中定义的 <code>语义化版本规则</code> 判断应该更新安装哪个版本的包。使用</p>
<p><code>npm outdated</code> 命令可以准确查看通过 <code>语义化版本规则</code> 计算出来的版本号（Wanted字段）。</p>
<p>执行更新命令后 <code>package.json</code> 里面模块的版本号变化：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新之前的package.json</span></span><br><span class="line">dependencies<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  dep1<span class="punctuation">:</span> <span class="string">&quot;^1.1.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新之后的package.json</span></span><br><span class="line">dependencies<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  dep1<span class="punctuation">:</span> <span class="string">&quot;^1.2.2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>:warning:   注意，从<code>npm v2.6.1</code> 开始，<code>npm update</code>只更新顶层模块，而不更新依赖的依赖，以前版本是递归更新的。如果想取到老版本的效果，要使用下面的命令：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm --depth 9999 update</span><br></pre></td></tr></table></figure>

<h2 id="npm-uninstall"><a href="#npm-uninstall" class="headerlink" title="npm uninstall"></a>npm uninstall</h2><p><code>npm uninstall</code>命令，卸载已安装的模块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载指定的本地模块</span></span><br><span class="line">$ npm uninstall [package name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载全局模块</span></span><br><span class="line">$ npm uninstall [package name] --global</span><br></pre></td></tr></table></figure>

<h2 id="npm-run"><a href="#npm-run" class="headerlink" title="npm run"></a>npm run</h2><p><code>npm</code>不仅可以用于模块管理，还可以用于执行脚本。<code>package.json</code>文件有一个<code>scripts</code>字段，可以用于指定脚本命令，供<code>npm</code>直接调用。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myproject&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jshint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;browserify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mocha&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jshint **.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mocha test/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="npm-link"><a href="#npm-link" class="headerlink" title="npm link"></a>npm link</h2><p><code>npm link</code> 命令可以将某个模块关联安装到 <code>nodejs</code> 全局环境中，以便可以在本机的任何项目中引用她。</p>
<p>比如，我们在构建自己的模块的时候，我们需要对其进行测试，在没有发布到 <code>npmjs</code> 上之前，我们无法使用如下命令来安装她：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install my-module</span><br></pre></td></tr></table></figure>

<p>这时，<code>npm link</code> 就可以派上用场了，我们 <code>cd</code> 进入到 <code>my-module</code> 项目所在根目录后，打开终端命令行，键入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">link</span></span><br></pre></td></tr></table></figure>

<p>此时，<code>my-module</code> 模块的副本已经被关联并安装到 <code>nodejs</code> 的全局环境中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ E:\nodejs\node_modules\my-module -&gt; C:\Users\yisiw\Desktop\my-module</span><br></pre></td></tr></table></figure>

<p>当要使用 <code>my-module</code> 模块时，可以直接在项目内命令行中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">link</span> my-module</span><br></pre></td></tr></table></figure>

<p><code>my-module</code> 模块就会被安装在 <code>node_mnodules</code> 文件夹中，此时，你就可以使用导入语法导入她了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;my-module&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这在编写自己的模块，需要测试的时候尤其有用。</p>
<h2 id="npm-home，npm-repo"><a href="#npm-home，npm-repo" class="headerlink" title="npm home，npm repo"></a>npm home，npm repo</h2><p><code>npm home</code> 命令可以打开一个模块的主页，<code>npm repo</code> 命令则是打开一个模块的代码仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm home &lt;package name&gt;</span><br><span class="line">$ npm repo &lt;package name&gt;</span><br></pre></td></tr></table></figure>
<p>这两个命令不需要模块先安装。</p>
<h2 id="npm-outdated"><a href="#npm-outdated" class="headerlink" title="npm outdated"></a>npm outdated</h2><p><code>npm outdated</code> 命令检查当前项目所依赖的模块，是否已经有新版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm outdated</span><br></pre></td></tr></table></figure>

<p>它会输出当前版本（current version）、应当安装的版本（wanted version）和最新发布的版本（latest version）。</p>
<blockquote>
<p>注：(wanted version) 是根据 package.json 文件中的依赖字段申明的<code>语义化版本规则</code>推算出来的。详见下方的<code>语义化版本规则</code> 查看说明。</p>
</blockquote>
<h2 id="npm-prune"><a href="#npm-prune" class="headerlink" title="npm prune"></a>npm prune</h2><p><code>npm prune</code> 检查当前项目的<code>node_modules</code>目录中，是否有package.json里面没有提到的模块，然后将所有这些模块输出在命令行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm prune</span><br></pre></td></tr></table></figure>

<h2 id="npm-shrinkwrap"><a href="#npm-shrinkwrap" class="headerlink" title="npm shrinkwrap"></a>npm shrinkwrap</h2><p><code>npm shrinkwrap</code> 的作用是锁定当前项目的依赖模块的版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm shrinkwrap</span><br></pre></td></tr></table></figure>

<p>运行该命令后，会在当前项目的根目录下生成一个<code>npm-shrinkwrap.json</code>文件，内容是<code>node_modules</code>目录下所有已经安装的模块，以及它们的精确版本。</p>
<p>下次运行<code>npm install</code>命令时，<code>npm</code>发现当前目录下有<code>npm-shrinkwrap.json</code>文件，就会只安装里面提到的模块，且版本也会保持一致。</p>
<h2 id="npm-owner"><a href="#npm-owner" class="headerlink" title="npm owner"></a>npm owner</h2><p>模块的维护者可以发布新版本。<code>npm owner</code> 命令用于管理模块的维护者。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出指定模块的维护者</span></span><br><span class="line">$ npm owner <span class="built_in">ls</span> &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增维护者</span></span><br><span class="line">$ npm owner add &lt;user&gt; &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除维护者</span></span><br><span class="line">$ npm owner <span class="built_in">rm</span> &lt;user&gt; &lt;package name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="npm-deprecate"><a href="#npm-deprecate" class="headerlink" title="npm deprecate"></a>npm deprecate</h2><p>如果想废弃某个版本的模块，可以使用<code>npm deprecate</code>命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm deprecate my-thing@<span class="string">&quot;&lt; 0.2.3&quot;</span> <span class="string">&quot;critical bug fixed in v0.2.3&quot;</span></span><br></pre></td></tr></table></figure>
<p>运行上面的命令以后，小于0.2.3版本的模块的package.json都会写入一行警告，用户安装这些版本时，这行警告就会在命令行显示。</p>
<h2 id="npm-adduser"><a href="#npm-adduser" class="headerlink" title="npm adduser"></a>npm adduser</h2><p><code>npm adduser</code>用于在<code>npmjs.com</code>注册一个用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm adduser</span><br><span class="line">Username: YOUR_USER_NAME</span><br><span class="line">Password: YOUR_PASSWORD</span><br><span class="line">Email: YOUR_EMAIL@domain.com</span><br></pre></td></tr></table></figure>

<h2 id="npm-login"><a href="#npm-login" class="headerlink" title="npm login"></a>npm login</h2><p>用于登陆<code>npm</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm login</span><br></pre></td></tr></table></figure>

<h2 id="npm-publish"><a href="#npm-publish" class="headerlink" title="npm publish"></a>npm publish</h2><p>登陆过后可以使用 <code>npm publish</code> 发布一个版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm publish</span><br></pre></td></tr></table></figure>

<p>如果当前模块是一个beta版，比如1.3.1-beta.3，那么发布的时候需要使用tag参数，将其发布到指定标签，默认的发布标签是latest。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm publish --tag beta</span><br></pre></td></tr></table></figure>



<h1 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h1><p>每个项目的根目录下面，一般都有一个<code>package.json</code>文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。<code>npm install</code>命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。</p>
<p><code>package.json</code> 文件至少要有两部分内容：</p>
<ul>
<li>name</li>
</ul>
<p>全部小写，没有空格，可以使用下划线或者横线。</p>
<ul>
<li>version</li>
</ul>
<p>x.x.x 的格式，符合<code>语义化版本规则</code>。</p>
<p>例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>其他内容：</p>
<ul>
<li><p>description：描述信息，有助于搜索</p>
</li>
<li><p>main: 入口文件，一般都是 index.js</p>
</li>
<li><p>scripts：支持的脚本，默认是一个空的 test</p>
</li>
<li><p>keywords：关键字，有助于在人们使用 npm search 搜索时发现你的项目</p>
</li>
<li><p>author：作者信息</p>
</li>
<li><p>license：默认是 MIT</p>
</li>
<li><p>bugs：当前项目的一些错误信息，如果有的话</p>
</li>
<li><p>dependencies：项目生产过程中的依赖包</p>
</li>
<li><p>devDependencies：项目开发、测试过程中的依赖包 </p>
</li>
<li><p>homepage: 该包的项目主页地址</p>
</li>
</ul>
<p>例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a vue project&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node build/build.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server build/webpack.dev.conf.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run dev&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;vue&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hongwenqing&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.5.17&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~3.0.1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;babel-core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.14.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;babel-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.2.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;babel-preset-es2015&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.18.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vue-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.13.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span><span class="string">&quot;^3.1.10&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.github.com/yisibell/hello-npm-test.git&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="语义化版本规则"><a href="#语义化版本规则" class="headerlink" title="语义化版本规则"></a>语义化版本规则</h1><p><a href="https://docs.npmjs.com/about-semantic-versioning">官方说明地址</a></p>
<p><code>dependencies</code> 或 <code>devDependencies</code>  的内容，以 <code>&quot;vue&quot;: &quot;^2.5.17&quot;</code> 为例，我们知道 <code>key</code> 是依赖的包名称，<code>value</code> 是这个包的版本。那版本前面的<code>^</code> 、<code>~</code>或者版本直接是一个 <code>*</code> 是什么意思呢？</p>
<p>这就是 <code>npm</code> 的 <code>Semantic versioning</code>，简称 <code>Semver</code>，中文含义即<strong>语义化版本规则</strong>。这些特殊符号被称作 <code>semver 通配符</code> 。</p>
<p>在开发中我们有过这样的经验：有时候依赖的包升级后大改版，之前提供的接口不见了，这对使用者的项目可能造成极大的影响。</p>
<p>因此我们在声明对某个包的依赖时需要指明是否允许 <code>update</code> 到新版本，什么情况下允许更新，<code>npm</code> 包提供者需要了解的 Semantic versioning 语义化版本规则。版本由三部分组成：X，Y，Z，分别是主要版本，次要版本和补丁版本。</p>
<blockquote>
<p>作为包的开发者，应该从 1.0.0 版本开始。以后要升级版本应该遵循以下标准：</p>
</blockquote>
<ul>
<li>补丁版本：解决了 <code>Bug</code> 或者一些较小的更改，增加最后一位数字，比如 <code>1.0.1</code></li>
<li>小版本：增加了新特性，同时不会影响之前的版本，增加中间一位数字，比如 <code>1.1.0</code></li>
<li>大版本：大改版，无法兼容之前的，增加第一位数字，比如 <code>2.0.0</code></li>
</ul>
<blockquote>
<p>作为包的使用者，可以针对自己的需要填写依赖包的版本规则：</p>
</blockquote>
<p>作为使用者，我们可以在 <code>package.json</code> 文件中写明我们可以接受这个包的更新程度（假设当前依赖的是 1.0.4 版本）：</p>
<p>如果不打算更新任何版本，也就是只使用固定版本的包，可以这么写：</p>
<ul>
<li>1.0.4</li>
</ul>
<p>如果只打算接受补丁版本的更新（也就是最后一位的改变），就可以这么写： </p>
<ul>
<li><p>1.0</p>
</li>
<li><p>1.0.x</p>
</li>
<li><p>~1.0.4</p>
</li>
</ul>
<p>如果接受小版本的更新（第二位的改变），就可以这么写： </p>
<ul>
<li><p>1</p>
</li>
<li><p>1.x</p>
</li>
<li><p>^1.0.4</p>
</li>
</ul>
<p>如果可以接受大版本的更新（自然接受小版本和补丁版本的改变），就可以这么写： </p>
<ul>
<li><ul>
<li></li>
</ul>
</li>
<li><p>x</p>
</li>
</ul>
<h1 id="package-lock-json文件"><a href="#package-lock-json文件" class="headerlink" title="package-lock.json文件"></a>package-lock.json文件</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <code>package.json</code> 中定义这样的依赖项的真正好处是，任何有权访问 <code>package.json</code> 的人都可以创建一个包含运行应用程序所需模块的依赖项文件夹，但是让我们来看看事情可能出错的具体方式。</p>
<p>假设我们创建了一个将使用 <code>vue</code> 的新项目。我们安装了 <code>vue</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install vue --save</span><br></pre></td></tr></table></figure>

<p>在安装时，<code>vue</code> 的最新版本是<code>2.5.17</code>，所以 <code>“vue”：“^2.5.17”</code> 作为我的<code>package.json</code>中的依赖项添加，并且我的电脑安装了确切的版本。</p>
<p>现在也许明天，<code>vue</code> 的维护者会发布 <code>bug</code> 修复或新特性的添加，发布后的最新版本变为<code>2.6.0</code>。 显然，根据版本号的变化，我们知道，这是新增了新的特性了，<code>vue</code> 的这个版本添加 <code>v-slot</code> 指令，用于逐步替换掉 <code>2.5.x</code> 版本的 <code>slot-scope</code> 特性，并且计划在 <code>3.x</code>版本完全去除 <code>slot-scope</code> 特性。</p>
<p>然后，如果有人想要为我的项目做贡献，他们会克隆它，然后运行<code>npm install</code>。因 <code>2.6.0</code>是具有相同主要版本的更高版本，所以为它们安装。 我们都安装 <code>vue</code> ，但我们却是不同的版本。</p>
<p>从理论上讲，它们应该仍然是兼容的，但也许 bugfix 会影响我们正在使用的功能，而且当使用<code>vue</code>版本<code>2.5.17</code>和<code>2.6.0</code>运行时，我们的应用程序可能会产生不同的结果。（虽然 <code>vue</code> 的这次版本更新兼顾到了 <code>2.5.x</code> 的版本，你依然可以使用 <code>slot-scope</code> 特性，但其他库可就不一定了）。</p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p><code>package-lock.json</code> 的目的是避免上述情况，其中从同一 <code>package.json</code> 安装模块会导致两种不同的安装。 在 <code>npm</code> 版本 <code>5.x.x</code> 中添加了 <code>package-lock.json</code>，因此如果你使用的是主要版本 <code>5</code> 或更高版本，除非禁用它，否则它会自动生成。</p>
<h2 id="内容结构"><a href="#内容结构" class="headerlink" title="内容结构"></a>内容结构</h2><p><code>package-lock.json</code> 是<code>package.json</code> 中列出的每个依赖项的大型列表，应安装的特定版本，模块的位置（URI），验证模块完整性的哈希，它需要的包列表 ，以及依赖项列表。 让我们来看看 <code>vue</code> 的列表是什么：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.5.17&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://registry.npmjs.org/vue/-/vue-2.5.17.tgz&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;integrity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha512-mFbcWoDIJi0w0Za4emyLiW72Jae0yjANHbCVquMKijcavBGypqlF7zHRgMa5k4sesdv7hv2rB4JPdZfR+TPfhQ==&quot;</span></span><br><span class="line">   <span class="attr">&quot;requires&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>


<p><code>npm(^5.x.x)</code> 之后的做法，<code>npm</code> 使用<code>package-lock.json</code>，而不是使用<code>package.json</code> 来解析和安装模块。也就是说，当你使用 <code>npm install</code> 安装所有项目依赖时，<code>npm</code> 会根据 <code>package-lock.json</code> 文件中各模块包的 <code>version</code> 字段来安装特定版本的依赖包。</p>
<p>因为 <code>package-lock.json</code> 为每个模块及其每个依赖项指定了版本，位置和完整性哈希，所以它每次创建的安装都是相同的。 无论你使用什么设备，或者将来安装它都无关紧要，每次都应该给你相同的结果，这非常有用。</p>
<p>如果我们想要更新 <code>vue</code> 的版本怎么办呢？常规操作是：</p>
<ul>
<li><code>npm outdated vue</code> 查看 <code>vue</code> 的最新变动。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm outdated vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下方为打印结果</span></span><br><span class="line">Package  Current  Wanted  Latest  Location</span><br><span class="line">vue       2.5.17   2.6.9   2.6.9  demo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看出，<code>vue</code> 的最新版本变为 <code>2.6.9</code> 了。于是我们可以使用 <code>npm update</code> 命令来更新 <code>vue</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm update vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">+ vue@2.6.9</span><br><span class="line">updated 1 package <span class="keyword">in</span> 1.8s</span><br></pre></td></tr></table></figure>

<p>现在 <code>package-lock.json</code> 文件中 <code>vue</code> 的变化。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.6.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://registry.npmjs.org/vue/-/vue-2.6.9.tgz&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;integrity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha512-t1+tvH8hybPM86oNne3ZozCD02zj/VoZIiojOBPJLjwBn7hxYU5e1gBObFpq8ts1NEn1VhPf/hVXBDAJ3X5ljg==&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>没错！她现在已经被锁定为 <code>2.6.9</code> 的版本了。此时，你应该将你的 <code>package-lock.json</code> 和 <code>package.json</code> 变更提交到代码控制仓库，这时，当你的同事 <code>pull</code> 代码的时候，发现这两个文件发生了变化，那么他应该重新执行 <code>npm install</code> ，已确保他项目的 <code>node_modules</code> 中的所有依赖与其他开发人员一致。</p>
<blockquote>
<p>能够触发 <code>package-lock.json</code> 文件变更的操作。</p>
</blockquote>
<ul>
<li>手动修改 <code>package.json</code> 中依赖包的版本号，然后执行 <code>npm install</code> （不推荐）。</li>
<li>使用 <code>npm update [package name[@version]]</code> 来更新包。（推荐）</li>
</ul>
]]></content>
      <categories>
        <category>npm相关</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>package-lock.json</tag>
        <tag>package.json</tag>
        <tag>Semver(语义化版本规则)</tag>
      </tags>
  </entry>
  <entry>
    <title>sass语法</title>
    <url>/2018/04/14/sass/sass/</url>
    <content><![CDATA[<p>记录 css 预编译语言 sass 的 基本使用。<br>sass使用编程式的写法，赋予 css 更强的生命力。</p>
<span id="more"></span>

<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><strong>单行注释</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这是单行注释，编译时，不会被编译进 .css 文件</span><br></pre></td></tr></table></figure>

<p><strong>多行注释</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 这是多行注释 ，编译时，会被一同 编译进 .css 文件*/</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>sass 使用 <code>$</code> 符号开头定义 变量名 ， 使用 <code>:</code> 赋值。</p>
<p><strong>例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$color: red;</span><br><span class="line"></span><br><span class="line">.fc&#123;</span><br><span class="line">  color: $color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fc</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>sass 支持 <code>+ - * / %</code> 运算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.w&#123;</span><br><span class="line">  width: 50px + 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h2><p>sass 支持 选择器 嵌套书写，同时支持 属性嵌套书写。</p>
<h3 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  span&#123;</span><br><span class="line">    color: rosybrown;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: rosybrown; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h3><p>属性嵌套时，属性名后必须加 <code>:</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.far&#123;</span><br><span class="line">  border: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line">    width: 1px;</span><br><span class="line">    color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.far</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: pink; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-amp-引用父元素"><a href="#使用-amp-引用父元素" class="headerlink" title="使用 &amp; 引用父元素"></a>使用 <code>&amp;</code> 引用父元素</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.far &#123;</span><br><span class="line">  a&#123;</span><br><span class="line">    color: #000;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.far</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>; &#125;</span><br><span class="line">  <span class="selector-class">.far</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>使用 @extend 命令实现继承，允许一个选择器继承另一个选择器的样式。比如：继承 .foo 类 的样式 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.foo&#123;</span><br><span class="line">  height : 500px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.test&#123;</span><br><span class="line">  width : 200px;</span><br><span class="line">  @extend .foo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span>, <span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h2><p>混合，通过 @mixin 命令定义 样式块 ， 使用 @include 命令包含引入 定义过的 样式块，达到样式代码<br>复用的作用。Mixin有点像C语言的宏（macro），是可以重用的代码块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@mixin baz &#123;</span><br><span class="line">　float: left;</span><br><span class="line">　margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">  @include baz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  　<span class="attribute">float</span>: left;</span><br><span class="line">  　<span class="attribute">margin-left</span>: <span class="number">10px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="带参数的Mixin"><a href="#带参数的Mixin" class="headerlink" title="带参数的Mixin"></a>带参数的Mixin</h3><p>跟其他编程语言一样， mixin 可以 定义 形参。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@mixin bar( $w , $s , $c) &#123;</span><br><span class="line">  border: $w $s $c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">  @include bar(1px , solid , red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h2><p>@import 用来插入外部文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &#x27;./a.scss&#x27;;</span><br></pre></td></tr></table></figure>

<h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="@if 条件语句"></a>@if 条件语句</h2><p>使用 <code>@if , @else if , @else</code> 命令来定义条件语句块。</p>
<p><strong>例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">span &#123;</span><br><span class="line">  @if 1+1 ==2 &#123; color: red;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$temp : 2px;</span><br><span class="line">p &#123;</span><br><span class="line">  @if 2px &gt; $temp &#123; color: red&#125;</span><br><span class="line">  @else if 3px &gt; $temp &#123; color: pink&#125;</span><br><span class="line">  @else &#123; color: skyblue&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="for循环"><a href="#for循环" class="headerlink" title="@for循环"></a>@for循环</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@for $i from 5 to 10&#123; </span><br><span class="line">  </span><br><span class="line">  .mb-#&#123;$i&#125;&#123;</span><br><span class="line">    margin-bottom: #&#123;$i&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mb-5</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mb-6</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">6px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mb-7</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">7px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mb-8</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">8px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mb-9</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">9px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="while循环"><a href="#while循环" class="headerlink" title="@while循环"></a>@while循环</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$total: 55;</span><br><span class="line"></span><br><span class="line">@while $total &gt;= 5 &#123;</span><br><span class="line">  .mt-#&#123;$total&#125;&#123;</span><br><span class="line">    margin-top: #&#123;$total&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $total: $total - 5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mt-55</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">55px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-50</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-45</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">45px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-40</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">40px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-35</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">35px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-30</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-25</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">25px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-20</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-15</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">15px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-10</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-5</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="each遍历"><a href="#each遍历" class="headerlink" title="@each遍历"></a>@each遍历</h2><p>作用与 @for 相似。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@each $value in 5,10,15,20&#123;</span><br><span class="line">  .pt-#&#123;$value&#125;&#123;</span><br><span class="line">    padding-top: #&#123;$value&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pt-5</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">5px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pt-10</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pt-15</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">15px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pt-20</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="function自定义函数"><a href="#function自定义函数" class="headerlink" title="@function自定义函数"></a>@function自定义函数</h2><p>使用 @function 定义一个函数 , @return 后接返回值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@function step($n)&#123;</span><br><span class="line">  @return $n * 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">  width: step(5px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编译结果:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h1 id="编译方式"><a href="#编译方式" class="headerlink" title="编译方式"></a>编译方式</h1><h2 id="koala图形界面工具"><a href="#koala图形界面工具" class="headerlink" title="koala图形界面工具"></a>koala图形界面工具</h2><p>koala 是一款国人开发的，用来将 sass &#x2F; less 文件 编译成 浏览器可执行的 .css文件的一款图形界面的 css 预编译工具。详细使用方式请查阅其官网: <a href="https://koala-app.com/">https://koala-app.com</a></p>
<h2 id="webpack构建工具"><a href="#webpack构建工具" class="headerlink" title="webpack构建工具"></a>webpack构建工具</h2><p><code>node-sass</code> <code>sass-loader</code></p>
]]></content>
      <categories>
        <category>css预编译</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>基于sass的样式工具</title>
    <url>/2018/04/15/sass/scss-util/</url>
    <content><![CDATA[<p><code>scss</code> 实用工具样式，开箱即用。</p>
<span id="more"></span>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$color-primary</span>: <span class="number">#F56C6C</span>;</span><br><span class="line"><span class="variable">$color-danger</span>: <span class="number">#409EFF</span>;</span><br><span class="line"><span class="variable">$color-info</span>: <span class="number">#909399</span>;</span><br><span class="line"><span class="variable">$color-success</span>: <span class="number">#67C23A</span>;</span><br><span class="line"><span class="variable">$color-warning</span>: <span class="number">#E6A23C</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.f-l</span>&#123;</span><br><span class="line">  <span class="attribute">float</span><span class="selector-pseudo">:left</span> !important;</span><br><span class="line">  _display: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.f-r</span>&#123;</span><br><span class="line">  <span class="attribute">float</span><span class="selector-pseudo">:right</span> !important;</span><br><span class="line">  _display: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-r</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-l</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-c</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行溢出省略号...</span></span><br><span class="line"><span class="selector-class">.text-overflow-1</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行溢出省略号...</span></span><br><span class="line"><span class="selector-class">.text-overflow-2</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;  </span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block-center</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxsizing-border</span>&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹性布局</span></span><br><span class="line"><span class="selector-class">.flex</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;  <span class="comment">//单行放不下时换行</span></span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;  <span class="comment">//交叉轴从轴开始的位置开始排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主轴对齐方式-居中对齐</span></span><br><span class="line"><span class="selector-class">.justify-c</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.justify-start</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// margin-* padding-* 的快捷类使用  0---45px</span></span><br><span class="line"><span class="variable">$total</span>: <span class="number">45</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$total</span> &gt;= <span class="number">0</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.mt-</span>#&#123;<span class="variable">$total</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: #&#123;<span class="variable">$total</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.mr-</span>#&#123;<span class="variable">$total</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: #&#123;<span class="variable">$total</span>&#125;px;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.mb-</span>#&#123;<span class="variable">$total</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: #&#123;<span class="variable">$total</span>&#125;px;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.ml-</span>#&#123;<span class="variable">$total</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: #&#123;<span class="variable">$total</span>&#125;px;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pt-</span>#&#123;<span class="variable">$total</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: #&#123;<span class="variable">$total</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pr-</span>#&#123;<span class="variable">$total</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: #&#123;<span class="variable">$total</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pb-</span>#&#123;<span class="variable">$total</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: #&#123;<span class="variable">$total</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pl-</span>#&#123;<span class="variable">$total</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: #&#123;<span class="variable">$total</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$total</span>: <span class="variable">$total</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字体颜色</span></span><br><span class="line"><span class="selector-class">.fc-primary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color-primary</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fc-danger</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color-danger</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字体大小</span></span><br><span class="line"><span class="variable">$total-f</span>: <span class="number">30</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$total-f</span> &gt;= <span class="number">8</span> &#123;</span><br><span class="line">  <span class="selector-class">.f-</span>#&#123;<span class="variable">$total-f</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:  #&#123;<span class="variable">$total-f</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$total-f</span>: <span class="variable">$total-f</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// label</span></span><br><span class="line"><span class="selector-class">.h-label</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4A4A4A</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line"> </span><br><span class="line">  &amp;<span class="selector-class">.h-star</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F56C6C</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.h-text</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4A4A4A</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>sass相关</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>样式工具</tag>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在javascript和sass之间共享变量</title>
    <url>/2020/02/27/webpack/how-to-share-var-between-javascript-and-sass/</url>
    <content><![CDATA[<p>在编程开发中，<strong>变量共享</strong>一直是程序员们所热爱的东西，因为我们都最求<strong>极简主义</strong>，代码的高<strong>可维护性</strong>。这篇短文将介绍一种在 <code>javascript</code> 和 <code>sass</code> 之间进行变量共享的实现方式。</p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们都知道，同语言之间实现变量共享是很简单的，因为他们都有自己的<strong>模块机制</strong>。</p>
<p><code>javascript</code> 中有 <code>ES Modules</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p><code>sass</code> 中有 <code>@import</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// variables.scss</span></span><br><span class="line"><span class="variable">$--color-prey</span>: <span class="number">#ddd</span>; </span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./variables.scss&#x27;</span></span><br><span class="line"></span><br><span class="line">.fc-prey &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$--color-prey</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但，当我们想要在 <code>b.js</code> 中使用 <code>variables.scss</code> 中的变量时，看起来好像没那么简单。</p>
<p>幸运的是，当有了 <a class="fc-danger" href="https://webpack.js.org/"> webpack </a> 和 <a class="fc-danger" href="https://github.com/css-modules/css-modules"> CSS Modules </a> 后，一切都变得简单起来了。接下来，开始讲解如何去实现它。</p>
<img src="https://gitee.com/elenhong/elenh-blog-hexo/raw/master/assets/webpack/sass-webpack-js-hero.webp" />

<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先确保你的项目是工程化的，基于 <code>webpack</code> 构建的。你可以自行搭建，也可以使用现有的脚手架，比如 <code>@vue/cli</code> 、<code>create-react-app</code> 、<code>create-nuxt-app</code> 等。</p>
<p>然后确保安装了 <code>sass</code> 的编译器和对应 <code>loader</code>。你可以使用以下的任一种方式安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i node-sass sass-loader -D</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 dart 作为 sass 编译器依赖</span></span><br><span class="line">$ npm i sass sass-loader -D</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>为了方便，我们直接使用 <code>@vue/cli</code> 进行构建。</p>
<p>现在，我们在项目中新建一个 <code>variables.scss</code> 文件，来定义样式变量。得益于 <code>CSS Modules</code>，我们可以在 <code>variables.scss</code> 中使用 <code>:export</code> 指令来向 <code>javascript</code> 导出变量，这就像 <code>es6</code> 中的 <code>export</code> 关键字一样。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @/styles/variables.scss</span></span><br><span class="line"><span class="variable">$--color-primary</span>: skyblue;</span><br><span class="line"><span class="variable">$--border-width</span>: <span class="number">2px</span>;</span><br><span class="line"></span><br><span class="line">:export &#123;</span><br><span class="line">  colorPrimary: <span class="variable">$--color-primary</span>;</span><br><span class="line">  borderWidth: <span class="variable">$--border-width</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上所示，该 <code>scss</code> 文件向外导出了一个 <code>javascript</code> 对象。类似于这样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">colorPrimary</span>: <span class="string">&#x27;skyblue&#x27;</span>,</span><br><span class="line">  <span class="attr">borderWidth</span>: <span class="string">&#x27;2px&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，我们就可以这样使用它。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;color: styleVar.colorPrimary&#125;&quot;</span>&gt;</span>CSS Modules<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> styleVariables <span class="keyword">from</span> <span class="string">&#x27;@/styles/variables.scss&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">styleVar</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> styleVariables</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开浏览器，你会看到有着 <code>skyblue</code> 字体颜色的 <strong>CSS Modules</strong> 文本。Yep！</p>
<p>好了，这就是这篇短文的全部内容了，玩的开心！</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>sass</tag>
        <tag>CSS Modules</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>YAML语法说明</title>
    <url>/2020/03/09/yaml/index/</url>
    <content><![CDATA[<p>现代编程中，少不了编写配置文件，常用的配置文件编写格式有：<code>xml</code>，<code>json</code>，在前端工程化开发中，甚至还有使用 <code>js</code> 作为配置文件的。<br>本文将介绍一种更适合编写配置的语言 <code>YAML（Yet Another Markup Language）</code>。并记录其标准语法。</p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>YAML</strong> 的语法和其他高级语言类似，并且可以简单表达 <code>清单（数组）、散列表（对象），标量（纯量）</code> 等数据形态。它使用 <strong>空白符号</strong> 缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和 <strong>YAML</strong> 非常接近）。</p>
<p><strong>YAML</strong> 的配置文件后缀为 <code>.yml</code>，如：<code>_config.yml</code> 。</p>
<h1 id="基本语法规则"><a href="#基本语法规则" class="headerlink" title="基本语法规则"></a>基本语法规则</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 大小写敏感。</span><br><span class="line">2. 使用缩进表示层级关系。</span><br><span class="line">3. 缩进时不允许使用 Tab 键，只允许使用空格。</span><br><span class="line">4. 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可。</span><br><span class="line">5. 键值对之间，一定要存在空格。</span><br></pre></td></tr></table></figure>

<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>在 <code>YAML</code> 中，使用 <code>#</code> 进行注释标识。以 <code>#</code> 开头的行都会被解析器忽略。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我是一行注释</span></span><br></pre></td></tr></table></figure>

<h1 id="支持的数据结构"><a href="#支持的数据结构" class="headerlink" title="支持的数据结构"></a>支持的数据结构</h1><p><code>YAML</code> 支持的数据结构有 <strong>3</strong> 种。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</span><br><span class="line">数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</span><br><span class="line">纯量（scalars）：单个的、不可再分的值</span><br></pre></td></tr></table></figure>

<p>接下来，介绍他们各自的书写语法。并以 <a href="https://github.com/nodeca/js-yaml" class="fc-danger"> js-yaml </a> 的实现为例进行讲解。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>在 <code>YAML</code> 中，对象的一组键值对，使用 <code>:</code> 冒号结构进行表示。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">foo:</span> <span class="string">hello</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure>

<p>转换为 <code>javascript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;hello yaml&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了使用上面的语法，还支持将所有键值对写成一个行内对象的形式。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">foo:</span> &#123; <span class="attr">name:</span> <span class="string">little</span> <span class="string">hong</span>, <span class="attr">age:</span> <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure>

<p>转换为 <code>javascript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;little hong&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在 <code>YAML</code> 中，使用一组连词线 <code>-</code> 开头的行，构成一个数组。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">little</span> <span class="string">hong</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">elenh</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yisibell</span></span><br></pre></td></tr></table></figure>

<p>转换为 <code>javascript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;little hong&#x27;</span>, <span class="string">&#x27;elenh&#x27;</span>, <span class="string">&#x27;yisibell&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>如果想继续嵌套层级，使其有多维数组形式，可以使用 <strong>空格</strong> （注意，不可使用 <code>Tab</code> 键）进行表示。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> </span><br><span class="line"> <span class="bullet">-</span> <span class="string">little</span> <span class="string">hong</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">elenh</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">yisibell</span></span><br></pre></td></tr></table></figure>

<p>转换为 <code>javascript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="string">&#x27;little hong&#x27;</span>, <span class="string">&#x27;elenh&#x27;</span>, <span class="string">&#x27;yisibell&#x27;</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>同样的，数组类型，也可以使用行内表示方式。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">elenh:</span> [<span class="string">little</span>, <span class="string">hong</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure>

<p>转换为 <code>javascript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">elenh</span>: [<span class="string">&#x27;little&#x27;</span>, <span class="string">&#x27;hong&#x27;</span>, <span class="number">18</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复合结构"><a href="#复合结构" class="headerlink" title="复合结构"></a>复合结构</h2><p>对象，数组可以结合使用，形成复合结构。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">languages:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Python</span> </span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line"> <span class="attr">YAML:</span> <span class="string">yaml.org</span> </span><br><span class="line"> <span class="attr">Ruby:</span> <span class="string">ruby-lang.org</span> </span><br><span class="line"> <span class="attr">Python:</span> <span class="string">python.org</span> </span><br><span class="line"> <span class="attr">Perl:</span> <span class="string">use.perl.org</span> </span><br></pre></td></tr></table></figure>

<p>转换为 <code>javascript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">languages</span>: [ <span class="string">&#x27;Ruby&#x27;</span>, <span class="string">&#x27;Perl&#x27;</span>, <span class="string">&#x27;Python&#x27;</span> ],</span><br><span class="line">  <span class="attr">websites</span>: &#123; </span><br><span class="line">    <span class="attr">YAML</span>: <span class="string">&#x27;yaml.org&#x27;</span>,</span><br><span class="line">    <span class="title class_">Ruby</span>: <span class="string">&#x27;ruby-lang.org&#x27;</span>,</span><br><span class="line">    <span class="title class_">Python</span>: <span class="string">&#x27;python.org&#x27;</span>,</span><br><span class="line">    <span class="title class_">Perl</span>: <span class="string">&#x27;use.perl.org&#x27;</span> </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h2><p>纯量是最基本的、不可再分的值。以下数据类型都属于 <strong>JavaScript</strong> 的纯量。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 字符串</span><br><span class="line">2. 布尔值</span><br><span class="line">3. 整数</span><br><span class="line">4. 浮点数</span><br><span class="line">5. Null</span><br><span class="line">6. 时间</span><br><span class="line">7. 日期</span><br></pre></td></tr></table></figure>

<h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>数值直接以字面量的形式表示。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">number:</span> <span class="number">12.30</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">number</span>: <span class="number">12.30</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>布尔值用 <code>true</code>和 <code>false</code> 表示。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">isSet:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">isSet</span>: <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p><code>null</code> 用 <code>~</code> 表示。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">parent:</span> <span class="string">~</span> </span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">parent</span>: <span class="literal">null</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>时间采用 <code>ISO8601</code> 格式。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">iso8601:</span> <span class="number">2001-12-14t21:59:43.10-05:00</span> </span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">iso8601</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2001-12-14t21:59:43.10-05:00&#x27;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>日期采用复合 <code>iso8601</code> 格式的 <strong>年、月、日</strong> 表示。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">date:</span> <span class="number">1976-07-31</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1976-07-31&#x27;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p><code>YAML</code> 允许使用 <strong>两个感叹号</strong>，<strong>强制转换</strong> 数据类型。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">e:</span> <span class="type">!!str</span> <span class="number">123</span></span><br><span class="line"><span class="attr">f:</span> <span class="type">!!str</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">e</span>: <span class="string">&#x27;123&#x27;</span>, </span><br><span class="line">  <span class="attr">f</span>: <span class="string">&#x27;true&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>字符串</strong> 是最常见，也是最复杂的一种数据类型。</p>
<p>字符串默认不使用引号表示。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">这是一行字符串</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">str</span>: <span class="string">&#x27;这是一行字符串&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>注： 如果字符串之中包含空格或特殊字符，需要放在引号之中。</p>
</div>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">&#x27;内容： 字符串&#x27;</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">str</span>: <span class="string">&#x27;内容: 字符串&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>单引号和双引号都可以使用，双引号不会对特殊字符转义。</p>
</div>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">s1:</span> <span class="string">&#x27;内容\n字符串&#x27;</span></span><br><span class="line"><span class="attr">s2:</span> <span class="string">&quot;内容\n字符串&quot;</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">s1</span>: <span class="string">&#x27;内容\\n字符串&#x27;</span>, </span><br><span class="line">  <span class="attr">s2</span>: <span class="string">&#x27;内容\n字符串&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">&#x27;labor&#x27;</span><span class="string">&#x27;s day&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">str</span>: <span class="string">&#x27;labor\&#x27;s day&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。</p>
</div>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">str:</span> <span class="string">这是一段</span></span><br><span class="line">  <span class="string">多行</span></span><br><span class="line">  <span class="string">字符串</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>avaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">str</span>: <span class="string">&#x27;这是一段 多行 字符串&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>多行字符串可以使用 <code>|</code> 保留换行符，也可以使用 <code>&gt;</code> 折叠换行。</p>
</div>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">this:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string">  Bar</span></span><br><span class="line"><span class="string"></span><span class="attr">that:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string">  Bar</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">this</span>: <span class="string">&#x27;Foo\nBar\n&#x27;</span>, </span><br><span class="line">  <span class="attr">that</span>: <span class="string">&#x27;Foo Bar\n&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p><code>+</code> 表示保留文字块末尾的换行，<code>-</code> 表示删除字符串末尾的换行。</p>
</div>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">s1:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">s2:</span> <span class="string">|+</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="attr">s3:</span> <span class="string">|-</span></span><br><span class="line">  <span class="string">Foo</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">s1</span>: <span class="string">&#x27;Foo\n&#x27;</span>, </span><br><span class="line">  <span class="attr">s2</span>: <span class="string">&#x27;Foo\n\n\n&#x27;</span>, </span><br><span class="line">  <span class="attr">s3</span>: <span class="string">&#x27;Foo&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字符串之中可以插入 <code>HTML</code> 标记。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">message:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&lt;p</span> <span class="string">style=&quot;color:</span> <span class="string">red&quot;&gt;</span></span><br><span class="line">    <span class="string">段落</span></span><br><span class="line">  <span class="string">&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;\n&lt;p style=&quot;color: red&quot;&gt;\n  段落\n&lt;/p&gt;\n&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>锚点 <code>&amp;</code> 和别名 <code>*</code>，可以用来引用。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure>

<p>等同于下面的代码。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br></pre></td></tr></table></figure>

<p><code>&amp;</code> 用来建立锚点（defaults），<code>&lt;&lt;</code> 表示合并到当前数据，<code>*</code> 用来引用锚点。</p>
<p>下面是另一个例子。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&amp;showell</span> <span class="string">Steve</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Clark</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Brian</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Oren</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">*showell</span> </span><br></pre></td></tr></table></figure>

<p>转为 <code>javaScript</code> 代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Clark&#x27;</span>, <span class="string">&#x27;Brian&#x27;</span>, <span class="string">&#x27;Oren&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<h1 id="函数和正则表达式的转换"><a href="#函数和正则表达式的转换" class="headerlink" title="函数和正则表达式的转换"></a>函数和正则表达式的转换</h1><p>这是 <a href="https://github.com/nodeca/js-yaml" class="fc-danger"> js-yaml </a> 库特有的功能，可以把函数和正则表达式转为字符串。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.yml</span></span><br><span class="line"><span class="attr">fn:</span> <span class="string">function</span> <span class="string">()</span> &#123; <span class="string">return</span> <span class="number">1</span> &#125;</span><br><span class="line"><span class="attr">reg:</span> <span class="string">/test/</span></span><br></pre></td></tr></table></figure>

<p>解析上面的 <code>example.yml</code> 文件的代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> yaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs   = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> doc = yaml.<span class="title function_">load</span>(</span><br><span class="line">    fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./example.yml&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(doc);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从 <code>javaScript</code> 对象还原到 <code>yml</code> 文件的代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> yaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs   = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="attr">reg</span>: <span class="regexp">/test/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(</span><br><span class="line">    <span class="string">&#x27;./example.yml&#x27;</span>,</span><br><span class="line">    yaml.<span class="title function_">dump</span>(obj),</span><br><span class="line">    <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">  );</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了，以上就是全部内容，玩得开心！</p>
]]></content>
      <categories>
        <category>YAML</category>
      </categories>
      <tags>
        <tag>YAML</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中的EventLoop</title>
    <url>/2019/09/04/javascript/EventLoop/EventLoop/</url>
    <content><![CDATA[<p>本文介绍 javascript 引擎中的事件循环（EventLoop）是如何工作的。</p>
<span id="more"></span>

<h1 id="数据在内存中的存储方式"><a href="#数据在内存中的存储方式" class="headerlink" title="数据在内存中的存储方式"></a>数据在内存中的存储方式</h1><p>在 javascript 中，数据类型分为 <code>基本类型</code> 和 <code>引用类型</code>。那么 <code>基础类型</code> 是存储在 <code>栈内存(stack)</code> 中的简单数据，按值存取，例如：Boolean，String，Number，undefined，null，Symbol，BigInt。</p>
<p>而 <code>引用类型</code>（Object，Function）则是存储在 <code>堆内存(heap)</code> 中，并在 <code>栈内存</code> 中存储着该 <code>引用类型</code> 数据的一个引用，指向该数据在 <code>堆内存</code> 的存储地址。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">14</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&#x27;hello&#x27;</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中各变量在内存中的存储形式如下：</p>
<img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g6nk13b1jmj30jq0gndg8.jpg" />


<h1 id="执行栈（call-stack）"><a href="#执行栈（call-stack）" class="headerlink" title="执行栈（call stack）"></a>执行栈（call stack）</h1><p>javascript 中，变量声明，函数调用都会按照程序的逻辑依次被压入栈内执行。</p>
<p>观察下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcSquare</span>(<span class="params">n</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">multiply</span>(n, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printSquare</span>(<span class="params">n</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> result = <span class="title function_">calcSquare</span>(n);</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printSquare</span>(<span class="number">4</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们在主程序 <code>main.js</code> 中依次定义了 <code>multiply</code> , <code>calcSquare</code> 和 <code>printSquare</code> 这3个函数。在 <code>printSquare</code> 中调用了 <code>calcSquare</code>，而 <code>calcSquare</code> 中又调用了 <code>multiply</code>。</p>
<p>主程序开始后，<code>printSquare()</code> 首先被压入执行栈，随后 <code>calcSquare()</code> 压入执行栈，最后是 <code>multiply()</code>。</p>
<p>栈具有 <code>先进后出，后进先出</code> 的特点，所以位于栈顶的函数先执行，依次类推。</p>
<p>以下是进栈后的情况：</p>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g6nk15w7mmj30xt0iowg5.jpg" />

<p>现在，让我们看看上面代码在执行栈内执行的动态示意图：</p>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g6nl7gf50vg30go099q7o.gif" />


<h1 id="栈内异常"><a href="#栈内异常" class="headerlink" title="栈内异常"></a>栈内异常</h1><p>如果代码在栈内执行遇到错误，javascript 引擎会抛出如下错误，并终止主程序的继续执行。</p>
<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g6nk15gdm1j30xy0h8aci.jpg" />


<h1 id="栈满错误"><a href="#栈满错误" class="headerlink" title="栈满错误"></a>栈满错误</h1><p>有时，由于程序过于庞大或代码编写失误，导致栈内任务剧增，使得执行栈满，javascript 引擎会抛出如下错误。</p>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g6nk14uqewj30vw0ij0vo.jpg" />


<h1 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h1><p>在主线程执行栈中，只能存在同步代码。也就是说，在执行栈中的任务都是同步任务。如果存在耗时较长的同步任务，那么我们的程序就会阻塞，直到上一个任务完成才会继续向下执行。</p>
<p>例如下面这样的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = $.<span class="title function_">getSynchronous</span>(<span class="string">&quot;/a&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = $.<span class="title function_">getSynchronous</span>(<span class="string">&quot;/b&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> c = $.<span class="title function_">getSynchronous</span>(<span class="string">&quot;/c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get data done, now log them out</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br></pre></td></tr></table></figure>

<p>在上方代码中，有3行耗时较长的同步代码，在这 3 行代码执行完之前，后面的打印操作便会一直处在等待状态（阻塞），那么在这个阻塞的事件段内，用户界面一直会处于白屏或 loading 态，这对于用户体验是很糟糕的。</p>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g6nk13yql6j30xh0i5who.jpg" />


<h1 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h1><p>观察下面的代码，思考其打印结果是什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">Hi</span><br><span class="line">World</span><br></pre></td></tr></table></figure>

<p>那么，为什么会是这样的结果呢？它的执行过程是怎么样的？</p>
<p>让我们再看一下上面代码的执行过程：</p>
<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g6nl7fw00hg30go097dim.gif" />

<p>由于执行栈中只能存在同步代码，从执行栈内的动态示意图来看，同步的 <code>console.log(&#39;Hello&#39;)</code> , <code>setTimeout(callback)</code> （callback并没有被立即执行）, <code>console.log(&#39;Hi&#39;)</code> 被一次压入了执行栈内，而 <code>setTimeout</code> 中的回调函数最后被压入执行栈中。</p>
<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><p>到这里，终于可以谈一谈 <code>事件循环</code> 了，当我们的代码中出现了异步任务时，javascript 引擎是如何工作的呢？</p>
<p>首先，javascript 引擎在完成代码解析后，将同步代码依次压入执行栈中，在遇到异步代码，例如：DOM 事件，AJAX请求，setTimeout&#x2F;setInterval 这样的异步任务时，会在异步任务完成后，将其回调函数推进一个叫做 <code>回调队列(Callback Queue)</code> 的队列中，等待执行栈内的任务结束后，再依次从 <code>回调队列</code> 的队头取出回调函数压入执行栈中继续执行。</p>
<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g6nk12gbo8j30xh0iqgq6.jpg" />


<p>再让我们站在 <code>事件循环</code> 的角度看一次上面代码的执行过程：</p>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g6nl7flieeg30go09eq82.gif" />


<h1 id="如果-setTimeout-callback-0-会是怎样？"><a href="#如果-setTimeout-callback-0-会是怎样？" class="headerlink" title="如果 setTimeout(callback, 0) 会是怎样？"></a>如果 setTimeout(callback, 0) 会是怎样？</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;there&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Welcome&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>我们直接看上面代码的执行效果：</p>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g6nl7f8kkwg30go09a0x1.gif" />


<p>没错！依然是同步的任务先执行，异步任务的回调函数依然会在异步时间到的时候被推进 <code>回调队列</code> 中，在同步任务结束后执行栈空时，<code>回调队列</code> 中的任务才会被压进 <code>执行栈</code>。</p>
<p>在这里的延时时间 <code>0</code>，并不能阻碍 <code>setTimeout()</code> 是一个异步代码，其回调函数依然会被推进 <code>回调队列</code> 中。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>EventLoop</tag>
        <tag>heap</tag>
        <tag>stack</tag>
        <tag>call stack</tag>
        <tag>callback queue</tag>
      </tags>
  </entry>
  <entry>
    <title>XMLHttpRequest2新技巧</title>
    <url>/2019/05/03/javascript/ajax/XMLHttpRequestLevel2/</url>
    <content><![CDATA[<p><code>HTML5</code> 世界中有这样一位无名英雄：<code>XMLHttpRequest</code>。严格地说，<code>XHR2</code> 并不属于 <code>HTML5</code>。不过，它是浏览器供应商对于核心平台不断做出的改进中的一部分。我之所以将 <code>XHR2</code> 加入我们新的百宝囊中，就是因为它在如今复杂的网络应用中扮演了不可或缺的角色。</p>
<span id="more"></span>

<p>结果呢，我们这位老朋友来了个大变身，很多人都不知道它的新功能了。<a href="http://dev.w3.org/2006/webapi/XMLHttpRequest-2/">2 级 XMLHttpRequest</a> 引入了大量的新功能（例如跨源请求、上传进度事件以及对上传&#x2F;下载二进制数据的支持等），一举封杀了我们网络应用中的疯狂黑客。这使得 <code>AJAX</code> 可以与很多尖端的 <code>HTML5 API</code> 结合使用，例如<a href="https://www.html5rocks.com/tutorials/file/filesystem/">File System API</a>、<a href="http://chromium.googlecode.com/svn/trunk/samples/audio/specification/specification.html">Web Audio API</a> 和 <code>WebGL</code>。</p>
<p>此教程重点介绍 <code>XMLHttpRequest</code> 中的新功能，尤其是可用于处理文件的功能。</p>
<h1 id="抓取数据"><a href="#抓取数据" class="headerlink" title="抓取数据"></a>抓取数据</h1><p>以前通过 <code>XHR</code> 抓取二进制 <code>blob</code> 形式的文件是很痛苦的事情。从技术上来说，这甚至是不可能的实现。有一种广为流传的一种技巧，是将 <code>MIME</code> 类型替换为由用户定义的字符集，如下所示：</p>
<p>提取图片的旧方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/path/to/image.png&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hack to pass bytes through unprocessed.</span></span><br><span class="line">xhr.<span class="title function_">overrideMimeType</span>(<span class="string">&#x27;text/plain; charset=x-user-defined&#x27;</span>);</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> binStr = <span class="variable language_">this</span>.<span class="property">responseText</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = binStr.<span class="property">length</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      <span class="keyword">var</span> c = binStr.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">      <span class="comment">//String.fromCharCode(c &amp; 0xff);</span></span><br><span class="line">      <span class="keyword">var</span> byte = c &amp; <span class="number">0xff</span>;  <span class="comment">// byte at offset i</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p>虽然这种方法可行，但是 <code>responseText</code> 中实际返回的并不是二进制 <code>blob</code>，而是代表图片文件的二进制字符串。我们要巧妙地让服务器在不作处理的情况下，将这些数据传递回去。虽然这个技巧有用，但是我不推荐大家走这种歪门邪道。只要是通过玩弄字符代码和字符串操控技巧，强行将数据转化成所需的格式，都会出现问题。</p>
<h2 id="指定响应格式"><a href="#指定响应格式" class="headerlink" title="指定响应格式"></a>指定响应格式</h2><p>在前一个示例中，我们通过替换服务器的 <code>MIME</code> 类型并将响应文本作为二进制字符串处理，下载了二进制“文件”形式的图片。现在，让我们利用 <code>XMLHttpRequest</code> 新增的 <code>responseType</code> 和 <code>response</code> 属性，告知浏览器我们希望返回什么格式的数据。</p>
<p><strong>xhr.responseType</strong></p>
<p>在发送请求前，根据您的数据需要，将 <code>xhr.responseType</code> 设置为 “text”、“arraybuffer”、“blob” 或 “document”。请注意，设置（或忽略）<code>xhr.responseType = &#39;&#39;</code> 会默认将响应设为 “text”。</p>
<p><strong>xhr.response</strong></p>
<p>成功发送请求后，<code>xhr</code> 的响应属性会包含 <code>DOMString</code>、<code>ArrayBuffer</code>、<code>Blob</code> 或 <code>Document</code> 形式（具体取决于 <code>responseTyp</code> 的设置）的请求数据。<br>凭借这个优秀的新属性，我们可以修改上一个示例：以 <code>ArrayBuffer</code> 而非字符串的形式抓取图片。将缓冲区移交给 <code>BlobBuilder API</code> 可创建 <code>Blob</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">BlobBuilder</span> = <span class="variable language_">window</span>.<span class="property">MozBlobBuilder</span> || <span class="variable language_">window</span>.<span class="property">WebKitBlobBuilder</span> || <span class="variable language_">window</span>.<span class="property">BlobBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/path/to/image.png&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;arraybuffer&#x27;</span>;</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> bb = <span class="keyword">new</span> <span class="title class_">BlobBuilder</span>();</span><br><span class="line">    bb.<span class="title function_">append</span>(<span class="variable language_">this</span>.<span class="property">response</span>); <span class="comment">// Note: not xhr.responseText</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> blob = bb.<span class="title function_">getBlob</span>(<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p>看，这不就好多了嘛！你觉得呢？</p>
<h2 id="ArrayBuffer-响应"><a href="#ArrayBuffer-响应" class="headerlink" title="ArrayBuffer 响应"></a>ArrayBuffer 响应</h2><p><a href="https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer">ArrayBuffer</a> 是二进制数据通用的固定长度容器。如果您需要原始数据的通用缓冲区，<code>ArrayBuffer</code> 就非常好用，但是它真正强大的功能是让您使用 &lt;&#x2F;a href&#x3D;”<a href="https://developer.mozilla.org/en/JavaScript_typed_arrays%22%3E">https://developer.mozilla.org/en/JavaScript_typed_arrays&quot;&gt;</a> JavaScript 类型数组 </a>创建底层数据的“视图”。实际上，可以通过单个 <code>ArrayBuffer</code> 来源创建多个视图。例如，您可以创建一个 <code>8</code> 位整数数组，与来自相同数据的现有 <code>32</code> 位整数数组共享同一个 <code>ArrayBuffer</code>。底层数据保持不变，我们只是创建其不同的表示方法。</p>
<p>例如，下面以 <code>ArrayBuffer</code> 的形式抓取我们相同的图片，但是现在，会通过该数据缓冲区创建无符号的 <code>8</code> 位整数数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/path/to/image.png&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;arraybuffer&#x27;</span>;</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> uInt8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="variable language_">this</span>.<span class="property">response</span>); <span class="comment">// this.response == uInt8Array.buffer</span></span><br><span class="line">  <span class="comment">// var byte3 = uInt8Array[4]; // byte at offset 4</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<h2 id="Blob-响应"><a href="#Blob-响应" class="headerlink" title="Blob 响应"></a>Blob 响应</h2><p>如果您要直接处理<a href="https://developer.mozilla.org/en/DOM/Blob"> Blob </a>且&#x2F;或不需要操作任何文件的字节，可使用 <code>xhr.responseType=&#39;blob&#39;</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">URL</span> = <span class="variable language_">window</span>.<span class="property">URL</span> || <span class="variable language_">window</span>.<span class="property">webkitURL</span>;  <span class="comment">// Take care of vendor prefixes.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/path/to/image.png&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span>;</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> blob = <span class="variable language_">this</span>.<span class="property">response</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(img.<span class="property">src</span>); <span class="comment">// Clean up after yourself.</span></span><br><span class="line">    &#125;;</span><br><span class="line">    img.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Blob</code> 可用于很多场合，包括保存到<a href="https://www.html5rocks.com/tutorials/indexeddb/todo/"> <code>indexedDB</code></a>、写入<code> HTML5</code>  <a href="https://www.html5rocks.com/tutorials/file/filesystem/">文件系统</a> 或创建 <a href="https://www.html5rocks.com/tutorials/workers/basics/#toc-inlineworkers-bloburis"><code>Blob</code> 网址</a>（如本例中所示）。</p>
</blockquote>
<h1 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h1><p>能够<a href="https://www.html5rocks.com/zh/tutorials/file/xhr2/#toc-response">下载各种格式的数据</a>固然是件好事，但是如果不能将这些丰富格式的数据送回本垒（服务器），那就毫无意义了。<code>XMLHttpRequest</code> 有时候会限制我们发送 <code>DOMString</code> 或 <code>Document</code> (XML) 数据。但是现在不会了。现已替换成经过修改的 <code>send()</code> 方法，可接受以下任何类型：<code>DOMString</code>、<code>Document</code>、<code>FormData</code>、<code>Blob</code>、<code>File</code>、<code>ArrayBuffer</code>。本部分的其余内容中的示例演示了如何使用各类型发送数据。</p>
<h2 id="发送字符串数据：xhr-send-DOMString"><a href="#发送字符串数据：xhr-send-DOMString" class="headerlink" title="发送字符串数据：xhr.send(DOMString)"></a>发送字符串数据：xhr.send(DOMString)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendText</span>(<span class="params">txt</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/server&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  xhr.<span class="title function_">send</span>(txt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sendText</span>(<span class="string">&#x27;test string&#x27;</span>);</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendTextNew</span>(<span class="params">txt</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/server&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.<span class="property">responseType</span> = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.<span class="title function_">send</span>(txt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sendText2</span>(<span class="string">&#x27;test string&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>这没有新内容，只是正确的代码段略有不同。其中设置了 <code>responseType=&#39;text&#39;</code>作为对比。再次说明，省略此行会得到同样的结果。</p>
<h2 id="提交表单：xhr-send-FormData"><a href="#提交表单：xhr-send-FormData" class="headerlink" title="提交表单：xhr.send(FormData)"></a>提交表单：xhr.send(FormData)</h2><p>很多人可能习惯于使用 <a href="http://jquery.malsup.com/form/">jQuery 插件</a>或其他库来处理 <code>AJAX</code> 表单提交。而我们可以改用 <a href="https://developer.mozilla.org/en/XMLHttpRequest/FormData"><code>FormData</code></a>，这是另一种针对 <code>XHR2</code> 设计的新数据类型。使用 <code>FormData</code> 能够很方便地实时以  <code>JavaScript</code> 创建 HTML <code>&lt;form&gt;</code>。然后可以使用 <code>AJAX</code> 提交该表单：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;johndoe&#x27;</span>);</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;id&#x27;</span>, <span class="number">123456</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/server&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line">  xhr.<span class="title function_">send</span>(formData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p> 实质上，我们只是动态创建了 <code>&lt;form&gt;</code>，并通过调用 <code>append</code> 方法为其附加了 <code>&lt;input&gt;</code> 值。</p>
</blockquote>
<p>当然，您无需从一开始就创建 <code>&lt;form&gt;</code>。<code>FormData</code> 对象可通过页面上现有的 <code>HTMLFormElement</code> 进行初始化。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;myform&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myform&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/server&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;johndoe&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return sendForm(this.form);&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendForm</span>(<span class="params">form</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(form);</span><br><span class="line"></span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;secret_token&#x27;</span>, <span class="string">&#x27;1234567890&#x27;</span>); <span class="comment">// Append extra data before send.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, form.<span class="property">action</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line">  xhr.<span class="title function_">send</span>(formData);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// Prevent page from submitting.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>HTML 表单可包含文件上传（例如 <code>&lt;input type=&quot;file&quot;&gt;</code>），而 <code>FormData</code> 也可以处理此操作。只需附加文件，浏览器就会在调用 <code>send()</code> 时构建 <code>multipart/form-data</code> 请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uploadFiles</span>(<span class="params">url, files</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, file; file = files[i]; ++i) &#123;</span><br><span class="line">    formData.<span class="title function_">append</span>(file.<span class="property">name</span>, file);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line">  xhr.<span class="title function_">send</span>(formData);  <span class="comment">// multipart/form-data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="title function_">uploadFiles</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="variable language_">this</span>.<span class="property">files</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h2 id="上传文件或-blob：xhr-send-Blob"><a href="#上传文件或-blob：xhr-send-Blob" class="headerlink" title="上传文件或 blob：xhr.send(Blob)"></a>上传文件或 blob：xhr.send(Blob)</h2><p>我们也可以使用 XHR 发送 <code>File</code> 或 <code>Blob</code>。请注意，所有 <code>File</code> 都是 <code>Blob</code>，所以在此使用两者皆可。</p>
<p>该示例使用 <code>BlobBuilder</code> API 从头开始创建新的文本文件，并将该 <code>Blob</code> 上传到服务器。该代码还设置了一个处理程序，用于通知用户上传进度：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>0% complete<span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">upload</span>(<span class="params">blobOrFile</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/server&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Listen to the upload progress.</span></span><br><span class="line">  <span class="keyword">var</span> progressBar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;progress&#x27;</span>);</span><br><span class="line">  xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">      progressBar.<span class="property">value</span> = (e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>;</span><br><span class="line">      progressBar.<span class="property">textContent</span> = progressBar.<span class="property">value</span>; <span class="comment">// Fallback for unsupported browsers.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  xhr.<span class="title function_">send</span>(blobOrFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take care of vendor prefixes.</span></span><br><span class="line"><span class="title class_">BlobBuilder</span> = <span class="variable language_">window</span>.<span class="property">MozBlobBuilder</span> || <span class="variable language_">window</span>.<span class="property">WebKitBlobBuilder</span> || <span class="variable language_">window</span>.<span class="property">BlobBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> <span class="title class_">BlobBuilder</span>();</span><br><span class="line">bb.<span class="title function_">append</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">upload</span>(bb.<span class="title function_">getBlob</span>(<span class="string">&#x27;text/plain&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="上传字节：xhr-send-ArrayBuffer"><a href="#上传字节：xhr-send-ArrayBuffer" class="headerlink" title="上传字节：xhr.send(ArrayBuffer)"></a>上传字节：xhr.send(ArrayBuffer)</h2><p>最后也是相当重要的一点就是，我们能以 XHR 的有效负载形式发送 <code>ArrayBuffer</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendArrayBuffer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/server&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> uInt8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">  xhr.<span class="title function_">send</span>(uInt8Array.<span class="property">buffer</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="跨源资源共享-CORS"><a href="#跨源资源共享-CORS" class="headerlink" title="跨源资源共享 (CORS)"></a>跨源资源共享 (CORS)</h1><p><a href="http://dev.w3.org/2006/waf/access-control/">CORS</a> 允许一个域上的网络应用向另一个域提交跨域 AJAX 请求。启用此功能非常简单，只需由服务器发送一个响应标头即可。</p>
<h2 id="启用-CORS-请求"><a href="#启用-CORS-请求" class="headerlink" title="启用 CORS 请求"></a>启用 CORS 请求</h2><p>假设您的应用已经在 <code>example.com</code> 上了，而您想要从 <code>www.example2.com</code> 提取数据。一般情况下，如果您尝试进行这种类型的 AJAX 调用，请求将会失败，而浏览器将会出现“源不匹配”的错误。利用 CORS，<code>www.example2.com</code> 只需添加一个标头，就可以允许来自 <code>example.com</code> 的请求：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: <span class="attr">http</span>:<span class="comment">//example.com</span></span><br></pre></td></tr></table></figure>



<p>可将 <code>Access-Control-Allow-Origin</code> 添加到某网站下或整个域中的单个资源。要允许任何域向您提交请求，请设置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: *</span><br></pre></td></tr></table></figure>



<p>启用跨源请求是非常简单的，因此如果您的数据是公开的，请务必 <a href="http://enable-cors.org/">启用 CORS</a>！</p>
<h2 id="提交跨域请求"><a href="#提交跨域请求" class="headerlink" title="提交跨域请求"></a>提交跨域请求</h2><p>如果服务器端已启用了 CORS，那么提交跨域请求就和普通的 <code>XMLHttpRequest</code> 请求没什么区别。例如，现在 <code>example.com</code> 可以向 <code>www.example2.com</code> 提交请求了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.example2.com/hello.json&#x27;</span>);</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<h1 id="实际示例："><a href="#实际示例：" class="headerlink" title="实际示例："></a>实际示例：</h1><h2 id="下载文件并保存到-HTML5-文件系统"><a href="#下载文件并保存到-HTML5-文件系统" class="headerlink" title="下载文件并保存到 HTML5 文件系统"></a>下载文件并保存到 HTML5 文件系统</h2><p>假设您有一个图片库，想要提取一些图片，然后使用 <a href="https://www.html5rocks.com/tutorials/file/filesystem/">HTML5 文件系统</a>本地保存这些图片。一种方法是以 <code>ArrayBuffer</code> 形式请求图片，通过数据构建 <code>Blob</code>，并使用 <code>FileWriter</code> 写入 blob：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">requestFileSystem</span>  = <span class="variable language_">window</span>.<span class="property">requestFileSystem</span> || <span class="variable language_">window</span>.<span class="property">webkitRequestFileSystem</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onError</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/path/to/image.png&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;arraybuffer&#x27;</span>;</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestFileSystem</span>(<span class="variable constant_">TEMPORARY</span>, <span class="number">1024</span> * <span class="number">1024</span>, <span class="keyword">function</span>(<span class="params">fs</span>) &#123;</span><br><span class="line">    fs.<span class="property">root</span>.<span class="title function_">getFile</span>(<span class="string">&#x27;image.png&#x27;</span>, &#123;<span class="attr">create</span>: <span class="literal">true</span>&#125;, <span class="keyword">function</span>(<span class="params">fileEntry</span>) &#123;</span><br><span class="line">      fileEntry.<span class="title function_">createWriter</span>(<span class="keyword">function</span>(<span class="params">writer</span>) &#123;</span><br><span class="line"></span><br><span class="line">        writer.<span class="property">onwrite</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123; ... &#125;;</span><br><span class="line">        writer.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bb = <span class="keyword">new</span> <span class="title class_">BlobBuilder</span>();</span><br><span class="line">        bb.<span class="title function_">append</span>(xhr.<span class="property">response</span>);</span><br><span class="line"></span><br><span class="line">        writer.<span class="title function_">write</span>(bb.<span class="title function_">getBlob</span>(<span class="string">&#x27;image/png&#x27;</span>));</span><br><span class="line"></span><br><span class="line">      &#125;, onError);</span><br><span class="line">    &#125;, onError);</span><br><span class="line">  &#125;, onError);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>



<blockquote>
<p> <strong>请注意</strong>：要使用此代码，请参阅“<a href="https://www.html5rocks.com/tutorials/file/filesystem/">探索 FileSystem API</a>”教程中的<a href="https://www.html5rocks.com/tutorials/file/filesystem/#toc-support">浏览器支持和存储限制</a>。</p>
</blockquote>
<h2 id="分割文件并上传各个部分"><a href="#分割文件并上传各个部分" class="headerlink" title="分割文件并上传各个部分"></a>分割文件并上传各个部分</h2><p>使用 <a href="https://www.html5rocks.com/tutorials/file/dndfiles/">File API</a>，我们可以将操作简化为上传大文件。我们采用的技术是：将要上传的文件分割成多个部分，为每个部分生成一个 XHR，然后在服务器上将各部分组合成文件。这类似于 Gmail 快速上传大附件的方法。使用这种技术还可以规避 Google 应用引擎对 http 请求的 32 MB 限制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">BlobBuilder</span> = <span class="variable language_">window</span>.<span class="property">MozBlobBuilder</span> || <span class="variable language_">window</span>.<span class="property">WebKitBlobBuilder</span> ||</span><br><span class="line">                     <span class="variable language_">window</span>.<span class="property">BlobBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">upload</span>(<span class="params">blobOrFile</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/server&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123; ... &#125;;</span><br><span class="line">  xhr.<span class="title function_">send</span>(blobOrFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> blob = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">BYTES_PER_CHUNK</span> = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 1MB chunk sizes.</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">SIZE</span> = blob.<span class="property">size</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> end = <span class="variable constant_">BYTES_PER_CHUNK</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(start &lt; <span class="variable constant_">SIZE</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note: blob.slice has changed semantics and been prefixed. See http://goo.gl/U9mE5.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;mozSlice&#x27;</span> <span class="keyword">in</span> blob) &#123;</span><br><span class="line">      <span class="keyword">var</span> chunk = blob.<span class="title function_">mozSlice</span>(start, end);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> chunk = blob.<span class="title function_">webkitSlice</span>(start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">upload</span>(chunk);</span><br><span class="line"></span><br><span class="line">    start = end;</span><br><span class="line">    end = start + <span class="variable constant_">BYTES_PER_CHUNK</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>



<blockquote>
<p> 用于在服务器上重组文件的代码并未在此显示。</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://dev.w3.org/2006/webapi/XMLHttpRequest-2/">2 级 XMLHttpRequest</a> 规范</li>
<li><a href="http://dev.w3.org/2006/waf/access-control/">跨源资源共享 (CORS)</a> 规范</li>
<li><a href="http://www.w3.org/TR/file-upload/">File API</a> 规范</li>
<li><a href="http://dev.w3.org/2009/dap/file-system/pub/FileSystem/">FileSystem API</a> 规范</li>
</ul>
]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
        <tag>XMLHttpRequest2</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中实现继承的几种方式</title>
    <url>/2019/09/01/javascript/inherit/inherit/</url>
    <content><![CDATA[<p>本文介绍在 <code>javascript</code> 中如何实现继承，从 es5 到 es6 的各个实现方式。</p>
<span id="more"></span>

<h1 id="绑定父类构造函数"><a href="#绑定父类构造函数" class="headerlink" title="绑定父类构造函数"></a>绑定父类构造函数</h1><p>仅继承父类构造函数内的属性和方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"> name , age </span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i can play!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello i am&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">apply</span>( <span class="variable language_">this</span> , <span class="variable language_">arguments</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&#x27;hong&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( p.<span class="property">name</span> , p.<span class="property">age</span> )  <span class="comment">// hong 18</span></span><br><span class="line">p.<span class="title function_">play</span>()  <span class="comment">// i can play!</span></span><br><span class="line">p.<span class="title function_">say</span>()   <span class="comment">// Uncaught TypeError: p.say is not a function</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上代码，我们在子类 <code>Man</code> 的构造函数内部使用了 <code>apply</code> 的方式调用了父类 <code>Person</code> 的构造方法，使得 <code>Person</code> 中的 <code>this</code> 指向 <code>Man</code> 的实例对象，从而实现了对 <code>Person</code> 构造函数内属性和方法的继承。但是无法继承 <code>Person</code> 原型上的属性和方法。</p>
<h1 id="来自父类原型"><a href="#来自父类原型" class="headerlink" title="来自父类原型"></a>来自父类原型</h1><p>将父类的原型转接给子类的方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"> name , age </span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i can play!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello i am a person&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"> name , age </span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span>     <span class="comment">// 修复原型链指向</span></span><br><span class="line"><span class="comment">// Man 自定义的方法或属性</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is foo func in Man&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&#x27;小红&#x27;</span>, <span class="number">14</span>)    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( p.<span class="property">name</span> , p.<span class="property">age</span> )    <span class="comment">// 小红 14</span></span><br><span class="line">p.<span class="title function_">say</span>()       <span class="comment">// hello i am a person</span></span><br><span class="line">p.<span class="title function_">foo</span>()       <span class="comment">// this is foo func in Man</span></span><br><span class="line">p.<span class="title function_">play</span>()      <span class="comment">// Uncaught TypeError: p.play is not a function</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上代码，我们为了实现原型继承，将父类 <code>Person</code> 的实例对象赋值给了 <code>Man.prototype</code> 这时候 <code>Man</code> 便拥有了 <code>Person</code> 原型上的所有属性和方法。<br>但是要注意，为了不破坏 <code>Man</code> 的原型链，必须将 <code>Man.prototype.constructor</code> 指向 <code>Man</code>。此时，我们没有继承到父类 <code>Person</code> 构造函数内的属性及方法。</p>
<h1 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h1><p>通过上面的两种方式，我们已经可以继承到父类构造函数中的属性和方法，以及父类原型上的属性和方法了，那么，现在我们将其组合处理一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"> name , age </span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i can play!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello i am&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">apply</span>( <span class="variable language_">this</span> , <span class="variable language_">arguments</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&#x27;小红&#x27;</span>, <span class="number">14</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( p.<span class="property">name</span> , p.<span class="property">age</span> )   <span class="comment">// 小红 14</span></span><br><span class="line">p.<span class="title function_">play</span>()  <span class="comment">// i can play!</span></span><br><span class="line">p.<span class="title function_">say</span>()   <span class="comment">// hello i am小红</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>经过如上处理，我们已经实现了对 <code>Person</code> 的非静态继承（继承自构造函数内属性和方法及原型上的属性和方法）。</p>
<h1 id="Object-create-方法"><a href="#Object-create-方法" class="headerlink" title="Object.create 方法"></a>Object.create 方法</h1><p><code>Object.create()</code> 方法创建一个新对象，使用现有的对象来提供新创建的对象的 <code>__proto__</code>。 </p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(proto[, propertiesObject])</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><strong>proto</strong></p>
<p>新创建对象的原型对象。</p>
<p><strong>propertiesObject</strong></p>
<p>可选。如果没有指定为 <code>undefined</code>，则是要添加到新创建对象的可枚举属性（即其自身定义的属性，而不是其原型链上的枚举属性）对象的属性描述符以及相应的属性名称。这些属性对应<code>Object.defineProperties()</code> 的第二个参数。</p>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>一个新对象，带着指定的原型对象和属性。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"> name </span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;hong&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">say</span>()   <span class="comment">// hello</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上代码，通过 <code>Object.create</code> 创建的新对象 p 拥有了 <code>Person</code> 的原型方法和属性。</p>
<h1 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h1><p>现在让我们把所有的知识点结合起来，优化继承的实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 寄生组合继承的核心代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; sub 子类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; parent 父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">sub, parent</span>) &#123;</span><br><span class="line">  <span class="comment">// 拿到父类的原型</span></span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="comment">// 改变constructor指向</span></span><br><span class="line">  prototype.<span class="property">constructor</span> = sub;</span><br><span class="line">  <span class="comment">// 父类原型赋给子类</span></span><br><span class="line">  sub.<span class="property"><span class="keyword">prototype</span></span> = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">func</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Man</span>, <span class="title class_">Person</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">p.<span class="title function_">func</span>();            <span class="comment">// Person</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// 小红</span></span><br></pre></td></tr></table></figure>

<h1 id="es6中的继承"><a href="#es6中的继承" class="headerlink" title="es6中的继承"></a>es6中的继承</h1><p><code>class</code> 可以通过 <code>extends</code> 关键字实现继承，这比 <code>ES5</code> 的通过修改原型链实现继承，要清晰和方便很多。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个 <code>Man</code> 类，该类通过 <code>extends</code> 关键字，继承了 <code>Person</code> 类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个 <code>Person</code> 类。下面，我们在<code>Man</code> 内部加上代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"> name , age </span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原型方法</span></span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello i am&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;(Preson)&#x27;</span> )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is a static method foo&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age , height</span>)&#123;</span><br><span class="line">    <span class="comment">// 调用父类的构造方法</span></span><br><span class="line">    <span class="variable language_">super</span>(name, age)</span><br><span class="line">    <span class="comment">// 之后，添加自身的实例属性或方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自身的挂载在原型上的方法</span></span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i can play&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果子类中有与父类相同的属性或方法，则优先调用子类的属性或方法</span></span><br><span class="line">  <span class="comment">// say()&#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;hello i am&#x27; + this.name + &#x27;(Man)&#x27; )</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自身的静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">bar</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is a static method bar&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&#x27;小红&#x27;</span>, <span class="number">14</span>, <span class="number">188</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( p.<span class="property">name</span> , p.<span class="property">age</span> , p.<span class="property">height</span> )  <span class="comment">// 小红 14 188</span></span><br><span class="line">p.<span class="title function_">play</span>()      <span class="comment">// i can play</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="title function_">bar</span>()     <span class="comment">// this is a static method bar</span></span><br><span class="line">p.<span class="title function_">say</span>()       <span class="comment">// hello i am小红(Preson)</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="title function_">foo</span>()     <span class="comment">// this is a static method foo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>如上代码，我们可以对父类的 <code>实例属性和方法</code>，<code>静态属性和方法</code>以及<code>原型属性和方法</code> 进行继承，并且语法上更为清晰简单。</p>
<p>子类必须在 <code>constructor</code> 方法中调用 <code>super</code> 方法，否则新建实例时会报错。这是因为子类自己的 <code>this</code> 对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用 <code>super</code> 方法，子类就得不到 <code>this</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cp = <span class="keyword">new</span> <span class="title class_">ColorPoint</span>(); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>ColorPoint</code> 继承了父类 <code>Point</code>，但是它的构造函数没有调用 <code>super</code> 方法，导致新建实例时报错。</p>
<p>ES5 的继承，实质是先创造子类的实例对象 <code>this</code>，然后再将父类的方法添加到 <code>this</code>上面（<code>Parent.apply(this)</code>）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到 <code>this</code> 上面（所以必须先调用 <code>super</code> 方法），然后再用子类的构造函数修改 <code>this</code>。</p>
<blockquote>
<p>另一个需要注意的地方是，在子类的构造函数中，只有调用 <code>super</code> 之后，才可以使用 <code>this</code> 关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有 <code>super</code> 方法才能调用父类实例。</p>
</blockquote>
<h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p><code>super</code> 这个关键字，既可以当作 <code>函数</code> 使用，也可以当作 <code>对象</code> 使用。在这两种情况下，它的用法完全不同。</p>
<ol>
<li>作为函数时</li>
</ol>
<p><code>super</code> 作为函数调用非时，表示父类的构造函数 <code>Parent.prototype.constructor</code>，es6 规定，在使用 <code>extends</code> 实现继承时，必须先在子类的构造函数中优先调用一次 <code>super()</code>，否则直接使用 <code>this</code> 会报错。并且 <code>super</code> 作为函数调用时，只能出现在子类的构造函数中，用在其他地方会报错。</p>
<ol start="2">
<li>作为对象时</li>
</ol>
<p>当 <code>super</code> 作为对象调用时，在<code>普通方法</code>中，指向父类的<code>原型对象</code>；在<code>静态方法</code>中，指向<code>父类</code>。</p>
<p>ES6 规定，在子类普通方法中通过 <code>super</code> 调用父类的方法时，方法内部的 <code>this</code> 指向当前的子类实例。</p>
<p>另外，在子类的静态方法中通过 <code>super</code> 调用父类的方法时，方法内部的 <code>this</code> 指向当前的子类，而不是子类的实例。</p>
<p>注意，使用 <code>super</code> 的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。</p>
<h2 id="Mixin-模式的实现"><a href="#Mixin-模式的实现" class="headerlink" title="Mixin 模式的实现"></a>Mixin 模式的实现</h2><p>Mixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口。它的最简单实现如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123;...a, ...b&#125;; <span class="comment">// &#123;a: &#x27;a&#x27;, b: &#x27;b&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>c</code> 对象是 <code>a</code> 对象和 <code>b</code> 对象的合成，具有两者的接口。</p>
<p>下面是一个更完备的实现，将多个类的接口“混入”（mix in）另一个类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mix</span>(<span class="params">...mixins</span>) &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Mix</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> mixin <span class="keyword">of</span> mixins) &#123;</span><br><span class="line">        <span class="title function_">copyProperties</span>(<span class="variable language_">this</span>, <span class="keyword">new</span> <span class="title function_">mixin</span>()); <span class="comment">// 拷贝实例属性</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> mixin <span class="keyword">of</span> mixins) &#123;</span><br><span class="line">    <span class="title function_">copyProperties</span>(<span class="title class_">Mix</span>, mixin); <span class="comment">// 拷贝静态属性</span></span><br><span class="line">    <span class="title function_">copyProperties</span>(<span class="title class_">Mix</span>.<span class="property"><span class="keyword">prototype</span></span>, mixin.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 拷贝原型属性</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Mix</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyProperties</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(source)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( key !== <span class="string">&#x27;constructor&#x27;</span></span><br><span class="line">      &amp;&amp; key !== <span class="string">&#x27;prototype&#x27;</span></span><br><span class="line">      &amp;&amp; key !== <span class="string">&#x27;name&#x27;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">let</span> desc = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(source, key);</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, desc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的 <code>mix</code> 函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DistributedEdit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">mix</span>(<span class="title class_">Loggable</span>, <span class="title class_">Serializable</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>inherit</tag>
        <tag>extends</tag>
      </tags>
  </entry>
  <entry>
    <title>解决js浮点数计算精度丢失问题</title>
    <url>/2018/05/22/javascript/instance/calcInJavascript/</url>
    <content><![CDATA[<p>解决前端浮点数之间运算精度丢失问题。</p>
<span id="more"></span>

<h1 id="实现1"><a href="#实现1" class="headerlink" title="实现1"></a>实现1</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">function</span> (<span class="params">...arg</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r1, r2, m, result = <span class="variable language_">this</span>;</span><br><span class="line">    arg.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; r1 = result.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span> &#125; <span class="keyword">catch</span> (e) &#123; r1 = <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123; r2 = value.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span> &#125; <span class="keyword">catch</span> (e) &#123; r2 = <span class="number">0</span> &#125;</span><br><span class="line">        m = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, <span class="title class_">Math</span>.<span class="title function_">max</span>(r1, r2));</span><br><span class="line">        result = <span class="title class_">Math</span>.<span class="title function_">round</span>(result * m + value * m) / m;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 减</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="string">&#x27;sub&#x27;</span>] = <span class="keyword">function</span> (<span class="params">...arg</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r1, r2, m, result = <span class="variable language_">this</span>;</span><br><span class="line">    arg.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; r1 = result.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span> &#125; <span class="keyword">catch</span> (e) &#123; r1 = <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123; r2 = value.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span> &#125; <span class="keyword">catch</span> (e) &#123; r2 = <span class="number">0</span> &#125;</span><br><span class="line">        m = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, <span class="title class_">Math</span>.<span class="title function_">max</span>(r1, r2));</span><br><span class="line">        <span class="keyword">var</span> n = (r1 &gt;= r2) ? r1 : r2;</span><br><span class="line">        result = (<span class="title class_">Math</span>.<span class="title function_">round</span>(result * m - value * m) / m).<span class="title function_">toFixed</span>(n);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 乘</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="string">&#x27;mul&#x27;</span>] = <span class="keyword">function</span> (<span class="params">...arg</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="variable language_">this</span>;</span><br><span class="line">    arg.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> m = <span class="number">0</span>, s1 = result.<span class="title function_">toString</span>(), s2 = value.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123; m += s1.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span> &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123; m += s2.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span> &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">        result = <span class="title class_">Number</span>(s1.<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) * <span class="title class_">Number</span>(s2.<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)) / <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, m);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 除</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="string">&#x27;div&#x27;</span>] = <span class="keyword">function</span> (<span class="params">...arg</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="variable language_">this</span>;</span><br><span class="line">    arg.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> t1 = <span class="number">0</span>, t2 = <span class="number">0</span>, r1, r2;</span><br><span class="line">        <span class="keyword">try</span> &#123; t1 = result.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span> &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123; t2 = value.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span> &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">        r1 = <span class="title class_">Number</span>(result.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        r2 = <span class="title class_">Number</span>(value.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        result = (r1 / r2) * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, t2 - t1);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 0.1 + 0.2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span>.<span class="title function_">add</span>(<span class="number">0.2</span>)); <span class="comment">// 0.3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 同时支持传入多个参与计算的数</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// a * 2 * 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">mul</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 30</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="实现2"><a href="#实现2" class="headerlink" title="实现2"></a>实现2</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> calc = &#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    add :  <span class="keyword">function</span> (<span class="params">arg1,arg2</span>)&#123; </span><br><span class="line">      <span class="keyword">var</span> r1,r2,m; </span><br><span class="line">      <span class="keyword">try</span>&#123;r1=arg1.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>&#125;<span class="keyword">catch</span>(e)&#123;r1=<span class="number">0</span>&#125; </span><br><span class="line">      <span class="keyword">try</span>&#123;r2=arg2.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>&#125;<span class="keyword">catch</span>(e)&#123;r2=<span class="number">0</span>&#125; </span><br><span class="line">      m=<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>,<span class="title class_">Math</span>.<span class="title function_">max</span>(r1,r2)); </span><br><span class="line">      <span class="keyword">return</span> (arg1*m+arg2*m)/m; </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    sub : <span class="keyword">function</span> (<span class="params">arg1,arg2</span>)&#123; </span><br><span class="line">      <span class="keyword">var</span> r1,r2,m,n; </span><br><span class="line">      <span class="keyword">try</span>&#123;r1=arg1.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>&#125;<span class="keyword">catch</span>(e)&#123;r1=<span class="number">0</span>&#125; </span><br><span class="line">      <span class="keyword">try</span>&#123;r2=arg2.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>&#125;<span class="keyword">catch</span>(e)&#123;r2=<span class="number">0</span>&#125; </span><br><span class="line">      m=<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>,<span class="title class_">Math</span>.<span class="title function_">max</span>(r1,r2));</span><br><span class="line">      n=(r1&gt;=r2)?<span class="attr">r1</span>:r2; </span><br><span class="line">      <span class="keyword">return</span> ((arg1*m-arg2*m)/m).<span class="title function_">toFixed</span>(n); </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    mul : <span class="keyword">function</span> (<span class="params">arg1,arg2</span>) &#123; </span><br><span class="line">      <span class="keyword">var</span> m=<span class="number">0</span>,s1=arg1.<span class="title function_">toString</span>(),s2=arg2.<span class="title function_">toString</span>(); </span><br><span class="line">      <span class="keyword">try</span>&#123;m+=s1.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>&#125;<span class="keyword">catch</span>(e)&#123;&#125; </span><br><span class="line">      <span class="keyword">try</span>&#123;m+=s2.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>&#125;<span class="keyword">catch</span>(e)&#123;&#125; </span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Number</span>( s1.<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>) ) * <span class="title class_">Number</span>( s2.<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>) ) / <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>,m); </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    div : <span class="keyword">function</span> (<span class="params">arg1,arg2</span>)&#123; </span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> t1=<span class="number">0</span>,t2=<span class="number">0</span>,r1,r2; </span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>&#123;t1=arg1.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>&#125;<span class="keyword">catch</span>(e)&#123;&#125; </span><br><span class="line">      <span class="keyword">try</span>&#123;t2=arg2.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].<span class="property">length</span>&#125;<span class="keyword">catch</span>(e)&#123;&#125; </span><br><span class="line">      </span><br><span class="line">      r1=<span class="title class_">Number</span>(arg1.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>)); </span><br><span class="line">      r2=<span class="title class_">Number</span>(arg2.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>)); </span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> calc.<span class="title function_">mul</span>( (r1/r2), <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>,t2-t1) );</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1 + 2.33 </span></span><br><span class="line">calc.<span class="title function_">add</span>( <span class="number">1</span> , <span class="number">2.33</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6 - 3.33</span></span><br><span class="line">calc.<span class="title function_">sub</span>( <span class="number">6</span> , <span class="number">3.33</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 * 2.33</span></span><br><span class="line">calc.<span class="title function_">mul</span>( <span class="number">5</span> , <span class="number">2.33</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7 / 4.55</span></span><br><span class="line">calc.<span class="title function_">div</span>( <span class="number">7</span> , <span class="number">4.55</span> )</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>精度丢失</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中的对象类型拷贝问题</title>
    <url>/2019/04/03/javascript/instance/deepCloneInJavscript/</url>
    <content><![CDATA[<p>在这篇文章中，我们将讨论 <code>对象类型(objects)</code>、或者说引用类型在 <code>javascript</code> 中的拷贝问题，会分别对 <code>浅拷贝</code> 和 <code>深拷贝</code> 进行说明。</p>
<span id="more"></span>

<p>在开始之前，我们需要了解一些基础知识：<code>Objects</code> 在 <code>javascript</code> 中只是一块内存地址的简单引用，任何变量都可以指向这块地址，以至于有的时候，这使其变得难以琢磨，比如，将一个对象的引用复制给另一个变量，此时，这块地址就会有2处引用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    a : <span class="string">&quot;abc&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">a</span>); <span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">a</span>); <span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line">foo.<span class="property">a</span> = <span class="string">&quot;yo foo&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">a</span>); <span class="comment">// yo foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">a</span>); <span class="comment">// yo foo</span></span><br><span class="line"></span><br><span class="line">bar.<span class="property">a</span> = <span class="string">&quot;whatup bar?&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">a</span>); <span class="comment">// whatup bar?</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">a</span>); <span class="comment">// whatup bar?  </span></span><br></pre></td></tr></table></figure>

<p>如上面代码，我们声明了一个 <code>foo</code> 变量，该变量指向 <code>&#123; a: &quot;abc&quot;&#125;</code> 对象所在的内存地址，此时，可以使用 <code>foo.a</code> 查看其中的属性 <code>a</code> 的值为 <code>abc</code>。之后，我们又将 <code>foo</code> 赋值给了 <code>bar</code> 变量，即将 <code>&#123; a: &quot;abc&quot;&#125;</code> 对象的地址赋值给了 <code>bar</code> 变量，这时候，该对象就被2个变量所引用，随后，我们执行 <code>foo.a = &quot;yo foo&quot;</code> 改变了该对象中 <code>a</code> 属性的值，再次打印 <code>foo.a</code> 和 <code>bar.a</code> 后显示的结果都是 <code>yo foo</code>。同理，修改 <code>bar.a</code> 得到的也是一样的结果，因为他们改变的都是同一个对象的属性值。</p>
<h1 id="浅拷贝-shallow-copy"><a href="#浅拷贝-shallow-copy" class="headerlink" title="浅拷贝(shallow copy)"></a>浅拷贝(shallow copy)</h1><p>如果你的对象里所有的属性值都是 <code>值类型</code>，那么你可以使用 <code>es6</code> 中新的对象API <code>Object.assign()</code> 或者使用扩展运算符 <code>...</code> 进行拷贝操作，俗称 <code>浅拷贝</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;bar&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copy = &#123; ...obj &#125;; <span class="comment">// Object &#123; foo: &quot;foo&quot;, bar: &quot;bar&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;bar&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copy = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj); <span class="comment">// Object &#123; foo: &quot;foo&quot;, bar: &quot;bar&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的两种方式都可以将多个源对象中的属性拷贝到目标对象上。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">foo</span>: <span class="string">&quot;foo&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">bar</span>: <span class="string">&quot;bar&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copySpread = &#123; ...obj1, ...obj2 &#125;; <span class="comment">// Object &#123; foo: &quot;foo&quot;, bar: &quot;bar&quot; &#125;</span></span><br><span class="line"><span class="keyword">var</span> copyAssign = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1, obj2); <span class="comment">// Object &#123; foo:</span></span><br></pre></td></tr></table></figure>


<p>但问题是，对于上面的两种方式，如果被拷贝的对象中的属性值也是一个对象类型，那么，对于该属性的拷贝只是拷贝一个对象的引用，这跟第一个例子是一样的情况 <code>var bar = foo;</code> ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">a</span>: <span class="number">0</span> , <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> copy = &#123; ...foo &#125;;</span><br><span class="line"></span><br><span class="line">copy.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">copy.<span class="property">b</span>.<span class="property">c</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(foo); <span class="comment">// &#123; a: 0, b: &#123; c: 2 &#125; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(copy); <span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>也就是说，你并没有拷贝出一个副本出来，不管对哪个变量进行了修改，那个属性值为对象类型的属性都会被改变。</p>
</blockquote>
<h1 id="深拷贝-deep-copy"><a href="#深拷贝-deep-copy" class="headerlink" title="深拷贝(deep copy)"></a>深拷贝(deep copy)</h1><p>为了能够 <code>深拷贝</code> 一个对象类型的值，一种解决方法是，首先将该对象序列化成一个 <code>JSON</code> 字符串，然后再将其解析回来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">0</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">0</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> copy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br></pre></td></tr></table></figure>

<p>不幸的是，这种方式只对那些可以序列化为 <code>JSON</code> 格式的数据有用，并且要求这些属性值不存在任何的循环引用。比如，<code>Date</code> 对象，当你对其进行 字符串化 后，再解析回来的时候，该数据就只是一个时间字符串了，而不是原先的 <code>Date</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>()  <span class="comment">// Wed Apr 10 2019 16:49:10 GMT+0800 </span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(d) ))  <span class="comment">// &quot;2019-04-10T08:49:10.865Z&quot;</span></span><br></pre></td></tr></table></figure>


<h1 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h1><p>综上所述，我们需要对不同的数据类型进行处理，所以有如下方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> copy;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle the 3 simple types, and null or undefined</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> == obj || <span class="string">&quot;object&quot;</span> != <span class="keyword">typeof</span> obj) <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Date</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">    copy = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    copy.<span class="title function_">setTime</span>(obj.<span class="title function_">getTime</span>());</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Array</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    copy = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = obj.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        copy[i] = <span class="title function_">deepClone</span>(obj[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Function</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">    copy = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle Object</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">      copy = &#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> obj) &#123;</span><br><span class="line">          <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(attr)) copy[attr] = <span class="title function_">deepClone</span>(obj[attr]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> copy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unable to copy obj as type isn&#x27;t supported &quot;</span> + obj.<span class="property">constructor</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体思路，就是针对不同类型的数据做不同的拷贝处理，对于有循环引用的数据进行递归操作。上面的函数可以直接应用在实际项目中。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>引用类型</tag>
        <tag>深浅拷贝</tag>
        <tag>对象</tag>
      </tags>
  </entry>
  <entry>
    <title>XMLHttpRequest Level 2 实现文件下载</title>
    <url>/2018/01/14/javascript/instance/downloadWithXHR2/</url>
    <content><![CDATA[<p>在 <code>XMLHttpRequest level 2</code> 中可以利用 <code>Ajax</code> 实现对二进制文件的下载功能，通过设置 <code>responseType=&#39;blob&#39;</code><br>告诉浏览器放回的数据类型为二进制流大文件类型，即可触发浏览器的下载功能。</p>
<span id="more"></span>

<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li><code>element-ui</code> 加载层、提示层模块</li>
<li><code>moment</code> 时间日期格式处理模块</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果想使用其他提示层，可以修改提示部分的逻辑代码</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Loading</span>, <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:      hongwenqing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span>:        文件下载功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@url</span>:         请求地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span>:        post 请求参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span>:      get 请求参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span>:      请求方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@filename</span>:    自定义文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@loadingText</span>:  loading 提示文本内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@errorText</span>:   下载失败时提示文本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span>:     Promise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">download</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  url, // 请求地址</span></span><br><span class="line"><span class="params">  data, // post 请求参数</span></span><br><span class="line"><span class="params">  params, // get 请求参数</span></span><br><span class="line"><span class="params">  method = <span class="string">&quot;post&quot;</span>, // 请求方式</span></span><br><span class="line"><span class="params">  filename, // 文件名</span></span><br><span class="line"><span class="params">  loadingText = <span class="string">&quot;正在下载...&quot;</span>, // loading 提示文本内容</span></span><br><span class="line"><span class="params">  errorText = <span class="string">&quot;下载失败&quot;</span>, // 下载失败时提示文本</span></span><br><span class="line"><span class="params">  handleErr // 自定义文件下载时，系统级抛错时处理函数，非 http 错误</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> loadingInstance = <span class="title class_">Loading</span>.<span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="comment">// 创建加载提示实例</span></span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;transparent&quot;</span>,</span><br><span class="line">    <span class="attr">fullscreen</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">text</span>: loadingText</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for post</span></span><br><span class="line">  data = data ? <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data) : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for get</span></span><br><span class="line">  <span class="keyword">if</span> (params) &#123;</span><br><span class="line">    url += <span class="string">&#x27;?&#x27;</span> + <span class="built_in">decodeURIComponent</span>( <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>( params ) )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    x.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&quot;post&quot;</span> || method === <span class="string">&quot;POST&quot;</span>)</span><br><span class="line">      x.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json;charset=utf-8&quot;</span>); <span class="comment">// 设置请求头，格式为json</span></span><br><span class="line">    x.<span class="property">responseType</span> = <span class="string">&quot;blob&quot;</span>; <span class="comment">// 返回类型为二进制流</span></span><br><span class="line">    x.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> client_msg = errorText,</span><br><span class="line">          blob = <span class="variable language_">this</span>.<span class="property">response</span>,</span><br><span class="line">          status = <span class="variable language_">this</span>.<span class="property">status</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取文件名</span></span><br><span class="line">      filename = <span class="title function_">getFileName</span>( filename , <span class="variable language_">this</span> )</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (status == <span class="number">504</span>) &#123;</span><br><span class="line">        client_msg = <span class="string">&quot;网络忒卡，连接超时&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      loadingInstance.<span class="title function_">close</span>(); <span class="comment">// 关闭</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (status == <span class="number">200</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//文件下载/导出异常处理</span></span><br><span class="line">        <span class="keyword">if</span> (blob.<span class="property">type</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;application/json&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="title function_">blobToJson</span>(blob).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            handleErr &amp;&amp; <span class="title function_">handleErr</span>(res);</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件正常下载</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">msSaveOrOpenBlob</span>) &#123;</span><br><span class="line">          <span class="comment">// for IE</span></span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="title function_">msSaveOrOpenBlob</span>(blob, filename);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 现代浏览器</span></span><br><span class="line">          <span class="keyword">let</span> eleLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>), <span class="comment">// 创建隐藏的可下载链接</span></span><br><span class="line">              objectUrl = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob); <span class="comment">// 将内容转为 blob 地址</span></span><br><span class="line">         </span><br><span class="line">          eleLink.<span class="title function_">setAttribute</span>(<span class="string">&quot;download&quot;</span>, filename); <span class="comment">// 设置文件名</span></span><br><span class="line">          eleLink.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">          eleLink.<span class="property">href</span> = objectUrl;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(eleLink); <span class="comment">// 插入body</span></span><br><span class="line">          eleLink.<span class="title function_">click</span>(); <span class="comment">// 触发点击</span></span><br><span class="line">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(eleLink); <span class="comment">// 然后移除</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123;</span><br><span class="line">          <span class="attr">message</span>: client_msg</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    x.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      loadingInstance.<span class="title function_">close</span>(); <span class="comment">// 关闭</span></span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123;</span><br><span class="line">        <span class="attr">message</span>: errorText</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送</span></span><br><span class="line">    <span class="keyword">if</span> (data) x.<span class="title function_">send</span>(data);</span><br><span class="line">    <span class="keyword">else</span> x.<span class="title function_">send</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// blob数据转json处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">blobToJson</span>(<span class="params">blob</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="title function_">readAsText</span>(blob);</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> jsonRes = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">target</span>.<span class="property">result</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(jsonRes);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件名获取方式（来自自定义或响应头）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFileName</span>(<span class="params"> customFilename, xhr </span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( customFilename )&#123;</span><br><span class="line">    name = customFilename</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> headers = xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&#x27;content-disposition&#x27;</span>) || <span class="title function_">moment</span>( +<span class="keyword">new</span> <span class="title class_">Date</span>() ).<span class="title function_">format</span>(<span class="string">&#x27;YMDHmm&#x27;</span>),</span><br><span class="line">        index = headers.<span class="title function_">search</span>(<span class="string">&#x27;filename=&#x27;</span>),</span><br><span class="line">        start = index === -<span class="number">1</span> ? <span class="number">0</span> : index;</span><br><span class="line"></span><br><span class="line">    name = <span class="built_in">decodeURIComponent</span>( headers.<span class="title function_">slice</span>( start + <span class="number">9</span> ) );  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果没有扩展名，默认加上 .xls </span></span><br><span class="line">  <span class="keyword">return</span> name.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>) !== -<span class="number">1</span> ? name : ( name + <span class="string">&#x27;.xls&#x27;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> download;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上方代码可直接应用到实际项目中，使用方式就是按照正常的 <code>Ajax</code> 请求那样调用此函数即可。</p>
</blockquote>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> download <span class="keyword">from</span> <span class="string">&#x27;./download.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">download</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/foo/bar/download&#x27;</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">fileId</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;自定义文件名.xls&#x27;</span>,</span><br><span class="line">  <span class="title function_">handleErr</span>(<span class="params"> res </span>)&#123;  <span class="comment">// 系统级抛错处理回调</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( res )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// download success</span></span><br><span class="line">  <span class="comment">// do something else ...</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// download failed</span></span><br><span class="line">  <span class="comment">// do something else ...</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( err )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><p>如果想要自定义下载的文件名称，请始终保持你设置的 <code>filename</code> （必须包含文件名扩展后缀）。</p>
</li>
<li><p>该方法仅支持 <code>post</code> 、<code>get</code> 请求。</p>
</li>
</ul>
<h2 id="Logs"><a href="#Logs" class="headerlink" title="Logs"></a>Logs</h2><ul>
<li><p>2018-12-1 优化下载方法。</p>
</li>
<li><p>2019-3-1 新增 <code>handleErr</code>。</p>
</li>
<li><p>2019-5-27 去除 <code>mimetype</code> 参数，该参数无需传入。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>XMLHttpRequest2</tag>
        <tag>blob</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中的相等性判断</title>
    <url>/2019/04/02/javascript/instance/equalInJavascript/</url>
    <content><![CDATA[<p><code>JavaScript</code> 提供三种不同的值比较操作：</p>
<ul>
<li>严格相等 (“triple equals” 或 “identity”)，使用 <code>===</code> </li>
<li>宽松相等 (“double equals”) ，使用 <code>==</code></li>
<li>以及 <code>Object.is</code> （ECMAScript 2015&#x2F; ES6 新特性）</li>
</ul>
<span id="more"></span>

<p>选择使用哪个操作取决于你需要什么样的比较。</p>
<p>简而言之，在比较两件事情时，双等号将执行类型转换; 三等号将进行相同的比较，而不进行类型转换 (如果类型不同, 只是总会返回 <code>false</code> );  而<code>Object.is</code>的行为方式与三等号相同，但是对于<code>NaN</code>和 <code>-0</code> 和 <code>+0</code> 进行特殊处理，所以最后两个不相同，而<code>Object.is</code>（NaN，NaN）将为 <code>true</code>。(通常使用双等号或三等号将 <code>NaN</code> 与 <code>NaN</code> 进行比较，结果为 <code>false</code>) 请注意，所有这些之间的区别都与其处理原语有关; 这三个运算符的原语中，没有一个会比较两个变量是否结构上概念类似。对于任意两个不同的非原始对象，即便他们有相同的结构， 以上三个运算符都会计算得到 <code>false</code> 。</p>
<h1 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等 ==="></a>严格相等 <code>===</code></h1><p>全等操作符比较两个值是否相等，两个被比较的值在比较前都不进行隐式转换。如果两个被比较的值具有不同的类型，这两个值是不全等的。否则，如果两个被比较的值类型相同，值也相同，并且都不是 <code>number</code> 类型时，两个值全等。最后，如果两个值都是 <code>number</code> 类型，当两个都不是 <code>NaN</code>，并且数值相同，或是两个值分别为 <code>+0 和 -0</code> 时，两个值被认为是全等的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num === num); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === obj); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str === str); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num === obj); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num === str); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === str); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === <span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>在日常中使用全等操作符几乎总是正确的选择。对于除了数值之外的值，全等操作符使用明确的语义进行比较：一个值只与自身全等。对于数值，全等操作符使用略加修改的语义来处理两个特殊情况：第一个情况是，浮点数 <code>0</code> 是不分正负的。区分 <code>+0 和 -0</code> 在解决一些特定的数学问题时是必要的，但是大部分情况下我们并不用关心。全等操作符认为这两个值是全等的。第二个情况是，浮点数包含了 <code>NaN</code> 值，用来表示某些定义不明确的数学问题的解，例如：正无穷加负无穷。全等操作符认为 <code>NaN</code> 与其他任何值都不全等，包括它自己。<code>（等式 (x !== x) 成立的唯一情况是 x 的值为 NaN）</code></p>
<h1 id="宽松相等"><a href="#宽松相等" class="headerlink" title="宽松相等 =="></a>宽松相等 <code>==</code></h1><p>相等操作符比较两个值是否相等，在比较前将两个被比较的值转换为相同类型。在转换后（等式的一边或两边都可能被转换），最终的比较方式等同于全等操作符 <code>===</code> 的比较方式。 相等操作符满足交换律。</p>
<p>一般而言，根据 <code>ECMAScript</code> 规范，所有的对象都与 <code>undefined</code> 和 <code>null</code> 不相等。但是大部分浏览器允许非常窄的一类对象（即，所有页面中的 <code>document.all</code> 对象），在某些情况下，充当效仿 <code>undefined</code> 的角色。相等操作符就是在这样的一个背景下。因此，<code>IsFalsy(A)</code> 方法的值为 <code>true</code> ，当且仅当 A 效仿 <code>undefined</code>。在其他所有情况下，一个对象都不会等于 <code>undefined</code> 或 <code>null</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num == num); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == obj); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str == str); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num == obj); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num == str); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == str); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// both false, except in rare cases</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == <span class="literal">null</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == <span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h1><p><code>ES5</code> 比较两个值是否相等，只有两个运算符：相等运算符 <code>==</code> 和严格相等运算符 <code>===</code>。它们都有缺点，前者会自动转换数据类型，后者的 <code>NaN</code> 不等于自身，以及 <code>+0</code> 等于 <code>-0</code>。<code>JavaScript</code> 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。</p>
<p><code>ES6</code> 提出“Same-value equality”（同值相等）算法，用来解决这个问题。<code>Object.is</code> 就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符 <code>===</code> 的行为基本一致。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(&#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>ES5</code> 可以通过下面的代码，部署 <code>Object.is</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>, <span class="string">&#x27;is&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">      <span class="comment">// 针对+0 不等于 -0的情况</span></span><br><span class="line">      <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 针对NaN的情况</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h1 id="判等对照表"><a href="#判等对照表" class="headerlink" title="判等对照表"></a>判等对照表</h1><table>
<thead>
<tr>
<th align="center">x</th>
<th align="center">y</th>
<th align="center">&#x3D;&#x3D;</th>
<th align="center">&#x3D;&#x3D;&#x3D;</th>
<th align="center">Object.is()</th>
</tr>
</thead>
<tbody><tr>
<td align="center">undefined</td>
<td align="center">undefined</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">null</td>
<td align="center">null</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">“foo”</td>
<td align="center">“foo”</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">+0</td>
<td align="center">-0</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">false</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">“”</td>
<td align="center">false</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">“”</td>
<td align="center">0</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">“0”</td>
<td align="center">0</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">“17”</td>
<td align="center">17</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">[1,2]</td>
<td align="center">“1,2”</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">new String(“foo”)</td>
<td align="center">“foo”</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">null</td>
<td align="center">undefined</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">null</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">undefined</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">{ foo: “bar” }</td>
<td align="center">{ foo: “bar” }</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">new String(“foo”)</td>
<td align="center">new String(“foo”)</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">null</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">NaN</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">“foo”</td>
<td align="center">NaN</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">NaN</td>
<td align="center">NaN</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">true</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>非严格相等 ==</tag>
        <tag>严格相等 ===</tag>
        <tag>Object.is</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中数据类型的几种判断方式</title>
    <url>/2019/04/01/javascript/instance/howToCheckDataTypeInjavascript/</url>
    <content><![CDATA[<p>在开发中，我们经常需要对数据类型进行判断，再做不同的操作，这篇文章将讲解在 <code>javascript</code> 中对不同数据类型进行判断的方式。</p>
<span id="more"></span>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>既然要判断 <code>javascript</code> 中的数据类型，那么首先你需要知道在 <code>javascript</code> 中有哪些数据类型。</p>
<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h2><p>数值类型，如：<code>0, 1, -1, 2.3 , Infinity , -Infinity</code> 等都是 <code>Number</code>类型。</p>
<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>字符串类型，如：<code>&#39;foo&#39; , &#39;123&#39;</code> 等都是 <code>String</code> 类型。</p>
<h2 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h2><p>值为 <code>true</code> 或 <code>false</code>。</p>
<h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><h2 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h2><p>数组类型，如：<code>let arr = [1,2]</code> 或 <code>let arr = new Array(1,2)</code>。</p>
<h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><p>对象类型，如：<code>let obj = &#123; name: &#39;foo&#39; &#125;</code> 或 <code>let obj = new Object(&#123;name: &#39;bar&#39;&#125;)</code>。</p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>函数申明，函数表达式的类型都为 <code>function</code> 。<br>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数申明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="undefiend"><a href="#undefiend" class="headerlink" title="undefiend"></a>undefiend</h2><p>变量已申明未赋值时的默认值都为 <code>undefined</code>，默认的函数返回值也是 <code>undefined</code>。<br>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo;  </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( foo )  <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">bar</span>() ) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>空类型，只有单一的一个值，即 <code>null</code> 本身，由于历史问题，<code>null</code> 在 <code>javascript</code> 中被认为是复杂数据类型(引用类型)。当使用 <code>typeof null</code>，它返回的是 <code>object</code>。</p>
<h1 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h1><h2 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h2><p>es6 中新增的数据类型，其是作为全局函数而非构造函数 <code>Symbol()</code>，表示独一无二的唯一值，常被用来定义对象的属性名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)]: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p><code>typeof</code> 运算符可以判断简单类型的数据类型，但对于复杂数据类型则无法准确判断。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span>  <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;&#x27;</span>  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>  <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span> <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Array</span>()   <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Object</span>()  <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Date</span>()    <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>()  <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>)   <span class="comment">// symbol</span></span><br></pre></td></tr></table></figure>

<p>如上方代码所示，<code>typeof</code> 运算符只能用于判断 <code>Number</code> , <code>String</code> , <code>Boolean</code> , <code>undefined</code> <code>Function</code> , 和 <code>Symbol</code> 类型。其他类型都统一返回 <code>object</code>。</p>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p><code>instanceof</code> 运算符用于判断对象是否为某个构造函数的实例。返回值为 <code>Boolean</code> 类型。她只可用来判断对象类型数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>   <span class="comment">// true</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>当用在简单类型数据上是，其始终返回 <code>false</code>。<code>null</code> 和 <code>undefined</code> 也总是返回 <code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">12</span>,</span><br><span class="line">    str = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    bol = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">num <span class="keyword">instanceof</span> <span class="title class_">Number</span>  <span class="comment">// false</span></span><br><span class="line">str <span class="keyword">instanceof</span> <span class="title class_">String</span>  <span class="comment">// false</span></span><br><span class="line">bol <span class="keyword">instanceof</span> <span class="title class_">Boolean</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">undefined</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="Function-prototype-name"><a href="#Function-prototype-name" class="headerlink" title="Function.prototype.name"></a>Function.prototype.name</h2><p>利用 <code>Function</code> 的实例属性 <code>name</code> 可以获取函数名称，所以可以通过查看目标数据类型的构造函数 <code>constructor</code> 的 <code>name</code> 属性来判断数据类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>,</span><br><span class="line">    str = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    bol = <span class="literal">true</span>,</span><br><span class="line">    arr = [<span class="number">1</span>],</span><br><span class="line">    obj = &#123;<span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>&#125;,</span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">    reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>();</span><br><span class="line"></span><br><span class="line">num.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Number</span></span><br><span class="line">str.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// String</span></span><br><span class="line">bol.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Boolean</span></span><br><span class="line">arr.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Array</span></span><br><span class="line">obj.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Object</span></span><br><span class="line">date.<span class="property">constructor</span>.<span class="property">name</span> <span class="comment">// Date</span></span><br><span class="line">reg.<span class="property">constructor</span>.<span class="property">name</span>  <span class="comment">// RegExp</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>undefined</code> 、 <code>null</code> 和 <code>Symbol</code> 除外，因为他们没有构造函数。</p>
</blockquote>
<h2 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h2><p>借助 <code>Object</code> 的实例方法 <code>toString</code> 也可以判断数据的类型，该方法会返回类似于 <code>[object xxx]</code> 的字符串格式，<code>xxx</code> 表示该数据类型的构造函数名。但对于 <code>undefined</code> 、<code>null</code> 和 <code>Symbol</code>，不可把 <code>xxx</code> 理解为构造函数，因为他们真的没有。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>,</span><br><span class="line">    str = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    bol = <span class="literal">true</span>,</span><br><span class="line">    arr = [<span class="number">1</span>],</span><br><span class="line">    obj = &#123;<span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>&#125;,</span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">    reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(),</span><br><span class="line">    foo = <span class="literal">null</span>,</span><br><span class="line">    bar = <span class="literal">undefined</span>,</span><br><span class="line">    sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;sym&#x27;</span>),</span><br><span class="line">    fun = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(num)  <span class="comment">// [object Number]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(str)  <span class="comment">// [object String]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(bol)  <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr)  <span class="comment">// [object Array]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj)  <span class="comment">// [object Object]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(date)  <span class="comment">// [object Date]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(reg)  <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(foo)  <span class="comment">// [object Null]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(bar)  <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(sym)  <span class="comment">// [object Symbol]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(fun)  <span class="comment">// [object Function]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如上方代码，各种类型都可以很好的区分，为了使用方便，我们可以将其封装为一个简单的函数调用。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">_val</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(_val)</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">slice</span>( s.<span class="title function_">indexOf</span>(<span class="string">&#x27; &#x27;</span>) + <span class="number">1</span> , s.<span class="property">length</span> - <span class="number">1</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getType</span>(<span class="number">1</span>)  <span class="comment">// Number</span></span><br></pre></td></tr></table></figure>


<h1 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h1><p>前3中方式都有不同的缺陷，使用存在问题，而第4种方式对于所有的数据类型都可以很好的区分，所以可以直接应用在实际项目中。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>数据类型</tag>
        <tag>typeof</tag>
        <tag>instanceof</tag>
      </tags>
  </entry>
  <entry>
    <title>分页器生成工具函数</title>
    <url>/2017/05/06/javascript/instance/pagingDeviceFunction/</url>
    <content><![CDATA[<p>本文介绍如何使用 <code>es5</code> 高阶函数实现分页函数，可直接应用于实际项目中。</p>
<span id="more"></span>

<h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">paging</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  origin , </span></span><br><span class="line"><span class="params">  &#123; </span></span><br><span class="line"><span class="params">    currentPage,</span></span><br><span class="line"><span class="params">    pageSize</span></span><br><span class="line"><span class="params">  &#125; = &#123;</span></span><br><span class="line"><span class="params">    currentPage: <span class="number">0</span>,</span></span><br><span class="line"><span class="params">    pageSize: <span class="number">0</span>,</span></span><br><span class="line"><span class="params">  &#125;,</span></span><br><span class="line"><span class="params">  condition</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  origin = !origin ? [] : origin</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> start_index = ( currentPage - <span class="number">1</span> ) * pageSize,</span><br><span class="line">      end_index = start_index + pageSize,</span><br><span class="line">      originTotal = origin.<span class="property">length</span>,  <span class="comment">// origin total data</span></span><br><span class="line">      data = [],</span><br><span class="line">      total = <span class="number">0</span>,</span><br><span class="line">      isAllConditionNull = !condition || condition.<span class="title function_">every</span>( <span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">value</span> === <span class="string">&#x27;&#x27;</span> || v.<span class="property">value</span> === <span class="literal">null</span> ); <span class="comment">// 是否存在有效过滤条件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// get all origin data when all condition is null character string.</span></span><br><span class="line">  <span class="keyword">if</span> ( isAllConditionNull )&#123;</span><br><span class="line">    data = currentPage &amp;&amp; pageSize ? origin.<span class="title function_">slice</span>( start_index , end_index ) : origin</span><br><span class="line">    total = origin.<span class="property">length</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// filter data</span></span><br><span class="line">    <span class="keyword">const</span> filteredArr = origin.<span class="title function_">filter</span>(<span class="function"><span class="params">ori</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> validMap = condition.<span class="title function_">reduce</span>(<span class="function">(<span class="params">o, v</span>) =&gt;</span> &#123;</span><br><span class="line">        o[v.<span class="property">key</span>] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> o</span><br><span class="line">      &#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> validMap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (validMap.<span class="title function_">hasOwnProperty</span>(k)) &#123;</span><br><span class="line">          <span class="keyword">const</span> curr = condition.<span class="title function_">find</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">key</span> === k )  <span class="comment">// 某条件信息对象</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">/* 匹配方式 S */</span></span><br><span class="line">          <span class="keyword">if</span> (curr.<span class="property">daterange</span>) &#123;  <span class="comment">// 1.日期范围</span></span><br><span class="line">            <span class="keyword">const</span> start = +<span class="keyword">new</span> <span class="title class_">Date</span>( curr.<span class="property">value</span> ? curr.<span class="property">value</span>[<span class="number">0</span>] : <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">const</span> end = +<span class="keyword">new</span> <span class="title class_">Date</span>( curr.<span class="property">value</span> ? curr.<span class="property">value</span>[<span class="number">1</span>] : <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">const</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>( ori[k] )</span><br><span class="line"></span><br><span class="line">            validMap[k] = (start &lt;= now &amp;&amp; end &gt;= now) || !start</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curr.<span class="property">validHandler</span>) &#123; <span class="comment">// 2.自定义校验</span></span><br><span class="line">            validMap[k] = curr.<span class="title function_">validHandler</span>(curr.<span class="property">value</span>, ori[k])</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 3.模糊、全匹配</span></span><br><span class="line">            validMap[k] = (curr.<span class="property">fuzzy</span> ? ori[k].<span class="title function_">search</span>( curr.<span class="property">value</span> ) !== -<span class="number">1</span> : ori[k] == curr.<span class="property">value</span>) || curr.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">/* 匹配方式 E */</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">let</span> k <span class="keyword">in</span> validMap ) <span class="keyword">if</span>( !validMap[k] ) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pagination data from condition filter</span></span><br><span class="line">    data = currentPage &amp;&amp; pageSize ? filteredArr.<span class="title function_">slice</span>( start_index , end_index ) : filteredArr</span><br><span class="line">    <span class="comment">// pagination total data</span></span><br><span class="line">    total = filteredArr.<span class="property">length</span>  </span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    total,</span><br><span class="line">    originTotal,</span><br><span class="line">    data,</span><br><span class="line">    currentPage,</span><br><span class="line">    pageSize,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><h2 id="condition-条件配置"><a href="#condition-条件配置" class="headerlink" title="condition 条件配置"></a>condition 条件配置</h2><p>该参数用来配置条件数据，数据类型：<code>[Array of Object]</code>。</p>
<p><strong>单个键配置实例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="title class_">String</span>,             <span class="comment">// 关键字，String 类型</span></span><br><span class="line">  <span class="attr">value</span>: <span class="title class_">Any</span>,              <span class="comment">// 该关键字的值 Any 类型</span></span><br><span class="line">  <span class="attr">fuzzy</span>: <span class="title class_">Boolean</span>,          <span class="comment">// 是否对该字段进行模糊匹配，Boolean 类型</span></span><br><span class="line">  <span class="attr">daterange</span>: <span class="title class_">Boolean</span>,      <span class="comment">// 该字段是否为日期范围匹配，Boolean 类型，当该值为 true 时，value 需为 Array 类型</span></span><br><span class="line">  <span class="attr">validHandler</span>: <span class="title class_">Function</span>   <span class="comment">// 自定义的匹配函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>注意：<br><code>validHandler</code> 的第一个参数为当前 <code>condition.value</code>，第二个参数的值为当前遍历源数据所取值，即 <code>origin[i][condition.key]</code>。<br>返回值为 <code>true</code> 时表示该数据项被匹配，否则不被匹配。</p>
</div>

<h2 id="origin-Array-of-Object-源数据"><a href="#origin-Array-of-Object-源数据" class="headerlink" title="origin [Array of Object] 源数据"></a>origin [Array of Object] 源数据</h2><p>该参数表示需要进行分页的源数据。注意该源数据数组中的每一项都必须包含 <code>condition</code> 参数所需的 <code>key</code> 属性。</p>
<h2 id="pagination-Object-分页参数"><a href="#pagination-Object-分页参数" class="headerlink" title="pagination [Object] 分页参数"></a>pagination [Object] 分页参数</h2><p>分页配置，可控制从第几页 <code>currentPage</code> 开始获取数据以及每页抓取的数据条数 <code>pageSize</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">currentPage</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">pageSize</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="returns-Object"><a href="#returns-Object" class="headerlink" title="returns [Object]"></a>returns [Object]</h1><p>返回经过条件筛选出的新数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">Array</span> <span class="keyword">of</span> <span class="title class_">Object</span>,              <span class="comment">// 当前页数据</span></span><br><span class="line">  originTotal： <span class="title class_">Number</span>,               <span class="comment">// 源数据总条数</span></span><br><span class="line">  <span class="attr">total</span>: <span class="title class_">Number</span>,                      <span class="comment">// 分页数据总条数</span></span><br><span class="line">  <span class="attr">currentPage</span>: <span class="title class_">Number</span>,                <span class="comment">// 当前页码</span></span><br><span class="line">  <span class="attr">pageSize</span>: <span class="title class_">Number</span>                    <span class="comment">// 每页条数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>假设我们有如下的数据需要进行分页过滤。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originArr = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span> , <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span> , <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;c&#x27;</span> , <span class="attr">age</span>: <span class="number">17</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;d&#x27;</span> , <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;e&#x27;</span> , <span class="attr">age</span>: <span class="number">19</span> &#125;</span><br><span class="line">  <span class="comment">/* ... */</span> </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>使用  <code>paging</code> 函数进行分页抓取源数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pagingArr = <span class="title function_">paging</span>( </span><br><span class="line">  originArr, &#123;<span class="attr">currentPage</span>: <span class="number">1</span>, <span class="attr">pageSize</span>: <span class="number">2</span>&#125;, </span><br><span class="line">  [&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;c&#x27;</span></span><br><span class="line">  &#125;] </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( pagingArr )</span><br><span class="line"><span class="comment">// [&#123; name: &#x27;c&#x27; , age: 17 &#125;]</span></span><br></pre></td></tr></table></figure>

<p>如果需要加入多个条件进行匹配，向 <code>condition</code> 参数添加其他要限制的过滤条件配置即可。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>分页算法</tag>
        <tag>分页器</tag>
        <tag>pagination</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重</title>
    <url>/2016/04/14/javascript/instance/repetitionHandle/</url>
    <content><![CDATA[<p>数组去重的常用方法</p>
<span id="more"></span>

<h1 id="es5-Array-prototype-reduce-法"><a href="#es5-Array-prototype-reduce-法" class="headerlink" title="es5 Array.prototype.reduce 法"></a>es5 Array.prototype.reduce 法</h1><blockquote>
<p>reduce() 方法对累计器和数组中的每个元素（从左到右）应用一个函数，将其简化为单个值。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">2</span> , <span class="string">&quot;a&quot;</span> , <span class="string">&quot;a&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">sort</span>().<span class="title function_">reduce</span>( <span class="function">(<span class="params"> init , curr </span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ( init.<span class="property">length</span> === <span class="number">0</span> || (init[init.<span class="property">length</span>-<span class="number">1</span>]) !== curr )</span><br><span class="line">  init.<span class="title function_">push</span>(curr);</span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line">&#125; , [])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( res );  <span class="comment">// [1, 2, 3, 6, 7, 8, 9, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<h1 id="es6-Set数据结构法"><a href="#es6-Set数据结构法" class="headerlink" title="es6 Set数据结构法"></a>es6 Set数据结构法</h1><blockquote>
<p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( result );  <span class="comment">// [1, 2, 3, 6, 7, 8, 9, &quot;a&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>去重</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2016/01/01/javascript/regexp/regexp/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。</p>
<span id="more"></span>

<p>新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/</span>;</span><br></pre></td></tr></table></figure>

<p>另一种是使用RegExp构造函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;xyz&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>上面两种写法是等价的，都新建了一个内容为xyz的正则表达式对象。它们的主要区别是，第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。</p>
<p>RegExp构造函数还可以接受第二个参数，表示修饰符（详细解释见下文）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;xyz&#x27;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码中，正则表达式&#x2F;xyz&#x2F;有一个修饰符i。</p>
<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="g修饰符"><a href="#g修饰符" class="headerlink" title="g修饰符"></a><code>g</code>修饰符</h2><p>默认情况下，第一次匹配成功后，正则对象就停止向下匹配了。<code>g</code>修饰符表示全局匹配（global），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。</p>
<h2 id="i修饰符"><a href="#i修饰符" class="headerlink" title="i修饰符"></a><code>i</code>修饰符</h2><p>默认情况下，正则对象区分字母的大小写，加上<code>i</code>修饰符以后表示忽略大小写（ignorecase）。</p>
<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>\d</code></td>
<td align="center">查找数字 <code>[0-9]</code></td>
</tr>
<tr>
<td align="center"><code>\D</code></td>
<td align="center">非数字字符 <code>[^0-9]</code></td>
</tr>
<tr>
<td align="center"><code>\w</code></td>
<td align="center">单词字符 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td align="center"><code>\W</code></td>
<td align="center">非单词字符 <code>[^a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td align="center"><code>\s</code></td>
<td align="center">不可见字符，包含空格 <code>[\f\r\n\t\v]</code></td>
</tr>
<tr>
<td align="center"><code>\S</code></td>
<td align="center">非不可见字符 <code>[\f\r\n\t\v]</code></td>
</tr>
<tr>
<td align="center"><code>\t</code></td>
<td align="center">查找制表符</td>
</tr>
<tr>
<td align="center"><code>.</code></td>
<td align="center">除了换行和回车之外的任一字符  <code>[^\n\r]</code></td>
</tr>
</tbody></table>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>()</code></td>
<td align="center">提升优先级，优先级最高 ，一个 <code>()</code> 表示一个组匹配</td>
</tr>
<tr>
<td align="center"><code>[]</code></td>
<td align="center">表示一个字符的位置，<code>[]</code> 中定义需要匹配的字符</td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center"><code>[]</code> 中表示非 ， <code>//</code> 中表示匹配开始位置</td>
</tr>
<tr>
<td align="center"><code>&#123;&#125;</code></td>
<td align="center">定义量词，表示某字符出现的次数</td>
</tr>
</tbody></table>
<blockquote>
<p><code>|</code>  表示或者，优先级最低。 </p>
</blockquote>
<div class="note warning"><p>注：<strong>1.</strong> 在 <code>[]</code> 中，特殊字符不需要使用 <code>\</code> 进行转义处理，但是如果需要使用 <code>[]</code> 匹配 <code>\</code> 自身的话，那么就需要转义。<br><strong>2.</strong> 对于字符 <code>-</code> 来说，如果是放在数字或字母之间，则表示匹配这一段范围的字符，否则就是匹配 <code>-</code> 自身。</p>
</div>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配 \</span></span><br><span class="line">(<span class="regexp">/[\\]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;\\&#x27;</span>))</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配其他特殊字符</span></span><br><span class="line">(<span class="regexp">/[+]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;+&#x27;</span>))</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 -</span></span><br><span class="line">(<span class="regexp">/[-]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 0-9 a-z</span></span><br><span class="line">(<span class="regexp">/[0-9a-z]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;5&#x27;</span>))</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h1><table>
<thead>
<tr>
<th align="center">格式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>x&#123;n,m&#125;</code></td>
<td align="center">表示 x 出现 n 至 m 次 ， <code>x&gt;=n &amp;&amp; x&lt;=m</code></td>
</tr>
<tr>
<td align="center"><code>x&#123;n,&#125;</code></td>
<td align="center">x 出现 n 个以上 ，<code>x&gt;=n</code></td>
</tr>
<tr>
<td align="center"><code>x&#123;n&#125;</code></td>
<td align="center">x 出现 n 个 ，<code>x==n</code></td>
</tr>
<tr>
<td align="center"><code>x+</code></td>
<td align="center">x 出现 1个 或 1个 以上，<code>x&gt;=1</code></td>
</tr>
<tr>
<td align="center"><code>x*</code></td>
<td align="center">x 出现 0个 或 0个 以上，<code>x&gt;=0</code></td>
</tr>
<tr>
<td align="center"><code>x?</code></td>
<td align="center">x 出现 0个 或 1个，<code>x==0 或 x==1</code></td>
</tr>
<tr>
<td align="center"><code>^x</code></td>
<td align="center">以x开始</td>
</tr>
<tr>
<td align="center"><code>x$</code></td>
<td align="center">以x结尾</td>
</tr>
</tbody></table>
<h1 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h1><p>如果需要匹配特殊字符（比如：RegExp 中使用到的特殊字符）。那么，我们需要对这些字符使用 <code>\</code> 进行转义。</p>
<p>需要转义的特殊字符有：</p>
<ul>
<li><code>\</code></li>
<li><code>/</code></li>
<li><code>+</code></li>
<li><code>-</code></li>
<li><code>*</code></li>
<li><code>.</code></li>
<li><code>&#123;</code></li>
<li><code>&#125;</code></li>
<li><code>^</code></li>
<li><code>$</code></li>
<li><code>(</code></li>
<li><code>)</code></li>
<li><code>[</code></li>
<li><code>]</code></li>
</ul>
<p>例如，匹配 <code>/</code> 字符时，我们需要转义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="regexp">/\//</span>.<span class="title function_">test</span>(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<div class="note warning"><p>如果是以 <code>new RegExp()</code> 构造函数的方式定义正则表达式，由于其中的参数是字符串类型，所以在转义的时候需要使用两个 <code>\\</code> 进行转义。</p>
</div>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\/&#x27;</span>).<span class="title function_">test</span>(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>特殊的：</strong></p>
<p>在对 <code>\</code> 进行匹配时，需要进行特殊处理，原因是 <code>\</code> 本身就是转义符。以下分别是以字面量方式和构造函数定义正则时的写法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 字面量</span></span><br><span class="line">(<span class="regexp">/\\/</span>.<span class="title function_">test</span>(<span class="string">&#x27;\\&#x27;</span>))</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 构造函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\\\&#x27;</span>).<span class="title function_">test</span>(<span class="string">&#x27;\\&#x27;</span>))</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：传入的 <code>\\</code> 测试字符加入了 2 个，是因为 javascript 引擎会认为需要将右边的引号 <code>&#39;</code> 转义，所以加一个 <code>\</code>。</p>
</blockquote>
<h1 id="RegExp实例方法"><a href="#RegExp实例方法" class="headerlink" title="RegExp实例方法"></a>RegExp实例方法</h1><h2 id="RegExp-prototype-test"><a href="#RegExp-prototype-test" class="headerlink" title="RegExp.prototype.test()"></a>RegExp.prototype.test()</h2><p>检索字符串是否满足正则表达式的要求。<br/><br>参数：<code>string</code>类型，需要检测的字符串 <br/><br>返回值：<code>boolean</code> 类型 ，<code>true</code> 表示匹配满足正则表达式要求，<code>false</code> 表示不满足要求</p>
<h2 id="RegExp-prototype-exec"><a href="#RegExp-prototype-exec" class="headerlink" title="RegExp.prototype.exec()"></a>RegExp.prototype.exec()</h2><p>正则实例对象的<code>exec</code>方法，用来返回匹配结果。如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回<code>null</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;_x_x&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> r1 = <span class="regexp">/x/</span>;</span><br><span class="line"><span class="keyword">var</span> r2 = <span class="regexp">/y/</span>;</span><br><span class="line"></span><br><span class="line">r1.<span class="title function_">exec</span>(s) <span class="comment">// [&quot;x&quot;]</span></span><br><span class="line">r2.<span class="title function_">exec</span>(s) <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，正则对象<code>r1</code>匹配成功，返回一个数组，成员是匹配结果；正则对象<code>r2</code>匹配失败，返回<code>null</code>。</p>
<p>如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的<code>length</code>属性等于组匹配的数量再加1。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;_x_x&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/_(x)/</span>;</span><br><span class="line"></span><br><span class="line">r.<span class="title function_">exec</span>(s) <span class="comment">// [&quot;_x&quot;, &quot;x&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面代码的<code>exec</code>方法，返回一个数组。第一个成员是整个匹配的结果，第二个成员是圆括号匹配的结果。</p>
<p><code>exec</code>方法的返回数组还包含以下两个属性：<br/></p>
<ol>
<li><code>input</code>：整个原字符串。</li>
<li><code>index</code>：整个模式匹配成功的开始位置（从0开始计数）。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="regexp">/a(b+)a/</span>;</span><br><span class="line"><span class="keyword">var</span> arr = r.<span class="title function_">exec</span>(<span class="string">&#x27;_abbba_aba_&#x27;</span>);</span><br><span class="line"></span><br><span class="line">arr <span class="comment">// [&quot;abbba&quot;, &quot;bbb&quot;]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="property">index</span> <span class="comment">// 1</span></span><br><span class="line">arr.<span class="property">input</span> <span class="comment">// &quot;_abbba_aba_&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中的<code>index</code>属性等于1，是因为从原字符串的第二个位置开始匹配成功。</p>
<p>如果正则表达式加上<code>g</code>修饰符，则可以使用多次<code>exec</code>方法，下一次搜索的位置从上一次匹配成功结束的位置开始。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc_abc_abc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r1 = reg.<span class="title function_">exec</span>(str);</span><br><span class="line">r1 <span class="comment">// [&quot;a&quot;]</span></span><br><span class="line">r1.<span class="property">index</span> <span class="comment">// 0</span></span><br><span class="line">reg.<span class="property">lastIndex</span> <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r2 = reg.<span class="title function_">exec</span>(str);</span><br><span class="line">r2 <span class="comment">// [&quot;a&quot;]</span></span><br><span class="line">r2.<span class="property">index</span> <span class="comment">// 4</span></span><br><span class="line">reg.<span class="property">lastIndex</span> <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r3 = reg.<span class="title function_">exec</span>(str);</span><br><span class="line">r3 <span class="comment">// [&quot;a&quot;]</span></span><br><span class="line">r3.<span class="property">index</span> <span class="comment">// 8</span></span><br><span class="line">reg.<span class="property">lastIndex</span> <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r4 = reg.<span class="title function_">exec</span>(str);</span><br><span class="line">r4 <span class="comment">// null</span></span><br><span class="line">reg.<span class="property">lastIndex</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p>上面代码连续用了四次<code>exec</code>方法，前三次都是从上一次匹配结束的位置向后匹配。当第三次匹配结束以后，整个字符串已经到达尾部，匹配结果返回<code>null</code>，正则实例对象的<code>lastIndex</code>属性也重置为<code>0</code>，意味着第四次匹配将从头开始。</p>
<p>利用<code>g</code>修饰符允许多次匹配的特点，可以用一个循环完成全部匹配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc_abc_abc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> match = reg.<span class="title function_">exec</span>(str);</span><br><span class="line">  <span class="keyword">if</span> (!match) <span class="keyword">break</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span> + match.<span class="property">index</span> + <span class="string">&#x27;:&#x27;</span> + match[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #0:a</span></span><br><span class="line"><span class="comment">// #4:a</span></span><br><span class="line"><span class="comment">// #8:a</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，只要<code>exec</code>方法不返回null，就会一直循环下去，每次输出匹配的位置和匹配的文本。</p>
<p>正则实例对象的<code>lastIndex</code>属性不仅可读，还可写。设置了<code>g</code>修饰符的时候，只要手动设置了<code>lastIndex</code>的值，就会从指定位置开始匹配。</p>
<h1 id="常见验证"><a href="#常见验证" class="headerlink" title="常见验证"></a>常见验证</h1><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><blockquote>
<p>前面是字母或者数字<br>必须有@<br>@后面是字母或者数字<br>必须有.<br>.后面是字母或者数字</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="regexp">/^\w+@\w+(\.\w+)+$/</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h2><blockquote>
<p>11位数字组成<br>号段13[0-9] 147 15[0-9] 177[0178] 18[0-9]</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/^(13[0-9]|147|15[0-9]|17[0178]|18[0-9])\d&#123;8&#125;$/</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="中文名"><a href="#中文名" class="headerlink" title="中文名"></a>中文名</h2><blockquote>
<p>只能是汉字<br>长度2-6位之间<br>汉字范围[\u4e00-\u9fa5]</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,6&#125;$/</span>;</span><br></pre></td></tr></table></figure>

<h2 id="小数位数"><a href="#小数位数" class="headerlink" title="小数位数"></a>小数位数</h2><blockquote>
<p>只能是数字<br>小数位数不得超过 2 位</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="regexp">/^\d+(.\d&#123;1,2&#125;)?$/</span></span><br></pre></td></tr></table></figure>

<h2 id="金额验证"><a href="#金额验证" class="headerlink" title="金额验证"></a>金额验证</h2><blockquote>
<p>十进制位及以上不能为 0<br>最多保留2位小数<br>必需为数值<br>可以为空</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^(((^[1-9]\\d*)|(^[0-9]))+(\\.\\d&#123;1,2&#125;)?)?$&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>RegExp</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket教程</title>
    <url>/2018/10/20/javascript/websocket/howtousewebsocket/</url>
    <content><![CDATA[<p><code>WebSocket</code> 是一种网络通信协议，本文记录关于它的语法说明。</p>
<span id="more"></span>

<h1 id="为什么需要-WebSocket？"><a href="#为什么需要-WebSocket？" class="headerlink" title="为什么需要 WebSocket？"></a>为什么需要 WebSocket？</h1><p>初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？</p>
<p>答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。</p>
<p>举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。</p>
<p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用”轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p>
<p>轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。</p>
<p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p>
<p><strong>其他特点包括：</strong></p>
<p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p>
<p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p>
<p>（3）数据格式比较轻量，性能开销小，通信高效。</p>
<p>（4）可以发送文本，也可以发送二进制数据。</p>
<p>（5）没有同源限制，客户端可以与任意服务器通信。</p>
<p>（6）协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ws://example.com:80/some/path</span><br></pre></td></tr></table></figure>

<h1 id="客户端的API"><a href="#客户端的API" class="headerlink" title="客户端的API"></a>客户端的API</h1><h2 id="WebSocket-构造函数"><a href="#WebSocket-构造函数" class="headerlink" title="WebSocket 构造函数"></a>WebSocket 构造函数</h2><p>WebSocket 对象作为一个构造函数，用于新建 WebSocket 实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>执行上面语句之后，客户端就会与服务器进行连接。</p>
<p>实例对象的所有属性和方法清单，参见<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank">这里</a>。</p>
<h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><h3 id="ws-readyState"><a href="#ws-readyState" class="headerlink" title="ws.readyState"></a>ws.readyState</h3><p><code>readyState</code> 属性返回实例对象的当前状态，共有四种:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">CONNECTING：值为0，表示正在连接。</span><br><span class="line">OPEN：值为1，表示连接成功，可以通信了。</span><br><span class="line">CLOSING：值为2，表示连接正在关闭。</span><br><span class="line">CLOSED：值为3，表示连接已经关闭，或者打开连接失败。</span><br></pre></td></tr></table></figure>

<p>下面是一个实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (ws.<span class="property">readyState</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="title class_">WebSocket</span>.<span class="property">CONNECTING</span>:</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>:</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="title class_">WebSocket</span>.<span class="property">CLOSING</span>:</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="title class_">WebSocket</span>.<span class="property">CLOSED</span>:</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="comment">// this never happens</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="相关事件"><a href="#相关事件" class="headerlink" title="相关事件"></a>相关事件</h2><h3 id="ws-onopen"><a href="#ws-onopen" class="headerlink" title="ws.onopen"></a>ws.onopen</h3><p>实例对象的<code>onopen</code>属性，用于指定连接成功后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;Hello Server!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ws-onmessage"><a href="#ws-onmessage" class="headerlink" title="ws.onmessage"></a>ws.onmessage</h3><p>实例对象的onmessage属性，用于指定收到服务器数据后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.<span class="property">data</span>;</span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="ws-onclose"><a href="#ws-onclose" class="headerlink" title="ws.onclose"></a>ws.onclose</h3><p>实例对象的onclose属性，用于指定连接关闭后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> code = event.<span class="property">code</span>;</span><br><span class="line">  <span class="keyword">var</span> reason = event.<span class="property">reason</span>;</span><br><span class="line">  <span class="keyword">var</span> wasClean = event.<span class="property">wasClean</span>;</span><br><span class="line">  <span class="comment">// handle close event</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="ws-onerror"><a href="#ws-onerror" class="headerlink" title="ws.onerror"></a>ws.onerror</h3><p>实例对象的onerror属性，用于指定报错时的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( err )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><h3 id="ws-send"><a href="#ws-send" class="headerlink" title="ws.send()"></a>ws.send()</h3><p>实例对象的send()方法用于向服务器发送数据。</p>
<p>发送文本的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">send</span>(<span class="string">&#x27;your message&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>发送 Blob 对象的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="variable language_">document</span></span><br><span class="line">  .<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>)</span><br><span class="line">  .<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">ws.<span class="title function_">send</span>(file);</span><br></pre></td></tr></table></figure>

<p>发送 ArrayBuffer 对象的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sending canvas ImageData as ArrayBuffer</span></span><br><span class="line"><span class="keyword">var</span> img = canvas_context.<span class="title function_">getImageData</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">320</span>);</span><br><span class="line"><span class="keyword">var</span> binary = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(img.<span class="property">data</span>.<span class="property">length</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; img.<span class="property">data</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  binary[i] = img.<span class="property">data</span>[i];</span><br><span class="line">&#125;</span><br><span class="line">ws.<span class="title function_">send</span>(binary.<span class="property">buffer</span>);</span><br></pre></td></tr></table></figure>

<h3 id="ws-close"><a href="#ws-close" class="headerlink" title="ws.close()"></a>ws.close()</h3><p>该方法用于关闭连接。</p>
<h1 id="服务端的实现"><a href="#服务端的实现" class="headerlink" title="服务端的实现"></a>服务端的实现</h1><p>常用的 <code>node</code> 实现有如下几种：</p>
<ul>
<li><a href="https://github.com/websockets/ws" target="_blank">ws</a></li>
<li><a href="https://socket.io/" target="_blank">Socket.IO</a></li>
<li><a href="https://github.com/uNetworking/uWebSockets" target="_blank">µWebSockets</a></li>
<li><a href="https://github.com/theturtle32/WebSocket-Node" target="_blank">WebSocket-Node</a></li>
</ul>
<p>具体用法查看其官网文档即可</p>
<h1 id="聊天案例"><a href="#聊天案例" class="headerlink" title="聊天案例"></a>聊天案例</h1><p>这里有一个 使用 <code>node</code> 实现的简易聊天案例，客户端使用的是原生 <code>api</code>，服务端则使用的是 <code>ws</code> 模块。 <br /><br><a href="https://github.com/yisibell/websocket-chat-demo" target="_blank">案例传送门</a></p>
]]></content>
      <categories>
        <category>WebSocket</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中的this问题</title>
    <url>/2019/09/02/javascript/this/this/</url>
    <content><![CDATA[<p>本文记录 <code>javascript</code> 中有关 <code>this</code> 的问题。</p>
<span id="more"></span>


<h1 id="先看一道题"><a href="#先看一道题" class="headerlink" title="先看一道题"></a>先看一道题</h1><p>如下代码，思考其中的各个打印都是什么？原因又是什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 当前函数环境</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);           <span class="comment">// log1</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 立即执行函数</span></span><br><span class="line">  (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);         <span class="comment">// log2</span></span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// es5普通函数</span></span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);         <span class="comment">// log3</span></span><br><span class="line">    <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// es6箭头函数</span></span><br><span class="line">  <span class="keyword">let</span> brr = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;es6&quot;</span>, <span class="variable language_">this</span>);  <span class="comment">// log4</span></span><br><span class="line">    <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">call</span>(&#123; <span class="attr">a</span>: <span class="number">100</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上面代码中，我们首先声明了一个函数 <code>fn</code>，并在其后使用 <code>fn.call()</code> 的方式对其进行了调用，传入的 <code>&#123;a: 100&#125;</code> 对象使得 <code>fn</code> 函数中的 <code>上下文环境</code> 变为了 <code>&#123;a: 100&#125;</code>。<br>再看 <code>fn</code> 函数内部：</p>
<ul>
<li><code>log1</code> 打印，该行代码身处 <code>fn</code> 函数，<code>上下文环境</code> 为 <code>&#123;a: 100&#125;</code> ，所以，<code>this</code> 为 <code>&#123;a: 100&#125;</code>。</li>
<li><code>log2</code> 打印，该行代码不再处于 <code>fn</code> 函数的 <code>上下文环境</code>，而是在一个 <code>立即执行函数</code> 中执行，<code>this</code> 指向全局 <code>window</code>。</li>
<li><code>log3</code> 打印，这句打印被写在了 <code>es5</code> 的一个普通回调函数中，同样的 <code>this</code> 指向 <code>window</code>。</li>
<li><code>log4</code> 打印，这次的回调函数使用了 <code>es6</code> 中的<code>箭头函数</code>，由于 <code>箭头函数</code> 本身没有 <code>this</code> 所需的执行环境上下文，所以会沿着作用域链向上查找，直到找到 <code>fn</code> 函数的上下文环境 <code>&#123;a: 100&#125;</code>。</li>
</ul>
<p>最终结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span></span><br><span class="line"><span class="title class_">Window</span></span><br><span class="line"><span class="title class_">Window</span></span><br><span class="line"><span class="title class_">Window</span></span><br><span class="line"><span class="title class_">Window</span></span><br><span class="line">es6 <span class="title class_">Object</span></span><br><span class="line">es6 <span class="title class_">Object</span></span><br><span class="line">es6 <span class="title class_">Object</span></span><br></pre></td></tr></table></figure>

<p>上面打印中的 <code>Object</code> 就是 <code>&#123;a: 100&#125;</code> 了。</p>
<h1 id="再看一个例子"><a href="#再看一个例子" class="headerlink" title="再看一个例子"></a>再看一个例子</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>) &#125;,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = obj.<span class="property">foo</span>;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">foo</span>()     <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>如上代码，执行的结果会有所不同。</p>
<div class="note success"><p>这种差异的原因，就在于函数体内部使用了 <code>this</code> 关键字。很多教科书会告诉你，<code>this</code> 指的是函数运行时所在的环境。对于<code>obj.foo()</code>来说，<code>foo</code>运行在<code>obj</code>环境，所以<code>this</code>指向<code>obj</code>；对于<code>foo()</code>来说，<code>foo</code>运行在全局环境，所以<code>this</code>指向全局环境。所以，两者的运行结果不一样。</p>
<p>这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么<code>obj.foo()</code>就是在<code>obj</code>环境执行，而一旦<code>var foo = obj.foo，foo()</code>就变成在全局环境执行？</p>
</div>

<p>下面就来解释 <code>JavaScript</code> 这样处理的原理。理解了这一点，你就会彻底理解 <code>this</code> 的作用。</p>
<h1 id="内存的数组结构"><a href="#内存的数组结构" class="headerlink" title="内存的数组结构"></a>内存的数组结构</h1><p><code>JavaScript</code> 语言之所以有 <code>this</code> 的设计，跟内存里面的数据结构有关系。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>:  <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>上面的代码将一个对象赋值给变量 <code>obj</code>。JavaScript 引擎会先在内存里面，生成一个对象 <code>&#123; foo: 5 &#125;</code>，然后把这个对象的内存地址赋值给变量 <code>obj</code>。</p>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g6m257iqo6j30cr064glg.jpg" />


<p>也就是说，变量 <code>obj</code> 是一个地址（reference）。后面如果要读取 <code>obj.foo</code>，引擎先从<code>obj</code>拿到内存地址，然后再从该地址读出原始的对象，返回它的<code>foo</code>属性。</p>
<p>原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。举例来说，上面例子的 <code>foo</code> 属性，实际上是以下面的形式保存的。</p>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g6m25sfu32j30l50820st.jpg" />


<blockquote>
<p>注意，foo属性的值保存在属性描述对象的 <code>value</code> 属性里面。对象属性描述请参考 <a class="fc-danger" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"> Object.defineProperty APIS</a>。</p>
</blockquote>
<h1 id="对象属性为函数"><a href="#对象属性为函数" class="headerlink" title="对象属性为函数"></a>对象属性为函数</h1><p>这样的结构是很清晰的，问题在于属性的值可能是一个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; &#125;;</span><br></pre></td></tr></table></figure>

<p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给 <code>foo</code> 属性的 <code>value</code> 属性。</p>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g6m25rwafxj30li09p74i.jpg" />


<p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">f</span>: f &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.<span class="title function_">f</span>()</span><br></pre></td></tr></table></figure>

<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数体里面使用了变量 <code>x</code>。该变量由运行环境提供。</p>
<p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，<code>this</code> 就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，函数体里面的 <code>this.x</code> 就是指当前运行环境的 <code>x</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">f</span>: f,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.<span class="title function_">f</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，函数f在全局环境执行，<code>this.x</code> 指向全局环境的x。</p>
<img src="http://wx2.sinaimg.cn/mw690/005KBvkkgy1g6m25qtixuj30lp0hdaam.jpg" />


<p>当在 <code>obj</code> 环境中执行，<code>this.x</code> 则指向 <code>obj.x</code>。</p>
<img src="http://wx4.sinaimg.cn/mw690/005KBvkkgy1g6m25rejyjj30lr0h50tb.jpg" />


<p>回到第二个例子，<code>obj.foo()</code> 是通过 <code>obj</code> 找到 <code>foo</code>，所以就是在 <code>obj</code> 环境执行。一旦<code>var foo = obj.foo</code>，变量 <code>foo</code> 就直接指向函数本身，所以 <code>foo()</code> 就变成在全局环境执行。</p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"> name , age </span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;hong&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( p.<span class="property">name</span> , p.<span class="property">age</span> ) <span class="comment">// hong 18</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上代码所示，对于构造函数中的 <code>this</code> 始终指向当前实例对象。</p>
<h1 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h1><p>那么，在DOM事件处理函数中，<code>this</code> 指向当前被绑定事件的 DOM 元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line"></span><br><span class="line">body.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span> === e.<span class="property">target</span> )   <span class="comment">// true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>this</code> 的指向与函数定义时所处的环境无关，而是与其执行环境相关。各种情况如下：</p>
<ol>
<li><p>作为普通函数调用时，函数中的 <code>this</code> 始终指向全局环境。</p>
</li>
<li><p>作为对象属性调用时，函数中的 <code>this</code>，指向该对象。</p>
</li>
<li><p>构造函数中的 <code>this</code> 指向实例对象。</p>
</li>
<li><p>DOM 事件中的 <code>this</code> 指向被绑事件 DOM 元素。</p>
</li>
<li><p>箭头函数中无执行上下文，<code>this</code> 沿作用域向上查找。</p>
</li>
<li><p>被 <code>call</code>、<code>apply</code> 和 <code>bind</code> 改变过 <code>上下文环境</code> 的函数调用，<code>this</code> 指向被绑对象。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery核心</title>
    <url>/2016/05/26/jquery/docs/jquery-core/</url>
    <content><![CDATA[<p>记录jQuery 的核心知识。</p>
<span id="more"></span>

<h2 id="jQuery框架结构代码"><a href="#jQuery框架结构代码" class="headerlink" title="jQuery框架结构代码"></a>jQuery框架结构代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.函数自调用，防止内部变量泄露，污染全局中的其他变量，将window作为实参传入，方便代码压缩</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params"><span class="variable language_">window</span></span>)&#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//3.定义工厂函数 jQuery</span></span><br><span class="line">    <span class="keyword">var</span> jQuery = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//4.这里面封装了构造函数init,将通过new关键字创建jQuery实例对象的方法返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>();</span><br><span class="line">      </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//5.jQuery中封装的所有功能方法都会绑定在jQuery 的原型对象上，这样jQuery 的实例对象可以使用这些方法和属性。并且给jQuery的原型对象取了个别名: jQuery.fn。</span></span><br><span class="line">      </span><br><span class="line">     jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">        <span class="attr">constructor</span>: jQuery   <span class="comment">// 为了不破坏原型链，指回了jQuery 工厂函数</span></span><br><span class="line">        </span><br><span class="line">         <span class="comment">//jQuery 的 各种功能方法在此封装</span></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">      <span class="comment">//6.定义 构造函数 init</span></span><br><span class="line">      <span class="keyword">var</span> init = jQuery.<span class="property">fn</span>.<span class="property">init</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//7.为了方便以后扩展插件功能，共享原型</span></span><br><span class="line">      <span class="comment">//将构造函数init的prototype 指向 工厂函数jQuery的 prototype</span></span><br><span class="line">      </span><br><span class="line">      init.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span>;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//2.将jQuery工厂函数暴露到全局中，$ 是 jQuery 的别名，方便用户使用</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jQuery</span> = <span class="variable language_">window</span>.<span class="property">$</span> = jQuery;       </span><br><span class="line">  &#125;)(<span class="variable language_">window</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="jquery框架设计结构图"><a href="#jquery框架设计结构图" class="headerlink" title="jquery框架设计结构图"></a>jquery框架设计结构图</h2><p><img src="http://wx3.sinaimg.cn/mw690/005KBvkkgy1g04wajhl5xj30oh0ki75q.jpg" alt="jquery框架设计结构图"></p>
<h2 id="jQuery中的extend方法"><a href="#jQuery中的extend方法" class="headerlink" title="jQuery中的extend方法"></a>jQuery中的extend方法</h2><p>jq中的extend的方法来给工厂函数jQuery以及jQuery的原型对象扩展方法（给jq实例扩展方法）。</p>
<p>实现原理：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//首先给jQuery的原型和工厂函数jQuery添加extend方法</span></span><br><span class="line"> jQuery.<span class="property">fn</span>.<span class="property">extend</span> = jQuery.<span class="property">extend</span> = <span class="keyword">function</span>(<span class="params">obj</span>)&#123;     </span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">       <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(k))&#123;   <span class="comment">//判断属性k是不是obj 自身的，而不是原型链上的</span></span><br><span class="line">         <span class="variable language_">this</span>[k] = obj[k];  <span class="comment">//谁调用给谁添加属性K</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：for...in 遍历会遍历原型链上的属性和方法，消耗性能</span></span><br><span class="line"> </span><br><span class="line"> jQuery.<span class="title function_">extend</span>(&#123;</span><br><span class="line">   toArray : <span class="keyword">function</span>(<span class="params"></span>)&#123;   <span class="comment">//给jQuery工厂函数扩展方法</span></span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery插件的扩展原理型"><a href="#jQuery插件的扩展原理型" class="headerlink" title="jQuery插件的扩展原理型"></a>jQuery插件的扩展原理型</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原理：给 $ 或 jQuery函数的原型对象添加属性和方法。</span></span><br><span class="line"><span class="comment">//例：</span></span><br><span class="line"></span><br><span class="line">$.prototype.<span class="property">accordion</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><p>jQuery对象是一个伪数组，通过$(selector)获取到的对象是JQuery对象，这个对象里存储了length个dom对象。</p>
<p>###jQuery对象和dom对象</p>
<p>通过Jquery获取页面元素得到的对象就是jquery对象。而dom对象是通过js获取页面元素得到的对象。</p>
<p>jQuery对象是一个对象，它是一个包装集, 包装了很多 dom 对象的集合。</p>
<p>jQuery对象不能直接调用dom对象的方法，我们可以通过两种方法获取到jQuery对象包装集里的dom对象，来调用dom对象的方法。</p>
<p><strong>方法1：通过下标的方式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = (<span class="string">&quot;li&quot;</span>);</span><br><span class="line">$lis[<span class="number">0</span>].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>方法2：利用get()方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = (<span class="string">&quot;li&quot;</span>);</span><br><span class="line">$lis.<span class="title function_">get</span>(<span class="number">0</span>).<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>dom对象转jq对象方法：</strong></p>
<p>将dom对象丢进$() 中。</p>
<p>dom对象不能直接调用jQuery对象的方法，我们可以将dom对象转换成jQuery对象再使用。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cloth = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;cloth&quot;</span>);</span><br><span class="line">$(cloth).<span class="title function_">text</span>(<span class="string">&quot;我是通过jQuery设置的文本内容&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>###jQuery对象中的实例成员和静态成员</p>
<p><strong>1.静态成员</strong></p>
<p>绑定在构造函数上的属性和方法，供构造函数自己使用。此时的构造函数作为对象来理解。</p>
<p><strong>2.实例成员</strong></p>
<p>设置在构造函数体中的属性和方法以及构造函数原型上的属性和方法，供构造函数创建的实例对象使用。</p>
<p><strong>例：</strong></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">  name = <span class="string">&quot;elen&quot;</span>;  <span class="comment">// 实例成员</span></span><br><span class="line">  age = <span class="number">18</span>;    <span class="comment">// 实例成员</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;   <span class="comment">// 实例成员</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">sex</span> = <span class="string">&quot;male&quot;</span>;   <span class="comment">// 静态成员</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>###jQuery实例对象的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>index()</td>
<td><strong>作用</strong>：求元素的索引值<br><strong>语法：</strong>index(obj)<br><strong>参数</strong>：obj  :   dom对象<br>1. 不传参数：表示返回该元素在兄弟元素中的索引值 <br>2. 传参数：表示返回在dom对象这个集合中对应的索引值</td>
</tr>
<tr>
<td>each()</td>
<td><strong>作用：</strong>以每一个匹配的元素作为上下文来执行一个函数。即遍历操作dom元素。 意味着，每次执行传递进来的函数时，函数中的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。而且，在每次执行函数时，都会给函数传递一个表示作为执行环境的元素在匹配的元素集合中所处位置的数字值作为参数（从零开始的整型）。 返回 ‘false’ 将停止循环 (就像在普通的循环中使用 ‘break’)。返回 ‘true’ 跳至下一个循环(就像在普通的循环中使用’continue’)。<br><strong>语法：each(function(index, ele){…})</strong><br>注：实例方法each() 实际上用的就是jq的静态成员方法each()<br>源码如下：<br>each : function(callback){ return jQuery.each(this, callback);}<br>终止循环遍历使用 return false</td>
</tr>
<tr>
<td>size()</td>
<td>返回jQuery对象中元素的个数</td>
</tr>
<tr>
<td>get()</td>
<td>这能够让你选择一个实际的DOM 元素并且对他直接操作，而不是通过 jQuery 函数。$(this).get(0)与$(this)[0]等价。<br><strong>语法：$(selector).get(index)</strong><br>参数：index  索引值<br>返回值：返回jq对象（伪数组）中索引为index的dom对象不传参时返回的由dom对象组成的伪数组</td>
</tr>
</tbody></table>
<p>###jQuery对象的属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>length</td>
<td>jQuery 对象（伪数组）中元素的个数。</td>
</tr>
</tbody></table>
<p> ###jQuery对象中的静态成员方法</p>
<p>绑定在工厂函数jQuery上的方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>each()</td>
<td>作用：遍历对象<br>语法：$.each(obj, function(index, element){})<br>参数：obj  要遍历的对象（数组，对象，伪数组）<br>index  索引值<br>element   元素的值<br>返回值：遍历的对象obj<br>注：1.执行时，回调函数中的this 指向遍历的每一个值（element）<br>2.如果想中断遍历，在回调函数中return false 即可<br>3.each返回遍历的对象，即会将obj 又返回</td>
</tr>
</tbody></table>
<p>###静态成员方法each()的封装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">each</span>(<span class="params">obj, callback</span>)&#123;</span><br><span class="line">  <span class="comment">// 如果obj 是数组或伪数组</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="string">&quot;length&quot;</span> <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i&lt; obj.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>( callback.<span class="property">call</span> (obj[i], i , obj[i] ) === <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;    <span class="comment">//如果obj是对象</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">      <span class="keyword">if</span> ( callback.<span class="title function_">call</span>( obj[k], k, obj[k] ) === <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>​	</p>
<p>​	</p>
]]></content>
      <categories>
        <category>jquery相关</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery队列操作案例</title>
    <url>/2016/07/06/jquery/docs/jquery-queue/</url>
    <content><![CDATA[<p>由于页面中动态数据较多，比如动态ajax获取下拉框option数据，当页面中需要对select元素进行操<br>作时，其DOM操作必须后与select框数据渲染完成后，此时队列操作至关重要。使得异步操作同步化。</p>
<span id="more"></span>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 初始化队列函数</span></span><br><span class="line"><span class="comment">* @fnarr   函数数组，异步执行的代码块集合</span></span><br><span class="line"><span class="comment">* @name    队列名</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initQueue</span>(<span class="params">name , fnarr</span>)&#123;</span><br><span class="line">  $(<span class="variable language_">document</span>).<span class="title function_">queue</span>( name , fnarr);</span><br><span class="line">  <span class="title function_">dequeue</span>( name );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 出队函数</span></span><br><span class="line"><span class="comment">* @name  队列名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dequeue</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  $(<span class="variable language_">document</span>).<span class="title function_">dequeue</span>( name );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义函数数组</span></span><br><span class="line"><span class="keyword">var</span> fnarr = [</span><br><span class="line">  <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;action one&quot;</span>);</span><br><span class="line">    <span class="title function_">dequeue</span>(<span class="string">&quot;myqueue&quot;</span>); <span class="comment">//出队操作，保证下一排队函数可继续执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;action two&quot;</span>);</span><br><span class="line">    <span class="title function_">dequeue</span>(<span class="string">&quot;myqueue&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// more action ...</span></span><br><span class="line">  <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;action three&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//所有异步操作结束后,执行页面主函数</span></span><br><span class="line">    <span class="title function_">main</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//激活队列</span></span><br><span class="line"><span class="title function_">initQueue</span>(<span class="string">&quot;myqueue&quot;</span> , fnarr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//这是页面主函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>jquery相关</category>
      </categories>
      <tags>
        <tag>queue</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery语法标准</title>
    <url>/2016/05/22/jquery/docs/jquery-standard/</url>
    <content><![CDATA[<p>jQuery基本语法记录。</p>
<span id="more"></span>

<h2 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h2><p><code>jQuery</code> 函数 可以使用 <code>$</code> 和 <code>jQuery</code> 两个变量来调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">noConflict</span>()</span><br></pre></td></tr></table></figure>

<p>作用：释放 <code>jQuery</code>中 <code>$</code> 的使用，使用户有能力将 <code>$</code> 改变为其他代替字符。</p>
<p><strong>用法1</strong></p>
<p><strong>jQuery文件引入在下，其他库文件在上时</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jq = $.<span class="title function_">noConflict</span>();</span><br><span class="line"><span class="title function_">jq</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	some jq code here...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>用法2：jQuery文件引入在上，其他库文件在下时</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jq = jQuery.<span class="title function_">noConflict</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">jq</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">	some jq code here...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><table>
<thead>
<tr>
<th><strong>基本选择器</strong></th>
<th><strong>语法</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>id选择器</code></td>
<td><code>$(&quot;#box&quot;).action()</code></td>
</tr>
<tr>
<td><code>类选择器</code></td>
<td><code>$(&quot;.hwq&quot;).action()</code></td>
</tr>
<tr>
<td><code>标签选择器</code></td>
<td><code>$(&quot;li&quot;).action()</code></td>
</tr>
<tr>
<td><code>并集选择器</code></td>
<td><code>$(&quot;#box,.hwq,li&quot;).action()</code></td>
</tr>
<tr>
<td><code>交集选择器</code></td>
<td><code>$(&quot;li.hwq&quot;).action()</code></td>
</tr>
</tbody></table>
<blockquote>
<p>上面的功能跟css选择器的用法一模一样。</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>层级选择器</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>子代选择器</code></td>
<td><code>$(&quot;#box &gt; p&quot;).action()</code> <br/> 选择的 <code>#box</code> 的直接子代 <code>p</code>，不包括孙子元素 <code>p</code></td>
</tr>
<tr>
<td><code>后代选择器</code></td>
<td><code>$(&quot;#box  p&quot;).action()</code> <br/> 选择的是 <code>#box</code> 的所有后代 <code>p</code> ，包括所有的孙子元素 <code>p</code></td>
</tr>
<tr>
<td><code>过滤选择器</code></td>
<td></td>
</tr>
<tr>
<td><code>:eq()</code></td>
<td>语法：<code>$(&quot;li:eq(index)&quot;).action()</code> <br/> index：表示索引值 <br/> 作用：表示选择索引为 <code>index</code> 的那个 <code>li</code> 标签元素</td>
</tr>
<tr>
<td><code>:odd</code></td>
<td>语法：<code>$(&quot;li:odd&quot;).action()</code> <br/> 作用：选择索引值为 <strong>奇数</strong> 的 <code>li</code>标签元素</td>
</tr>
<tr>
<td><code>:even</code></td>
<td>语法：<code>$(&quot;li:even&quot;).action()</code> <br/> 作用：选择索引值为 <strong>偶数</strong> 的<code>li</code>标签元素</td>
</tr>
</tbody></table>
<blockquote>
<p>注：当获取的元素对象是一个伪数组时，给这个维数组添加 <code>action()</code> 操作时，<code>JQuery</code> 会进行隐式迭代，即 <code>JQ</code> 会自动遍历这个维数组里的 <code>dom</code> 对象，并给每一个 <code>dom</code> 对象进行 <code>action()</code> 操作。</p>
</blockquote>
<h2 id="筛选方法"><a href="#筛选方法" class="headerlink" title="筛选方法"></a>筛选方法</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>children(&quot;selector&quot;)</code></td>
<td>语法：<code>$(&quot;li&quot;).chlidren(&quot;ul&quot;).action()</code> <br/> 参数：<code>selector</code> 表示选择器 <br/> 作用：找 <code>li</code> 的直接子元素（不包括孙子元素），并且这个子元素的标签类型是 <code>ul</code></td>
</tr>
<tr>
<td><code>find(&quot;selector&quot;)</code></td>
<td>语法：<code>$(&quot;#box&quot;).find(&quot;li&quot;).action()</code> <br/> 参数：<code>selector</code>  表示选择器 <br/> 作用：找 <code>#box</code> 的所有后代元素（包括孙子元素），并且这个后代元素标签类型是 <code>li</code></td>
</tr>
<tr>
<td><code>siblings(&quot;selector&quot;)</code></td>
<td>语法：<code>$(&quot;li&quot;).siblings(&quot;.prev&quot;).action()</code> <br/> 参数：<code>selector</code>  表示选择器 <br/> 作用：找 <code>li</code> 的所有兄弟元素，并且这个 <code>li</code> 带有 <code>.prev</code> 类名</td>
</tr>
<tr>
<td><code>next(&quot;selector&quot;)</code></td>
<td>语法：<code>$(&quot;span&quot;).next(&quot;.sel&quot;).action()</code> <br/> 参数：<code>selector</code>  表示选择器 <br/> 作用：找到每个 <code>span</code> 的之后紧邻的一个兄弟元素，并且这个兄弟元素带 <code>.sel</code> 类名。通常不用加这个类名限定。</td>
</tr>
<tr>
<td><code>prev(&quot;selecto&quot;)</code></td>
<td>语法：<code>$(&quot;span&quot;).prev(&quot;.sel&quot;).action()</code> <br/> 参数：<code>selector</code>  表示选择器 <br/> 作用：找到每个 <code>span</code> 紧邻的前一个同辈元素中类名为sel的元素。</td>
</tr>
<tr>
<td><code>nextAll(&quot;selector&quot;)</code></td>
<td>语法：<code>$(&quot;span&quot;).nextAll(&quot;.sel&quot;).action()</code> <br/> 作用：找 <code>span</code> 标签之后的所有含有 <code>.sel</code> 类名的兄弟元素</td>
</tr>
<tr>
<td><code>prevAll(&quot;selector&quot;)</code></td>
<td>语法：<code>$(&quot;span&quot;).prevAll(&quot;.sel&quot;).action()</code> <br/> 作用：找 <code>span</code> 标签之前的所有含有 <code>.sel</code> 类名的兄弟元素</td>
</tr>
<tr>
<td><code>parent(&quot;selector&quot;)</code></td>
<td>语法：<code>$(&quot;li&quot;).parent(&quot;.selector&quot;).action()</code> <br/> 作用：查找 <code>li</code> 的父元素且类名为 <code>.selector</code></td>
</tr>
</tbody></table>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>eq(index)</code></td>
<td>语法：<code>$(&quot;li&quot;).eq(index).action()</code> <br/> 参数：<br/> <code>index</code> 一个正整数时，指示元素基于 0 的位置，这个元素的位置是从0 算起。<br/> <code>-index</code> 一个负整数时，指示元素的位置，从集合中的最后一个元素开始倒数。(1算起) <br/> 作用：获取第 n 个元素</td>
</tr>
</tbody></table>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>在所有效果操作中，除非设置了 speed 参数，否则不能设置callback参数。</p>
<p>v1.4.3 及以上版本才有 Easing 参数。</p>
<h3 id="show-显示元素"><a href="#show-显示元素" class="headerlink" title="show() 显示元素"></a>show() 显示元素</h3><p>​显示已隐藏的元素，对于设置了 <code>display:none</code> 或 使用了 <code>hide()</code> 方法的元素都有效。</p>
<p>在设置速度的情况下，元素从隐藏到完全可见的过程中，会将 <code>display</code> 设置为 <code>bolck</code> 并逐渐地改变其高度、宽度、外边距、内边距和透明度。</p>
<p><strong>语法：$(selector).show( speed, easing , callback)</strong> </p>
<p><strong>参数：</strong></p>
<p>speed      设置完成显示效果的时间，比如 “slow”, “fast”, “normal” 或毫秒数</p>
<p>easing     字符串类型，显示效果的动画曲线，默认是 “swing”，可用参数 “linear”。v1.4.3 及以上版本才有此参数。</p>
<p>callback   回调函数，显示效果完成后执行的动作，除非设置了 speed 否则不能使用该参数。</p>
<h3 id="hide-隐藏元素"><a href="#hide-隐藏元素" class="headerlink" title="hide()隐藏元素"></a>hide()隐藏元素</h3><p>​隐藏已显示的元素，对于设置了 <code>display:block</code> 或 使用了 <code>show()</code> 方法的元素都有效。</p>
<p>在设置速度的情况下，元素从可见到完全隐藏的过程中，会将 <code>display</code> 设置为 <code>none</code> 并逐渐地改变其高度、宽度、外边距、内边距和透明度。</p>
<p><strong>语法：$(selector).hide( speed, easing , callback)</strong></p>
<p><strong>参数：</strong></p>
<p>speed      数字类型，设置完成隐藏效果的时间，毫秒数</p>
<p>easing     字符串类型，隐藏效果的动画曲线</p>
<p>callback   回调函数，隐藏效果完成后执行的动作</p>
<h3 id="toggle-显示隐藏切换"><a href="#toggle-显示隐藏切换" class="headerlink" title="toggle()显示隐藏切换"></a>toggle()显示隐藏切换</h3><p><code>toggle</code> 方法 会隐藏显示的元素，显示隐藏的元素。</p>
<p><strong>语法：$(selector).toggle(speed, easing , callback)</strong></p>
<p><strong>参数：</strong></p>
<p>speed      数字类型，设置完成效果的时间，毫秒数</p>
<p>easing     字符串类型，效果的动画曲线</p>
<p>callback   回调函数，效果完成后执行的动作</p>
<h3 id="fadeIn-淡入显示"><a href="#fadeIn-淡入显示" class="headerlink" title="fadeIn()淡入显示"></a>fadeIn()淡入显示</h3><p><code>fadeIn</code>方法会对元素的 <code>opacity</code> 属性和 <code>display</code> 属性进行渐变设置，即首先将 <code>display</code> 设置为 <code>block</code>，然后逐渐将 <code>opacity</code> 设置为 <code>1</code> 。</p>
<p><strong>语法：$(selector).fadeIn(speed , easing , callback )</strong></p>
<p><strong>参数：</strong></p>
<p>speed     数字类型，效果完成的时间，毫秒数</p>
<p>easing    字符串类型，效果的动画曲线</p>
<p>callback  回调函数，效果完成后的动作</p>
<h3 id="fadeOut-淡出隐藏"><a href="#fadeOut-淡出隐藏" class="headerlink" title="fadeOut()淡出隐藏"></a>fadeOut()淡出隐藏</h3><p><code>fadeOut</code> 方法会对元素的 <code>opacity</code> 属性和 <code>display</code> 属性进行渐变设置，即首先将 <code>display</code> 设置为 <code>none</code>，然后逐渐将 <code>opacity</code> 设置为<code>0</code>。</p>
<p><strong>语法：$(selector).fadeOut(speed , easing , callback )</strong></p>
<p><strong>参数：</strong></p>
<p>speed     数字类型，效果完成的时间，毫秒数</p>
<p>easing    字符串类型，效果的动画曲线</p>
<p>callback  回调函数，效果完成后的动作</p>
<h3 id="fadeToggle-淡入淡出切换"><a href="#fadeToggle-淡入淡出切换" class="headerlink" title="fadeToggle()淡入淡出切换"></a>fadeToggle()淡入淡出切换</h3><p>对已显示的元素进行淡出隐藏，已隐藏的元素进行淡入显示。</p>
<p><strong>语法：$(selector).fadeToggle(speed , easing , callback )</strong></p>
<p><strong>参数：</strong></p>
<p>speed     数字类型，效果完成的时间，毫秒数</p>
<p>​easing    字符串类型，效果的动画曲线</p>
<p>​callback  回调函数，效果完成后的动作</p>
<h3 id="fadeTo-渐变元素的不透明度"><a href="#fadeTo-渐变元素的不透明度" class="headerlink" title="fadeTo()渐变元素的不透明度"></a>fadeTo()渐变元素的不透明度</h3><p><strong>语法：$(selector).fadeTo(speed, opacity , callback )</strong></p>
<p><strong>参数：</strong></p>
<p>speed     （必需）效果过渡的时间，单位为毫秒数</p>
<p>​opacity   （必需）渐变至的不透明度（0-1）</p>
<p>​callback  （可选）回调函数，渐变效果结束后执行的动作</p>
<h3 id="slideDown-下拉显示"><a href="#slideDown-下拉显示" class="headerlink" title="slideDown()下拉显示"></a>slideDown()下拉显示</h3><p>将已隐藏的元素以下拉的方式显示，会将 <code>display:none</code> 的元素属性 <code>display</code> 设置为 <code>block</code>。</p>
<p><strong>语法：$(selector).slideDown(speed , easing , callback )</strong></p>
<p><strong>参数：</strong></p>
<p>speed     数字类型，效果完成的时间，毫秒数</p>
<p>​easing    字符串类型。效果的动画曲线</p>
<p>​callback  回调函数，效果完成后执行的动作</p>
<h3 id="slideUp-上拉隐藏"><a href="#slideUp-上拉隐藏" class="headerlink" title="slideUp()上拉隐藏"></a>slideUp()上拉隐藏</h3><p>将已显示的元素以上拉的方式隐藏，会将 <code>display:block</code> 的元素属性 <code>display</code> 设置为 <code>none</code>。</p>
<p><strong>语法：$(selector).slideUp(speed , easing , callback )</strong></p>
<p><strong>参数：</strong></p>
<p>speed     数字类型，效果完成的时间，毫秒数</p>
<p>​easing    字符串类型。效果的动画曲线</p>
<p>​callback  回调函数，效果完成后执行的动作</p>
<h3 id="slideToggle-上拉下拉切换"><a href="#slideToggle-上拉下拉切换" class="headerlink" title="slideToggle() 上拉下拉切换"></a>slideToggle() 上拉下拉切换</h3><p>将已隐藏的元素以下拉的方式显示，已显示的元素以上拉的方式隐藏。</p>
<p><strong>语法：$(selector).slideToggle(speed , easing , callback )</strong></p>
<p><strong>参数：</strong></p>
<p>speed     数字类型，效果完成的时间，毫秒数</p>
<p>​easing    字符串类型。效果的动画曲线</p>
<p>​callback  回调函数，效果完成后执行的动作</p>
<h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><h3 id="animate"><a href="#animate" class="headerlink" title="animate"></a>animate</h3><p>我们可以利用 <code>jquery</code> 的 <code>animate</code> 函数制作自定义动画。给同个元素设置的多个<code> animate</code> 动画会被 <code>push</code> 进叫做 <code>fx</code> 的标准动画队列中。</p>
<p><strong>语法：$(selector).animate( {params}, speed , easing , callback )</strong></p>
<p><strong>参数：</strong></p>
<p>{params}  ：  对象类型，定义元素结束位置的样式状态</p>
<p>speed :       数字类型，设置元素过渡的时间，单位为毫秒数</p>
<p>easing :      动画曲线，支持 easing.js 插件</p>
<p>callback  :   回调函数，定义动画结束后执行的操作（代码块）</p>
<p>注：</p>
<p>（1）默认的：元素是静态定位，需要手动设置元素定位为：relative &#x2F;absolute &#x2F;fixed 才会有移动效果</p>
<p>（2）animate() 可以使用队列功能，即你可以对同个元素使用多个animate() 定义不同的状态，她会逐步的执行它们。</p>
<p>（3）当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。</p>
<p>（4）也可以对css属性定义相对值（该值相对于元素的当前值）。</p>
<p>需要在值的前面加上 +&#x3D; 或 -&#x3D; ，使用相对值时，必须加上单位px，以字符串的形式设置。</p>
<p>（5）可以把属性的动画值设置为 “show”、”hide” 或 “toggle”。</p>
<p>（6）设置属性值时，如果带上px单位，使用引号包裹，不想带px 直接写数字即可。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> box = $(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line"></span><br><span class="line">  box.<span class="title function_">animate</span>( &#123;<span class="attr">left</span>:<span class="string">&quot;+=200px&quot;</span>&#125; , <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  box.<span class="title function_">animate</span>( &#123;<span class="attr">top</span>: <span class="string">&quot;+=200px&quot;</span> &#125; , <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  box.<span class="title function_">animate</span>( &#123;<span class="attr">fontSize</span>:<span class="string">&quot;20px&quot;</span>&#125; , <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  box.<span class="title function_">animate</span>( &#123;<span class="attr">left</span>:<span class="string">&quot;+=200px&quot;</span>&#125; , <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  box.<span class="title function_">animate</span>(&#123;top : <span class="number">100</span> &#125;, <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="stop-停止动画或效果"><a href="#stop-停止动画或效果" class="headerlink" title="stop()停止动画或效果"></a>stop()停止动画或效果</h3><p>停止当前正在运行的动画。</p>
<p><strong>语法：$(selector).stop( stopAll , gotoend )</strong></p>
<p><strong>参数：</strong></p>
<p>stopAll   布尔类型，是否停止被选元素的所有加入队列的动画。默认值为 <code>false</code> 即表示不清除动画队列中的动画，<code>true</code> 表示清除。</p>
<p>gotoend   布尔类型，规定是否允许在清除动画队列中的动画后完成当前的动画。该参数只能在设置了 <code>stopAll</code> 参数时使用。默认值为 <code>false</code>，即表示不完成，<code>true</code> 表示要完成。</p>
<h3 id="delay-延迟动画"><a href="#delay-延迟动画" class="headerlink" title="delay()延迟动画"></a>delay()延迟动画</h3><p>设置一个时间来推迟队列后动画的执行。</p>
<p><strong>语法：$(selector).delay( duration , queuename ).fadeIn(200)</strong></p>
<p><strong>参数：</strong></p>
<p>duration    延迟时间</p>
<p>queuename   队列名，默认是Fx（动画队列）</p>
<h3 id="finish"><a href="#finish" class="headerlink" title="finish()"></a>finish()</h3><p>当<code>.finish()</code>在一个元素上被调用，立即停止当前正在运行的动画和所有排队的动画（如果有的话），并且他们的CSS属性设置为它们的目标值（所有动画的目标值）。所有排队的动画将被删除。</p>
<p><code>.finish()</code>方法和 <code>.stop(true, true)</code> 很相似，<code>.stop(true, true)</code> 将清除队列，并且当前的动画跳转到其最终值。但是，不同的是，<code>.finish()</code> 会导致所有排队的动画的 <code>CSS</code> 属性跳转到他们的最终值。</p>
<p><strong>语法：$(selector).finish( queue )</strong></p>
<p><strong>参数：</strong> queue   停止动画队列的名称</p>
<h2 id="控制队列"><a href="#控制队列" class="headerlink" title="控制队列"></a>控制队列</h2><h3 id="queue"><a href="#queue" class="headerlink" title="queue()"></a>queue()</h3><p><code>queue()</code> 方法返回被匹配元素上排队动画的个数，或操作在匹配元素上执行的函数队列。</p>
<p>当通过 <code>.queue()</code> 添加函数时，我们应当确保最终调用了 <code>.dequeue()</code>，这样下一个排队的函数才能执行。</p>
<p><strong>语法1：$(selector).queue( queuename )</strong></p>
<p><strong>参数：</strong> queue   队列名，字符串值，包含序列的名称。默认是 fx，标准的效果序列。</p>
<p><strong>返回值：</strong> 数组类型，存储了动画队列中函数。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#show&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> n = $(<span class="string">&quot;div&quot;</span>).<span class="title function_">queue</span>(<span class="string">&quot;fx&quot;</span>);  <span class="comment">// 返回值类型为数组</span></span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;span&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;Queue length is: &quot;</span> + n.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runIt</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">show</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="string">&#x27;+=200&#x27;</span>&#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideToggle</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideToggle</span>(<span class="string">&quot;fast&quot;</span>);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="string">&#x27;-=200&#x27;</span>&#125;,<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">hide</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">show</span>(<span class="number">1200</span>);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideUp</span>(<span class="string">&quot;normal&quot;</span>, runIt);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runIt</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>语法2：$(selector).queue( fn )</strong></p>
<p><strong>参数：</strong> fn   向匹配元素的标准动画队列最后添加的函数，该函数中可以设置一些其他的动画效果。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="string">&#x27;-=200&#x27;</span>&#125;,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">queue</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;newcolor&quot;</span>);</span><br><span class="line"></span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">dequeue</span>();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideUp</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue()"></a>dequeue()</h3><p><code>dequeue()</code>的定义是”删除队列中最顶部的函数，并且执行它”。这样函数队列中的下一个函数才能继续执行。</p>
<p><strong>语法：$(selector).dequeue( queuename )</strong></p>
<p><strong>参数：</strong> queuename    （可选）队列名，默认为fx，即标准动画队列。</p>
<p>例：使用 <code>dequeue()</code> 终止一个自定义的队列函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">queue</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">dequeue</span>();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="queue和dequeue配合使用"><a href="#queue和dequeue配合使用" class="headerlink" title="queue和dequeue配合使用"></a>queue和dequeue配合使用</h3><p>当需要对不同的元素做连续动画或效果时，除了使用回调地狱这样的冗余嵌套外。我们还可以使用操作元素的动画队列来实现连续的动画和效果。</p>
<p>例：当我们需要在 A元素出现后（可以添加一系列其他动画），B元素再出现以及做些其他动画效果。这时我们没有必要写冗余的回调函数，直接操作A元素的标准动画队列 <code>fx</code> 即可。</p>
<p>即给A元素的动画队列的尾部添加一个操作B元素的动画函数，就可以实现不同元素之间的连续动画或效果。</p>
<p>如果是通过触发事件的方式来开始动画，不想同一系列动画重复执行，可以在 <code>queue</code> 中定义的动画函数里不加 <code>dequeue()</code>，这样动画就只会触发一次。或者你可以写<code>dequeue()</code>，只要对动画做节流处理即可。</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在有dequeue的情况下，重复触发click会向 A 的动画队列中加入很多待执行动画</span></span><br><span class="line"></span><br><span class="line">   $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">     $(<span class="string">&quot;.A&quot;</span>).<span class="title function_">show</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">     $(<span class="string">&quot;.A&quot;</span>).<span class="title function_">animate</span>(&#123;left : <span class="number">200</span> &#125;);</span><br><span class="line"></span><br><span class="line">     $(<span class="string">&quot;.A&quot;</span>).<span class="title function_">queue</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//向.A元素的动画队列的最后添加一个动画：让.A显示</span></span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">       $(<span class="string">&quot;.B&quot;</span>).<span class="title function_">show</span>(<span class="number">800</span>);<span class="comment">//在队列函数中，我们可以控制其他的元素进行动画，并且有连续帧的效果</span></span><br><span class="line"></span><br><span class="line">       $(<span class="string">&quot;.B&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="number">100</span>&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="comment">//显示.A的动画函数完成后dequeue，让之后的动画队列中的函数继续执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.A&quot;</span>).<span class="title function_">dequeue</span>();  <span class="comment">// 不加此句，动画就不会重复触发</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">     $(<span class="string">&quot;A&quot;</span>).<span class="title function_">animate</span>(&#123; left : <span class="number">0</span>&#125;,<span class="number">800</span>);</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="clearqueue"><a href="#clearqueue" class="headerlink" title="clearqueue()"></a>clearqueue()</h3><p>当调用 <code>.clearQueue()</code> 方法时，序列中未被执行的所有函数都会被从序列中删除。如果不使用参数，则 <code>.clearQueue()</code> 从 <code>fx</code>（标准效果序列）中删除剩余的函数。在这种方式中，它类似于 <code>.stop(true)</code>。不过，<code>.stop()</code> 方法只用于动画，而 <code>.clearQueue()</code> 也可用于删除通过 <code>.queue()</code> 方法添加到通用 <code>jQuery</code> 序列的任何函数。</p>
<p><strong>语法：$(selector).clearqueue(ueuename)</strong></p>
<p><strong>参数：</strong> ueuename   队列名，默认为 <code>fx</code>，即标准动画队列。</p>
<p>例：清空队列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">clearQueue</span>();</span><br></pre></td></tr></table></figure>

<h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><p>我们还可以使用<code>v1.4</code>以上版本提供的 <code>next()</code>方法让队列中函数继续执行下去。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideUp</span>(<span class="string">&#x27;slow&#x27;</span>).<span class="title function_">queue</span>(<span class="keyword">function</span>(<span class="params">next</span>)&#123;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#object&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;background&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">show</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="自定义函数队列"><a href="#自定义函数队列" class="headerlink" title="自定义函数队列"></a>自定义函数队列</h3><p><strong>语法1：$(selector).queue( queuename , callback(next) )</strong></p>
<p><strong>参数：</strong>  </p>
<p>queuename   string类型，队列名</p>
<p>callback(next)    回调函数，函数体内定义你需要的功能，这么定义的队列，队列里就只有一个函数，如果需要多个函数，可以用函数数组作为第二个参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">queue</span>(<span class="string">&quot;custom&quot;</span>, <span class="keyword">function</span>(<span class="params">next</span>) &#123;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="string">&#x27;background&#x27;</span>:<span class="string">&#x27;red&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.<span class="title function_">dequeue</span>(<span class="string">&quot;custom&quot;</span>); <span class="comment">//this is the key</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>语法2：$(selector).queue( queuename , fnArray)</strong></p>
<p><strong>参数：</strong> </p>
<p>queuename    函数队列名。</p>
<p>fnArray      函数数组，数组中的每个元素是一个函数，作为自定义的函数队列中的每个成员。</p>
<p>例：要两个div依次向左移动</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">FUNC</span>=[  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span>(<span class="params"></span>) &#123;$(<span class="string">&quot;#block1&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="string">&quot;+=100&quot;</span>&#125;,aniCB);&#125;, <span class="comment">//每次执行完一个函数后执行回调函数aniCB，即执行一次dequeue() 使得队列能继续下去  </span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span>(<span class="params"></span>) &#123;$(<span class="string">&quot;#block2&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="string">&quot;+=100&quot;</span>&#125;,aniCB);&#125;,  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span>(<span class="params"></span>) &#123;$(<span class="string">&quot;#block1&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="string">&quot;+=100&quot;</span>&#125;,aniCB);&#125;,  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span>(<span class="params"></span>) &#123;$(<span class="string">&quot;#block2&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="string">&quot;+=100&quot;</span>&#125;,aniCB);&#125;,  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span>(<span class="params"></span>) &#123;$(<span class="string">&quot;#block1&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:<span class="string">&quot;+=100&quot;</span>&#125;,aniCB);&#125;,  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;动画结束&quot;</span>)&#125;  </span><br><span class="line"></span><br><span class="line"> ];  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aniCB=<span class="keyword">function</span>(<span class="params"></span>) &#123;   <span class="comment">// 定义回调函数，调用一次即触发一次dequeue()方法    </span></span><br><span class="line"></span><br><span class="line"> $(<span class="variable language_">document</span>).<span class="title function_">dequeue</span>(<span class="string">&quot;myAnimation&quot;</span>);  </span><br><span class="line"></span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> $(<span class="variable language_">document</span>).<span class="title function_">queue</span>(<span class="string">&quot;myAnimation&quot;</span>,<span class="variable constant_">FUNC</span>);  <span class="comment">//自定义一个函数队列 </span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="title function_">aniCB</span>();  <span class="comment">//开始执行队列中的第一个函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>1，首先建议建立了一个函数数组，里边是一些列需要依次执行的动画</p>
<p>2，然后定义一个函数，用<code>dequeue</code>方法用来执行队列中的下一个函数</p>
<p>3，接着把这个函数数组放到<code>document</code>上的<code>myAnimation</code>的队列中（可以选择任何元素，我只是为了方便而把这个队列放在<code>document</code>上）</p>
<p>4，最后我开始执行队列中的第一个函数</p>
<p>这样做的好处在于函数数组是线性展开，增减起来非常方便。</p>
<p>而且，当不要要继续进行接下来动画的时候(比如用户点了某个按钮)，只需要清空那个队列即可。而要增加更多则只需要加入队列即。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空队列  </span></span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">queue</span>(<span class="string">&quot;myAnimation&quot;</span>,[]);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//加一个新的函数放在最后  </span></span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">queue</span>(<span class="string">&quot;myAnimation&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;动画真的结束了！&quot;</span>)&#125;);  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="jQuery基本操作"><a href="#jQuery基本操作" class="headerlink" title="jQuery基本操作"></a>jQuery基本操作</h2><h3 id="css操作"><a href="#css操作" class="headerlink" title="css操作"></a>css操作</h3><p><code>css()</code>方法可以设置单个样式或者设置多个样式。</p>
<p><strong>设置单个样式：</strong></p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(selector).<span class="title function_">css</span>(name,value)</span><br></pre></td></tr></table></figure>



<p><strong>参数：</strong></p>
<p>name：string类型，表示css属性名。属性名的写法支持原本的css属性名写法和驼峰命名法。如<code>font-size</code>  和  <code>fontSize</code>  都可以。</p>
<p>value： string类型，表示css属性值。</p>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>设置多个样式：</strong></p>
<p>利用对象传参即可</p>
<p><strong>语法：$(selector).css(obj)</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">  <span class="attr">background</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="string">&quot;20px&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>获取css样式值：</strong></p>
<p><strong>语法：$(“el”).css(name)</strong></p>
<p><strong>参数：</strong> name   样式名</p>
<p><strong>返回值：</strong> 样式名为 <code>name</code> 的样式值，当获取到的对象是一个维数组时，返回的则是第一个对象的样式值。</p>
<h3 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a>class操作</h3><p><strong>1.添加类名</strong></p>
<p><strong>语法：$(selector).addClass(name)</strong></p>
<p><strong>参数：</strong> name   要添加的类名</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).<span class="title function_">addclass</span>(<span class="string">&quot;on&quot;</span>);  <span class="comment">//不需要加.</span></span><br></pre></td></tr></table></figure>

<p><strong>2.删除类名</strong></p>
<p><strong>语法：$(selector).removeClass(name)</strong></p>
<p><strong>参数：</strong> name   要删除的类名，不传参时，会将当前 <code>selector</code> 元素的所有类型全部删除。</p>
<p><strong>3.切换类名</strong></p>
<p><strong>语法：$(selector).toggleClass(name)</strong></p>
<p><strong>参数：</strong> name  要切换的类名</p>
<p><strong>作用：</strong></p>
<p>当 <code>selector</code> 元素有 <code>name</code> 类名时，<code>toggleClass()</code> 会删除 <code>name</code> 类名，反之会添加 <code>name</code> 类名。</p>
<p><strong>4.判断类</strong></p>
<p><strong>语法：$(selector).hasClass(name)</strong></p>
<p><strong>参数：</strong> name  要判断的类名</p>
<p><strong>返回值：</strong> boolean 类型，有 <code>name</code> 类名则放回 <code>true</code>，反之返回 <code>false</code>。</p>
<h3 id="text和html方法"><a href="#text和html方法" class="headerlink" title="text和html方法"></a>text和html方法</h3><p><strong>1.text()</strong></p>
<p><strong>作用：</strong> 设置或返回所选元素的文本内容。</p>
<blockquote>
<p>注：在获取元素的内容时，只会获取元素的纯文本，不包含标签元素。在设置元素内容时，如果含有标签元素，会把标签元素当纯文本输出。即 <code>text(...)</code> 在遇到标签时，会转义。</p>
</blockquote>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#test1&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;&lt;h1&gt;Hello world!&lt;/h1&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>页面展示内容为：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.html()</strong></p>
<p>作用：设置或返回所选元素的内容（包括 HTML 标记）。</p>
<blockquote>
<p>注：在获取元素的内容时，标签和纯文本都会获取到。设置内容时，含有标签元素时，该标签元素会在文档中生效。</p>
</blockquote>
<p><strong>例：</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#test2&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//会将&lt;b&gt;标签渲染出来</span></span><br></pre></td></tr></table></figure>

<h3 id="设置或获取属性attr"><a href="#设置或获取属性attr" class="headerlink" title="设置或获取属性attr()"></a>设置或获取属性attr()</h3><p><code>attr()</code> 方法用于设置&#x2F;改变&#x2F;获取属性值。使用方法和 <code>css()</code> 方法的格式一模一样。</p>
<p><code>jq</code> 底层是通过 <code>getAttribute</code> 和 <code>setAttribute</code> 实现的。可以设置自定义属性（特有属性）。</p>
<p><strong>1.设置一个属性：</strong></p>
<p><strong>语法：$(selector).attr(name,value)</strong></p>
<p><strong>参数：name     参数名</strong></p>
<p>value     值</p>
<p>例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#w3s&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;http://www.w3school.com.cn/jquery&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>2.设置多个属性：</strong></p>
<p><strong>语法：$(selector).attr(obj)</strong></p>
<p><strong>参数：obj  包含多个属性和值的对象</strong></p>
<p><strong>例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">attr</span>(&#123;</span><br><span class="line">  src : <span class="string">&quot;1.jpg&quot;</span>,</span><br><span class="line">  alt : <span class="string">&quot;图破了&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3.获取属性值</strong></p>
<p><strong>语法：$(selecor).attr(name)</strong></p>
<p><strong>参数：</strong> name （string类型 ） 属性名。</p>
<p><strong>返回值：</strong> name的属性值。</p>
<h3 id="删除属性removeAttr"><a href="#删除属性removeAttr" class="headerlink" title="删除属性removeAttr()"></a>删除属性removeAttr()</h3><p>删除指定元素上的属性。</p>
<p><strong>语法：$(selector).removeAttr( name )</strong></p>
<p><strong>参数：</strong> name   属性名。</p>
<h3 id="设置或获取属性prop"><a href="#设置或获取属性prop" class="headerlink" title="设置或获取属性prop()"></a>设置或获取属性prop()</h3><p>获取或设置 <code>dom</code> 属性，<code>jq</code> 底层是通过获取或设置 <code>dom</code> 属性的值来实现的。</p>
<blockquote>
<p>如：<code>checked = false/true</code>，不可以设置自定义属性（特有属性）。</p>
</blockquote>
<p><strong>语法：$(selector).prop(name,value)</strong></p>
<p><strong>参数：</strong></p>
<p>name   属性名<br>value   属性值</p>
<blockquote>
<p>例：利用 <code>jq</code> 控制复选框的选中状态时，使用 <code>prop()</code> 方法。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#check&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="literal">false</span>);  <span class="comment">// 设置不选中</span></span><br></pre></td></tr></table></figure>

<h3 id="获取或设置表单值val"><a href="#获取或设置表单值val" class="headerlink" title="获取或设置表单值val()"></a>获取或设置表单值val()</h3><p>可以获取和设置表单元素的 <code>value</code> 值。</p>
<p><strong>语法：</strong>$(selector).val()</p>
<p><strong>1.获取value值：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> val = $(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>();</span><br></pre></td></tr></table></figure>



<p><strong>2.设置value值：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;提交&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-DOM操作"><a href="#jQuery-DOM操作" class="headerlink" title="jQuery DOM操作"></a>jQuery DOM操作</h2><h3 id="append-添加最后一个子元素"><a href="#append-添加最后一个子元素" class="headerlink" title="append() 添加最后一个子元素"></a>append() 添加最后一个子元素</h3><p>给指定元素添加最后一个子元素，当操作的元素是页面中已经存在的 <code>dom</code> 元素时，会有剪切效果，即被操作元素节点会从原来的位置消失。</p>
<p><strong>语法：append( jqobj | htmlstr )</strong></p>
<p><strong>参数：</strong> 可以是 <code>jq</code> 对象或者 <code>html</code> 字符串。</p>
<p><strong>例：</strong></p>
<p><strong>方法1：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> span = $(<span class="string">&quot;&lt;span&gt;我是新添加的span&lt;/span&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;li&quot;</span>).<span class="title function_">append</span>(span);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>方法2：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;span&gt;我是新添加的span&lt;/span&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>注： $( A ).append( B )  与  $( B ).appendTo( A )  操作等价。</p>
<h3 id="prepend-添加最前一个子元素"><a href="#prepend-添加最前一个子元素" class="headerlink" title="prepend() 添加最前一个子元素"></a>prepend() 添加最前一个子元素</h3><p>给指定元素添加最前一个子元素（即添加第一个子元素），当操作的元素是页面中已经存在的 <code>dom</code> 元素时，会有剪切效果，即被操作元素节点会从原来的位置消失。</p>
<p><strong>语法：prepend( jqobj | htmlstr)</strong></p>
<p><strong>参数：</strong> 可以是 <code>jq</code> 对象或者 <code>html</code> 字符串。</p>
<blockquote>
<p>注： <code>$( A ).prepend( B )</code>  与  <code>$( B ).prependTo( A )</code> 操作等价。</p>
</blockquote>
<h3 id="before-添加前一个兄弟元素"><a href="#before-添加前一个兄弟元素" class="headerlink" title="before() 添加前一个兄弟元素"></a>before() 添加前一个兄弟元素</h3><p>给指定元素添加前一个兄弟元素，当操作的元素是页面中已经存在的 <code>dom</code> 元素时，会有剪切效果，即被操作元素节点会从原来的位置消失。</p>
<p><strong>语法：brefore( jqobj | htmlstr)</strong></p>
<p><strong>参数：</strong> 可以是jq对象或者html字符串。</p>
<h3 id="after-添加后一个兄弟元素"><a href="#after-添加后一个兄弟元素" class="headerlink" title="after() 添加后一个兄弟元素"></a>after() 添加后一个兄弟元素</h3><p>给指定元素添加后一个兄弟元素，当操作的元素是页面中已经存在的 <code>dom</code> 元素时，会有剪切效果，即被操作元素节点会从原来的位置消失。</p>
<p><strong>语法：after( jqobj | htmlstr)</strong></p>
<p><strong>参数：</strong> 可以是jq对象或者html字符串。</p>
<h3 id="empty-清空元素的内容"><a href="#empty-清空元素的内容" class="headerlink" title="empty() 清空元素的内容"></a>empty() 清空元素的内容</h3><p>清空操作元素的所有后代节点（不包括该操作元素本身）。<code>empty()</code> 方法会防止内存泄露。</p>
<p>其在清空后代节点时，会把后代节点上绑定的事件同时清除掉，这不同于 <code>html()</code> 方法。</p>
<p><strong>语法：$(selector).empty()</strong></p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">完成清空操作后的dom结构为：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;div&gt;&lt;/div&gt;    // div 元素节点本身不会被删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="remove-删除元素"><a href="#remove-删除元素" class="headerlink" title="remove() 删除元素"></a>remove() 删除元素</h3><p>删除操作节点本身及其所有后代节点。</p>
<p><strong>语法：$(selector).remove()</strong></p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">完成删除操作后的dom结构为：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;body&gt;&lt;/body&gt;     // div 元素节点本身也会被删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="clone-克隆元素"><a href="#clone-克隆元素" class="headerlink" title="clone()克隆元素"></a>clone()克隆元素</h3><p><code>clone()</code> 方法默认不传参数就是深度复制，而原生 js 的 <code>cloneNode(true)</code> 需要传参数 <code>true</code> 才是深度复制。</p>
<p><strong>语法：$(selector).clone(bool)</strong></p>
<p><strong>参数：</strong></p>
<p>boollean 类型，<code>false</code>(默认)深度复制，不复制元素上的方法，<code>true</code> 深度复制，并且复制元素上的方法。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = (<span class="string">&quot;p&quot;</span>).<span class="title function_">clone</span>();  <span class="comment">// 先克隆</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#box&quot;</span>).<span class="title function_">append</span>(p);  <span class="comment">//后添加到id 为box 的元素中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="jQuery尺寸操作"><a href="#jQuery尺寸操作" class="headerlink" title="jQuery尺寸操作"></a>jQuery尺寸操作</h2><h3 id="获取-x2F-设置内容的宽度width"><a href="#获取-x2F-设置内容的宽度width" class="headerlink" title="获取&#x2F;设置内容的宽度width()"></a>获取&#x2F;设置内容的宽度width()</h3><p><code>width()</code>方法会返回元素内容（content）的宽度，返回的是一个数值类型。可以设置宽度值。</p>
<p><strong>语法：$(selector).width(val)</strong></p>
<p><strong>参数：</strong> val   要设置的值</p>
<p><strong>返回值：</strong> number类型，content 的宽度值。</p>
<h3 id="innerWidth"><a href="#innerWidth" class="headerlink" title="innerWidth()"></a>innerWidth()</h3><p>获取元素的 <code>padding + content</code> 的宽度，返回的是一个数字类型。不能设置。</p>
<p><strong>语法：$(“selector”).innerWidth()</strong></p>
<p><strong>返回值：</strong> number类型，<code>padding + content</code> 的宽度值</p>
<h3 id="获取-x2F-设置内容的高度height"><a href="#获取-x2F-设置内容的高度height" class="headerlink" title="获取&#x2F;设置内容的高度height()"></a>获取&#x2F;设置内容的高度height()</h3><p><code>height()</code> 方法会返回元素内容（content）的高度，返回的是一个数值类型。可以设置高度值。</p>
<p><strong>语法：$(“selector”).height(val)</strong></p>
<p><strong>参数：</strong> val  要设置的高度值</p>
<p><strong>返回值：</strong> number类型，content 的高度值。</p>
<h3 id="innerHeight"><a href="#innerHeight" class="headerlink" title="innerHeight()"></a>innerHeight()</h3><p>获取元素的 <code>padding + content</code> 的高度，返回的是一个数字类型。不能设置。</p>
<p><strong>语法：$(“selector”).innerHeight()</strong></p>
<p><strong>返回值：</strong> number类型，<code>padding + content</code> 的高度值。</p>
<h3 id="outerWidth-x2F-outerHeight"><a href="#outerWidth-x2F-outerHeight" class="headerlink" title="outerWidth()&#x2F;outerHeight()"></a>outerWidth()&#x2F;outerHeight()</h3><p>可以获取 <code>border + padding + content</code> 或者 <code>margin + border + padding + content</code> 的宽度或高度值。不能设置。</p>
<p><strong>语法：$(“selector”).outerWidth(bool)</strong></p>
<p><strong>参数：</strong></p>
<p>bool（boolean类型）<code>false</code>（默认）表示获取 <code>border + padding + content</code> 的宽度值，<code>true</code>  表示获取 <code>margin + border + padding + content</code> 的宽度值。</p>
<p><strong>返回值：</strong> number 类型值</p>
<blockquote>
<p>注：<code>outerHeight()</code> 与 <code>outerWidth()</code> 用法相同。</p>
</blockquote>
<h2 id="jQuery-位置操作"><a href="#jQuery-位置操作" class="headerlink" title="jQuery 位置操作"></a>jQuery 位置操作</h2><h3 id="offset"><a href="#offset" class="headerlink" title="offset()"></a>offset()</h3><p>获取或设置元素相对于 <code>document</code> 的 <code>top</code> 和 <code>left</code> 整型值。这不同于原生 <code>js</code> 中的 <code>offsetTop</code> 和 <code>offsetLeft</code>。</p>
<blockquote>
<p>注：如果被操作元素没有设置定位属性，jq 会补上 <code>relative</code>，所以即使没有给元素设置定位属性，该元素同样可以进行偏移。</p>
</blockquote>
<p>1.获取</p>
<p><strong>语法：$(“selector”).offset()</strong></p>
<p><strong>返回值：</strong> object 对象类型，<code>&#123;top, left&#125;</code>。包含 <code>top</code> 和 <code>left</code> 值。</p>
<p>2.设置</p>
<p><strong>语法：$(selector).offset(obj)</strong></p>
<p><strong>参数：</strong> </p>
<p>obj（对象类型），<code>&#123;top:value, left:value&#125;</code></p>
<h3 id="position"><a href="#position" class="headerlink" title="position()"></a>position()</h3><p>获取相对于有定位父元素的 <code>top</code> 和 <code>left</code> 值。只能获取不能进行设置操作。</p>
<blockquote>
<p>注：不计算 <code>margin</code> 的值。</p>
</blockquote>
<p><strong>语法：$(el).position()</strong></p>
<p><strong>返回值：</strong> 带有 <code>top</code> 和 <code>left</code> 属性的对象 <code>&#123;top, left&#125;</code></p>
<h3 id="scrollTop"><a href="#scrollTop" class="headerlink" title="scrollTop()"></a>scrollTop()</h3><p>获取或设置页面垂直方向卷去的距离。</p>
<p>1.获取</p>
<p><strong>语法：$(selector).scrollTop()</strong></p>
<p><strong>返回值：</strong> 页面垂直方向卷去距离的整型值。</p>
<p>2.设置</p>
<p><strong>语法：$(seletor).scrollTop(val)</strong></p>
<p><strong>参数：</strong> </p>
<p>val （string&#x2F;number类型），卷去的距离量</p>
<h3 id="scrollLeft"><a href="#scrollLeft" class="headerlink" title="scrollLeft()"></a>scrollLeft()</h3><p>获取或设置页面水平方向卷去的距离。</p>
<p>1.获取</p>
<p><strong>语法：$(selector).scrollLeft()</strong></p>
<p><strong>返回值：</strong> 页面水平方向卷去距离的整型值。</p>
<p>2.设置</p>
<p><strong>语法：$(seletor).scrollLeft(val)</strong></p>
<p><strong>参数：</strong> val（string&#x2F;number类型），卷去的距离量</p>
<h2 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h2><h3 id="data-在某元素上存储数据"><a href="#data-在某元素上存储数据" class="headerlink" title="data() 在某元素上存储数据"></a>data() 在某元素上存储数据</h3><p><code>data()</code> 函数可以在 <code>dom</code> 元素上存储任意类型的数据。</p>
<p><strong>语法：$(selector).data(‘dataname’ , value )</strong></p>
<p><strong>参数：</strong> </p>
<p>dataname  :  string 类型，向元素上添加的数据名<br>​value    :   boolean|number|string|object|array 类型，数据的值</p>
<h3 id="data-获取在元素上存储的数据"><a href="#data-获取在元素上存储的数据" class="headerlink" title="data() 获取在元素上存储的数据"></a>data() 获取在元素上存储的数据</h3><p><strong>语法：$(selector).data(“dataname”)</strong></p>
<p><strong>参数：</strong>  dataname    数据名</p>
<p><strong>返回值：</strong> 通过 <code>data()</code> 方法存储的数据值</p>
<h3 id="data-获取自定义属性值"><a href="#data-获取自定义属性值" class="headerlink" title="data() 获取自定义属性值"></a>data() 获取自定义属性值</h3><p>通过 <code>data-name</code> 标准格式自定义的属性，也可以是使用 <code>data()</code> 方法来获取其属性值。</p>
<blockquote>
<p>注：HTML5 后，在设置自定属性时，在属性名前加上 <code>data-</code> 前缀。该dom元素上的所有自定属性以键值对的形式存入<code>dataset</code>对象中。</p>
</blockquote>
<p><strong>语法：$(selector).data(“name”)</strong></p>
<p><strong>参数：</strong> name  <code>data-</code> 后面的属性名，注意在获取属性值时不要加 <code>data-</code> </p>
<p><strong>返回值：</strong> 自定义属性的值</p>
<h3 id="removeData-从某元素删除数据"><a href="#removeData-从某元素删除数据" class="headerlink" title="removeData() 从某元素删除数据"></a>removeData() 从某元素删除数据</h3><p><code>removeData()</code> 函数可以从 <code>dom</code> 元素上删除由 <code>data()</code> 函数存储的数据。</p>
<p><strong>语法：$(selector).removeData(‘dataname’)</strong></p>
<p><strong>参数：</strong> dataname : 数据名</p>
]]></content>
      <categories>
        <category>jquery相关</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery-fileupload.js文件上传插件的使用</title>
    <url>/2016/05/20/jquery/plugins/jquery-fileuploadjs/</url>
    <content><![CDATA[<p>基于 jquery 的文件上传插件。</p>
<span id="more"></span>

<h1 id="仓库及文档"><a href="#仓库及文档" class="headerlink" title="仓库及文档"></a>仓库及文档</h1><p>github地址：<a href="https://github.com/blueimp/jQuery-File-Upload">https://github.com/blueimp/jQuery-File-Upload</a></p>
<p>中文文档：<a href="http://www.jq22.com/jquery-info230">http://www.jq22.com/jquery-info230</a></p>
<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="引包"><a href="#引包" class="headerlink" title="引包"></a>引包</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jquery-fileupload依赖于jquery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jquery ui小部件，上传插件依赖了jquery ui的小部件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vendor/jquery.ui.widget.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果上传图片需要跨域，那么需要引入这个js文件，如果不跨域，则不需要引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.iframe-transport.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jquery上传插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.fileupload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：如果文件上传是跨域的，那么需要引入 <code>jquery.iframe-transport.js</code> 库。请按顺序引入。</p>
</blockquote>
<h2 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h2><p><code>name</code>属性指定文件上传时该文件的键名，<code>data-url</code> 指定图片上传时的接口地址。<code>data-url</code> 属性可不指定在 <code>file</code> 域中，使用 <code>fileupload(&#123;&#125;)</code> 方法的配置参数 <code>url</code> 也是可以的，且推荐使用本方式。</p>
<ul>
<li>单文件上传</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;fileupload&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fileFiled&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;server/php/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多文件上传</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加 multiple 属性，指定多文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;fileupload&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files[]&quot;</span> <span class="attr">data-url</span>=<span class="string">&quot;server/php/&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注： 当没有为 <code>&lt;input type=&quot;file&quot; name=&quot;&quot; /&gt;</code> 文件域指定 <code>name</code> 属性时，在上传时，该插件会将 <code>name</code> 属性值默认设置为 “files[]” 所以，当后端无法获取到上传的文件时，请检查 <code>name</code> 属性是否设置正确。</p>
</blockquote>
<h2 id="fileupload-函数"><a href="#fileupload-函数" class="headerlink" title="fileupload 函数"></a>fileupload 函数</h2><p>使用方式也很简单，<code>jquery-fileupload.js</code> 在 <code>jQuery.fn</code> 上挂载了名为 <code>fileupload</code> 的方法，所以你可以通过如下方式调用她。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">&quot;file-selector&quot;</span>).<span class="title function_">fileupload</span>( options );</span><br><span class="line"></span><br><span class="line"><span class="comment">// file-selector  文件域选择器</span></span><br><span class="line"><span class="comment">// options   文件上传配置对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="选择文件后自动上传"><a href="#选择文件后自动上传" class="headerlink" title="选择文件后自动上传"></a>选择文件后自动上传</h2><p>默认的，选择文件后会自动上传。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">&quot;#fileupload&quot;</span>).<span class="title function_">fileupload</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;文件上传请求地址&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">e , data</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件上传成功后触发回调</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="手动上传"><a href="#手动上传" class="headerlink" title="手动上传"></a>手动上传</h2><p>向 <code>fileupload</code> 方法中传递 <code>add</code> 函数，可以做到手动触发上传。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//文件上传初始化</span></span><br><span class="line">$(<span class="string">&quot;#fileupload&quot;</span>).<span class="title function_">fileupload</span>(&#123;</span><br><span class="line"></span><br><span class="line">      url : <span class="string">&quot;上传文件的请求地址&quot;</span>    <span class="comment">//同样也可以在input元素里使用data-url属性来指定请求地址</span></span><br><span class="line">      <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,            <span class="comment">//预期服务器返回的数据类型</span></span><br><span class="line">      <span class="attr">done</span>:<span class="keyword">function</span> (<span class="params">e, data</span>) &#123;   <span class="comment">//图片上传成功后的回调函数，处理上传成功后的动作</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//done回调函数参数注释：</span></span><br><span class="line">        <span class="comment">//data : 图片上传后的对象，通过data.result.picAddr可以获取上传后的图片地址</span></span><br><span class="line">        <span class="comment">//e : 事件对象</span></span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      add : <span class="keyword">function</span>(<span class="params">e,data</span>)&#123;     <span class="comment">//文件上传前触发回调</span></span><br><span class="line">  </span><br><span class="line">  		<span class="comment">// 逻辑处理 ...</span></span><br><span class="line"></span><br><span class="line">  		<span class="comment">//给某个按钮绑定点击事件，点击后开始上传</span></span><br><span class="line">  		$(<span class="string">&quot;.somebtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span> , <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">          data.<span class="title function_">submit</span>();</span><br><span class="line">  		&#125;);</span><br><span class="line">  </span><br><span class="line">  		<span class="comment">//data.submit();  //条件满足后手动触发上传</span></span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;); </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果添加加了 add() 回调函数，必须要调用 data.submit() 方法才会触发文件上传，否则不会执行上传动作。</p>
</blockquote>
<h2 id="附加参数的添加"><a href="#附加参数的添加" class="headerlink" title="附加参数的添加"></a>附加参数的添加</h2><p>如果需要一次传递除文件外的其他参数，可以在文件上传前添加。这里有两种方式，第一种是在 <code>fileupload</code> 的自定义事件 <code>fileuploadsubmit</code> 中添加。第二种则是在 <code>add()</code> 函数中处理添加。</p>
<ul>
<li>文件上传前事件 <code>fileuploadsubmit</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#fileupload&#x27;</span>).<span class="title function_">bind</span>(<span class="string">&#x27;fileuploadsubmit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e, data</span>) &#123;</span><br><span class="line"></span><br><span class="line">  data.<span class="property">formData</span> = &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要额外添加参数可以在这里添加</span></span><br><span class="line">    <span class="comment">// UserID 只是演示，传递什么参，怎么获取，由你自己决定</span></span><br><span class="line">    <span class="title class_">UserID</span>: <span class="string">&#x27;666&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;;  </span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在 <code>add()</code> 函数中添加</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#fileupload&quot;</span>).<span class="title function_">fileupload</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 忽略其他配置</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">e, data</span>)&#123;</span><br><span class="line"></span><br><span class="line">    data.<span class="property">formData</span> = &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在这里添加附件参数</span></span><br><span class="line">      <span class="attr">customKey</span>: <span class="string">&quot;customKey&#x27;s value&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// other params ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不要忘记调用 data.submit() 方法。</span></span><br><span class="line">    data.<span class="title function_">submit</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：更多配置参数及用法，请查看该插件文档。</p>
</blockquote>
]]></content>
      <categories>
        <category>jquery插件相关</category>
      </categories>
      <tags>
        <tag>jquery插件</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>seajs之config</title>
    <url>/2017/01/27/moduleDefinition/cmd/seajs-config/</url>
    <content><![CDATA[<p>本文介绍 <code>seajs</code> 的配置方式。</p>
<span id="more"></span>

<h1 id="seajs-config-模块系统配置"><a href="#seajs-config-模块系统配置" class="headerlink" title="seajs.config() 模块系统配置"></a>seajs.config() 模块系统配置</h1><p>同样的， <code>seajs</code> 也可以进行配置。使用 <code>seajs.config</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块加载基础路径</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">base</span>: <span class="string">&#x27;http://example.com/path/to/base/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 别名配置</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;es5-safe&#x27;</span>: <span class="string">&#x27;gallery/es5-safe/0.9.3/es5-safe&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;json&#x27;</span>: <span class="string">&#x27;gallery/json/1.0.2/json&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;jquery&#x27;</span>: <span class="string">&#x27;jquery/jquery/1.10.1/jquery&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 路径配置</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;gallery&#x27;</span>: <span class="string">&#x27;https://a.alipayobjects.com/gallery&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 变量配置</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;locale&#x27;</span>: <span class="string">&#x27;zh-cn&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 映射配置</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">map</span>: [</span><br><span class="line"></span><br><span class="line">    [<span class="string">&#x27;http://example.com/js/app/&#x27;</span>, <span class="string">&#x27;http://localhost/js/app/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 预加载项</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">preload</span>: [</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;es5-safe&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">JSON</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;json&#x27;</span></span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调试模式</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 文件编码</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="seajs-config详细说明"><a href="#seajs-config详细说明" class="headerlink" title="seajs.config详细说明"></a>seajs.config详细说明</h1><h2 id="alias-Object"><a href="#alias-Object" class="headerlink" title="alias [Object]"></a>alias [Object]</h2><p>当模块标识很长时，可以使用 alias 来简化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;jquery&#x27;</span>: <span class="string">&#x27;jquery/jquery/1.10.1/jquery&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;app/biz&#x27;</span>: <span class="string">&#x27;http://path/to/app/biz.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//=&gt; 加载的是 http://path/to/base/jquery/jquery/1.10.1/jquery.js</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> biz = <span class="built_in">require</span>(<span class="string">&#x27;app/biz&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//=&gt; 加载的是 http://path/to/app/biz.js</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 alias，可以让文件的真实路径与调用标识分开，有利于统一维护。</p>
</blockquote>
<h2 id="paths-Object"><a href="#paths-Object" class="headerlink" title="paths [Object]"></a>paths [Object]</h2><p>当目录比较深，或需要跨目录调用模块时，可以使用 paths 来简化书写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;gallery&#x27;</span>: <span class="string">&#x27;https://a.alipayobjects.com/gallery&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;app&#x27;</span>: <span class="string">&#x27;path/to/app&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> underscore = <span class="built_in">require</span>(<span class="string">&#x27;gallery/underscore&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//=&gt; 加载的是 https://a.alipayobjects.com/gallery/underscore.js*</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> biz = <span class="built_in">require</span>(<span class="string">&#x27;app/biz&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//=&gt; 加载的是 path/to/app/biz.js*</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>paths 配置可以结合 alias 配置一起使用，让模块引用非常方便。</p>
</blockquote>
<h2 id="vars-Object"><a href="#vars-Object" class="headerlink" title="vars [Object]"></a>vars [Object]</h2><p>有些场景下，模块路径在运行时才能确定，这时可以使用 vars 变量来配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">vars</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;locale&#x27;</span>: <span class="string">&#x27;zh-cn&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> lang = <span class="built_in">require</span>(<span class="string">&#x27;./i18n/&#123;locale&#125;.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//=&gt; 加载的是 path/to/i18n/zh-cn.js</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>vars 配置的是模块标识中的变量值，在模块标识中用 {key} 来表示变量。</p>
</blockquote>
<h2 id="map-Array"><a href="#map-Array" class="headerlink" title="map [Array]"></a>map [Array]</h2><p>该配置可对模块路径进行映射修改，可用于路径转换、在线调试等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">map</span>: [</span><br><span class="line"></span><br><span class="line">    [ <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;-debug.js&#x27;</span> ]</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//=&gt; 加载的是 path/to/a-debug.js</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="preload-Array"><a href="#preload-Array" class="headerlink" title="preload [Array]"></a>preload [Array]</h2><p>使用 preload 配置项，可以在普通模块加载前，提前加载并初始化好指定模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 在老浏览器中，提前加载好 ES5 和 json 模块</span></span><br><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">preload</span>: [</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;es5-safe&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">JSON</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;json&#x27;</span></span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>preload 中的空字符串会被忽略掉。</p>
<blockquote>
<p>注意：preload 中的配置，需要等到 use 时才加载。比如：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">preload</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在加载 b 之前，会确保模块 a 已经加载并执行好</span></span><br><span class="line"></span><br><span class="line">seajs.<span class="title function_">use</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>preload 配置不能放在模块文件里面：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">preload</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此处执行时，不能保证模块 a 已经加载并执行好</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="debug-Boolean"><a href="#debug-Boolean" class="headerlink" title="debug [Boolean]"></a>debug [Boolean]</h2><p>值为 true 时，加载器不会删除动态插入的 <code>script</code> 标签。插件也可以根据 debug 配置，来决策 log 等信息的输出。</p>
<h2 id="base-String"><a href="#base-String" class="headerlink" title="base [String]"></a>base [String]</h2><p>Sea.js 在解析顶级标识时，会相对 base 路径来解析。详情请参阅 模块标识</p>
<p>注意：一般请不要配置 base 路径，把 sea.js 放在合适的路径往往更简单一致。</p>
<h2 id="charset-String-Function"><a href="#charset-String-Function" class="headerlink" title="charset [String | Function]"></a>charset [String | Function]</h2><p>获取模块文件时，<code>&lt;script&gt;</code> 或 <code>&lt;link&gt;</code> 标签的 <code>charset</code> 属性。 默认是 <code>utf-8</code></p>
<p>charset 还可以是一个函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">charset</span>: <span class="keyword">function</span>(<span class="params">url</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// xxx 目录下的文件用 gbk 编码加载</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&#x27;http://example.com/js/xxx&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="string">&#x27;gbk&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他文件用 utf-8 编码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;utf-8&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：多次配置自动合并，seajs.config 可以多次运行，每次运行时，会对配置项进行合并操作：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;jquery&#x27;</span>: <span class="string">&#x27;path/to/jquery.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;path/to/a.js&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">preload</span>: [<span class="string">&#x27;seajs-text&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;underscore&#x27;</span>: <span class="string">&#x27;path/to/underscore.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;path/to/biz/a.js&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">preload</span>: [<span class="string">&#x27;seajs-combo&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面两处 config 运行的结果是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">alias = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;jquery&#x27;</span>: <span class="string">&#x27;path/to/jquery.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;underscore&#x27;</span>: <span class="string">&#x27;path/to/underscore.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;path/to/biz/a.js&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">preload = [<span class="string">&#x27;seajs-text&#x27;</span>, <span class="string">&#x27;seajs-combo&#x27;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>即：config 会自动合并不存在的项，对存在的项则进行覆盖。</p>
</blockquote>
<p>插件的配置，插件可以给 Sea.js 添加配置项，请查看具体插件了解相关配置。</p>
<p>配置文件，配置可以直接写在 html 页面上，也可以独立出来成为一个文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// seajs.config.js</span></span><br><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>推荐将配置文件独立成一个文件放在项目根目录，方便管理，你可以将它命名为 <code>seajs.config.js</code>，方便区分。</p>
]]></content>
      <categories>
        <category>模块化相关</category>
      </categories>
      <tags>
        <tag>CMD规范</tag>
        <tag>seajs.config</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>seajs教程</title>
    <url>/2017/01/26/moduleDefinition/cmd/seajs/</url>
    <content><![CDATA[<p>本文介绍 <code>require.js(AMD)</code> 的近亲 <code>sea.js(CMD)</code> 的基本使用，其基于 <a class="fc-danger" href="https://github.com/cmdjs/specification/blob/master/draft/module.md"> <code>CMD(Common Module Definition)</code></a>规范。该规范明确了模块的基本书写格式和基本交互规则。</p>
<span id="more"></span>


<p>至于为什么要使用模块化管理器，这里就不再说明了，自从 <code>require.js</code> 出现后，前端开发再一次发生了巨大变化，让原本无模块化系统的浏览器具备了模块化的功能，页面中<code>&lt;script&gt;</code>标签的引用不再是瀑布式的扑面而来，各模块之间的依赖关系管理变得轻而易举。随后不久，支付宝的 <code>玉伯</code> 开发出了基于 <code>CMD规范</code> 的 <code>sea.js</code>，其与 <code>require.js</code> 有着很大的不同之处，比如 <code>require.js</code> 对模块文件加载方式是 <code>预先加载</code> ，而 <code>sea.js</code> 则是 <code>按需加载</code>。在使用方式上也存在不同。</p>
<h1 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h1><ul>
<li>从 github 下载 <a class="fc-danger" href="https://github.com/seajs/seajs">seajs</a></li>
</ul>
<h1 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h1><p><code>Sea.js</code> 是一个适用于 Web 浏览器端的模块加载器。在 <code>Sea.js</code> 里，一切皆是模块，所有模块协同构建成模块系统。<code>Sea.js</code> 首要要解决的是模块系统的基本问题：</p>
<ul>
<li><p>模块是什么？</p>
</li>
<li><p>模块之间如何交互？</p>
</li>
</ul>
<p>在前端开发领域，一个模块，可以是 JS 模块，也可以是 CSS 模块，或是 Template 等模块。在 <code>Sea.js</code> 里，我们专注于 JS 模块（其他类型的模块可以转换为 JS 模块）：</p>
<ul>
<li><p>模块是一段 <code>JavaScript</code> 代码，具有统一的基本书写格式。</p>
</li>
<li><p>模块之间通过基本交互规则，能彼此引用，协同工作。</p>
</li>
</ul>
<p>把上面两点中提及的基本书写格式和基本交互规则描述清楚，就能构建出一个模块系统。对书写格式和交互规则的详细描述，就是模块定义规范（Module Definition Specification）。比如 CommonJS 社区的 <code>Modules 1.1.1</code> 规范，以及 <code>NodeJS</code> 的 <code>Modules</code> 规范，还有 <code>RequireJS</code> 提出的 <code>AMD</code> 规范等等。</p>
<p><code>Sea.js</code> 遵循的是 <code>CMD</code> 规范，会在接下来的文档中详细阐述。</p>
<h1 id="define-函数定义模块"><a href="#define-函数定义模块" class="headerlink" title="define 函数定义模块"></a>define 函数定义模块</h1><p><code>seajs</code> 使用 <code>define</code> 函数来定义一个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line">  <span class="comment">// 引入依赖的 foo 模块</span></span><br><span class="line">  <span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;/some/foo&#x27;</span>);</span><br><span class="line">  <span class="comment">// do something ...</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 导出一些接口</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>define()</code> 函数的详细介绍请参考： <a class="fc-danger" href="https://hongwenqing.com/2017/01/28/moduleDefinition/cmd/seajs-define/"> seajs之define函数 </a>。</p>
<h1 id="对外导出接口"><a href="#对外导出接口" class="headerlink" title="对外导出接口"></a>对外导出接口</h1><p><code>seajs</code> 中，对外导出接口的方式有 3 种。</p>
<ol>
<li>使用 <code>exports</code> 导出接口。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">hello</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is foo module!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如上所示，foo 模块向外提供了 <code>foo.hello()</code> 方法。</p>
<ol start="2">
<li>使用 <code>module.exports</code> 导出接口。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bar.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is bar module!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如上所示，bar 模块向外提供了 <code>bar.say()</code> 方法。</p>
<ol start="3">
<li>使用 <code>return</code> 导出接口。</li>
</ol>
<p>还可以像 <code>requirejs</code> 那样，直接使用 <code>return</code> 向外提供接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// baz.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;baz&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如上所示，baz 模块向外导出了一个对象，其包含了一个 <code>name</code> 属性。</p>
<h1 id="seajs-use-方法加载指定模块"><a href="#seajs-use-方法加载指定模块" class="headerlink" title="seajs.use() 方法加载指定模块"></a>seajs.use() 方法加载指定模块</h1><p><code>seajs</code> 使用 <code>seajs.use</code> 方法加载一个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">seajs.<span class="title function_">use</span>(<span class="string">&#x27;./main&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如上代码，加载 <code>main</code> 模块。</p>
<h1 id="seajs-config-配置"><a href="#seajs-config-配置" class="headerlink" title="seajs.config 配置"></a>seajs.config 配置</h1><p><code>seajs</code> 也是可配置的，使用 <code>seajs.config()</code> 函数进行配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">alias</span>: &#123;&#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p>具体的配置项信息，请参考：<a class="fc-danger" href="https://hongwenqing.com/2017/01/27/moduleDefinition/cmd/seajs-config/">seajs之config</a>。</p>
<h1 id="非CMD模块处理"><a href="#非CMD模块处理" class="headerlink" title="非CMD模块处理"></a>非CMD模块处理</h1><p>没错，<code>sea.js</code> 同样会面对那些非 CMD 规范的模块引用问题，解决方式如下。</p>
<ol>
<li>在 <code>sea.js-2.1.0</code> 之前的版本，可以使用 <code>shim</code> 插件来解决非 CMD 模块引用问题。例如：jquery，其使用的是标准的 AMD 模块定义方式，所以想要使用 <code>sea.js</code> 加载她，那么你必须对其进行特殊处理。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// seajs.config.js</span></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="comment">// 开启 shim 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;shim&#x27;</span>],</span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置别名</span></span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;/assets/jquery/jquery-1.12.4&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>配置好后，便可以在其他模块使用 <code>require()</code> 函数通过别名 <code>jquery</code> 引用她。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( $ )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 <code>sea.js-2.1.0</code> 之后的所有版本中，<code>seajs</code> 不再支持 <code>shim</code> 插件的用法，原因是，这种用法使得各模块之间的依赖关系变得极其复杂，代码量剧增，后期维护变得困难，为此<code>玉伯</code>放弃并剔除了这种用法，提出，我们可以对非 CMD 模块进行手动包装一层 <code>define</code> 函数再进行使用。</li>
</ol>
<p>还是以 <code>jquery</code> 为例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// jquery code ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> jQuery</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如此，你也可以在其他模块直接引入她。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;/assets/jquery/jquery-1.12.4&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( $ )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>看到这里，相信你跟我一样，对 <code>seajs</code> 的热度瞬间冰封，因为其对非 CMD 模块的支持度太低？ 没错，就是这么现实，随着大前端的不断发展，像 <code>seajs</code> 包括 <code>requirejs</code> 必然会被历史淘汰，耶稣都拉不回来，我说的！</p>
</blockquote>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><p>在多页面应用中，每个页面都会对应一个主逻辑文件，那如果，我们每次都在 <code>*.js</code> 文件头部写配置信息的话，那就太蠢了。效率低下而不优雅。</p>
<p>所以，在项目根目录下，创建一个 <code>seajs.config.js</code> 文件，将配置信息写在这个文件中。当然，文件名你可以随便定义，最好能够区分她是谁的配置文件。</p>
<p><strong>对于多页应用来说，通常我们会有如下项目结构：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">|-www/</span><br><span class="line">|   |-assets</span><br><span class="line">|   |   |- seajs</span><br><span class="line">|   |       |- sea.js</span><br><span class="line">|   |   |- jquery</span><br><span class="line">|   |       |- jquery.js</span><br><span class="line">|   |   |-  ...</span><br><span class="line">|   |-pages</span><br><span class="line">|   |   |- login</span><br><span class="line">|   |       |- login.html</span><br><span class="line">|   |       |- login.js</span><br><span class="line">|   |   |- demo</span><br><span class="line">|   |       |- demo.html</span><br><span class="line">|   |       |- demo.js</span><br><span class="line">|   |-utils</span><br><span class="line">|   |   |- dom.js</span><br><span class="line">|   |-style</span><br><span class="line">|   |-seajs.config.js</span><br><span class="line">|   |-README.md</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么我们会这样使用模块化。</p>
<p><strong>demo.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> this is demo page <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/assets/seajs/sea.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   <span class="comment">&lt;!-- 引入sea.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/seajs.config.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>       <span class="comment">&lt;!-- 引入seajs的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  seajs.<span class="title function_">use</span>(<span class="string">&#x27;../pages/demo/demo&#x27;</span>)              <span class="comment">//页面的主入口文件</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>seajs.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&quot;/assets&quot;</span>,</span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;jquery/jquery&quot;</span>,</span><br><span class="line">    <span class="attr">dom</span>: <span class="string">&quot;../utils/dom&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>demo.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span> , <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//该 主程序文件 依赖于 2个 模块 ， 分别是 jquery, dom</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> dom = <span class="built_in">require</span>(<span class="string">&#x27;dom&#x27;</span>);</span><br><span class="line">  <span class="comment">//其中 dom 为 自己定义的 模块</span></span><br><span class="line">  <span class="comment">// some code here...</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模块化相关</category>
      </categories>
      <tags>
        <tag>CMD规范</tag>
        <tag>模块化</tag>
        <tag>seajs</tag>
      </tags>
  </entry>
  <entry>
    <title>seajs之define函数</title>
    <url>/2017/01/28/moduleDefinition/cmd/seajs-define/</url>
    <content><![CDATA[<p>本文介绍 <code>seajs</code> 的模块定义方式。</p>
<span id="more"></span>

<h1 id="define-factory-函数定义模块"><a href="#define-factory-函数定义模块" class="headerlink" title="define(factory) 函数定义模块"></a>define(factory) 函数定义模块</h1><p>在 <code>seajs</code> 中，使用 <code>define</code> 函数来定义一个模块，其接受 <code>id</code> , <code>dependencies</code> 和一个工厂函数 <code>factory</code> 作为参数。其中，前两个参数可选。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">define</span>(id?, dependencies?, factory);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="id-参数"><a href="#id-参数" class="headerlink" title="id 参数"></a>id 参数</h2><p>当前模块的唯一标识。该参数可选。如果没有指定，默认为模块所在文件的访问路径。如果指定的话， 必须是顶级或绝对标识（不能是相对标识）。</p>
<h2 id="dependencies-参数"><a href="#dependencies-参数" class="headerlink" title="dependencies 参数"></a>dependencies 参数</h2><p>当前模块所依赖的模块，是一个由模块标识组成的数组。该参数可选。如果没有指定，模块加载器会从 <code>factory.toString()</code> 中解析出该数组。</p>
<blockquote>
<p>注意：强烈推荐不要设定 id 和 dependencies 参数。 在开发阶段，模块加载器会自动获取这两个参数。部署上线时，则可以通过优化工具来提取这两个参数。</p>
</blockquote>
<h2 id="factory-参数"><a href="#factory-参数" class="headerlink" title="factory 参数"></a>factory 参数</h2><p>模块的工厂函数。模块初始化时，会调用且仅调用一次该工厂函数。<code>factory</code> 可以是函数， 也可以是对象、字符串等任意值，这时 <code>module.exports</code> 会直接设置为 <code>factory</code> 值。</p>
<p><code>factory</code> 函数在调用时，会始终传入三个参数： <code>require、exports 和 module</code>， 这三个参数在所有模块代码里可用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The module code goes here...</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="require-函数"><a href="#require-函数" class="headerlink" title="require 函数"></a>require 函数</h2><p><code>require</code> 函数用来访问其他模块提供的 API。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 访问 util.js 模块</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;/utils/util&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="require-async-异步加载函数"><a href="#require-async-异步加载函数" class="headerlink" title="require.async 异步加载函数"></a>require.async 异步加载函数</h2><p>该方法可用来异步加载模块，并在加载完成后执行回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">define</span>( <span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载一个模块</span></span><br><span class="line">  <span class="built_in">require</span>.<span class="title function_">async</span>(<span class="string">&#x27;./b&#x27;</span>, <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line"></span><br><span class="line">    b.<span class="title function_">doSomething</span>();</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 加载多个模块</span></span><br><span class="line">  <span class="built_in">require</span>.<span class="title function_">async</span>([<span class="string">&#x27;./c&#x27;</span>, <span class="string">&#x27;./d&#x27;</span>], <span class="keyword">function</span>(<span class="params">c, d</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="require-resolve-函数"><a href="#require-resolve-函数" class="headerlink" title="require.resolve 函数"></a>require.resolve 函数</h2><p>使用 <code>require()</code> 的内部机制来解析并返回模块路径。该函数不会加载模块，只返回解析后的路径。</p>
<h2 id="require-load-函数"><a href="#require-load-函数" class="headerlink" title="require.load 函数"></a>require.load 函数</h2><p>该方法可用来异步加载脚本，并在加载完成后，执行指定的回调函数。开发插件时， 可以通过覆盖该方法来实现自定义的资源加载。</p>
<h2 id="require-constructor-属性"><a href="#require-constructor-属性" class="headerlink" title="require.constructor 属性"></a>require.constructor 属性</h2><p>有时候，我们需要给所有 <code>require</code> 参数对象添加一些公用属性或方法。这时， 使用 <code>require.constructor</code> 来实现会非常方便。</p>
<h2 id="exports-对象"><a href="#exports-对象" class="headerlink" title="exports 对象"></a>exports 对象</h2><p>我们可以在 <code>exports</code> 对象上挂载对外的接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">foo</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is foo module&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如上代码所示，我们定义了一个 <code>foo.js</code> 模块，并向外导出了一个 <code>foo</code> 方法。那么，我们可以这样在其他模块中使用她：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 引入 foo.js 模块，假设该文件在根目录下的 some 文件夹下</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;/some/foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 foo() 方法</span></span><br><span class="line"></span><br><span class="line">  foo.<span class="title function_">foo</span>()    <span class="comment">// this is foo module</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="module-对象"><a href="#module-对象" class="headerlink" title="module 对象"></a>module 对象</h2><p>我们也可以使用 <code>module.exports</code> 对象向外导出接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bar.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// some code ...</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="attr">bar</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;module&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如上代码所示，我们在 <code>bar.js</code> 模块中导出了对象作为对外接口。我们在引用她试试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 引入 bar.js 模块，假设该文件在根目录下的 some 文件夹下</span></span><br><span class="line">  <span class="keyword">var</span> bar = <span class="built_in">require</span>(<span class="string">&#x27;/some/bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用</span></span><br><span class="line">  bar.<span class="title function_">bar</span>()    <span class="comment">// this is bar module</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="module-id-属性"><a href="#module-id-属性" class="headerlink" title="module.id 属性"></a>module.id 属性</h2><p>当前模块的唯一标识。 require(module.id) 必然返回此模块的 exports。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">id</span>); <span class="comment">// http://path/to/this/file.js</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="variable language_">module</span>.<span class="property">id</span>) === <span class="built_in">exports</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="module-dependencies-属性"><a href="#module-dependencies-属性" class="headerlink" title="module.dependencies 属性"></a>module.dependencies 属性</h2><p><code>module.dependencies</code> 是一个数组，表示当前模块的依赖列表。该数组只读：模块加载完成后，修改该数组不会有任何效果。</p>
<h2 id="module-exports-对象"><a href="#module-exports-对象" class="headerlink" title="module.exports 对象"></a>module.exports 对象</h2><p><code>exports</code> 对象由模块系统创建，这不能满足开发者的所有需求， 有时候会希望 <code>exports</code> 是某个类的实例。 这时可用 <code>module.exports</code> 来实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">SomeClass</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，对 module.exports 的赋值需要同步执行，它不能放在回调函数里。 下面这样是不行的。</p>
</blockquote>
<p><strong>x.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setTimeOut</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>y.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span>, <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">require</span>(<span class="string">&#x27;./x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>)   <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="module-constructor-属性"><a href="#module-constructor-属性" class="headerlink" title="module.constructor 属性"></a>module.constructor 属性</h2><p>有时候，我们需要给所有 <code>module</code> 参数对象添加一些公用属性或方法。在这种情况下， 使用 <code>module.constructor</code> 可以很好地满足需求。</p>
<p><strong>extend.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// extend.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Module</span> = <span class="variable language_">module</span>.<span class="property">constructor</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">filename</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id = <span class="variable language_">this</span>.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> parts = id.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parts[parts.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>a.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">filename</span> = <span class="variable language_">module</span>.<span class="title function_">filename</span>();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="exports-和-module-的区别"><a href="#exports-和-module-的区别" class="headerlink" title="exports 和 module 的区别"></a>exports 和 module 的区别</h2><p><code>sea.js</code> 的这部分实现，借鉴了 <code>CommonJs</code> 规范，即 <code>node.js</code> 中的模块实现。也就是说，<code>exports</code> 只是 <code>module.exports</code> 的一个引用，<code>require</code> 函数返回的永远是 <code>module.exports</code> 对象。所以对于如下操作是不对的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"> <span class="built_in">require</span> , <span class="built_in">exports</span> , <span class="variable language_">module</span> </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;baz&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：不能直接对 <code>exports</code> 直接重新赋值，重新赋值后，<code>exports</code> 就不再指向 <code>module.exports</code> 对象了，当你 <code>require</code> 该模块时，其返回的永远都是 <code>&#123;&#125;</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>模块化相关</category>
      </categories>
      <tags>
        <tag>CMD规范</tag>
        <tag>模块化</tag>
        <tag>define</tag>
      </tags>
  </entry>
  <entry>
    <title>requirejs教程</title>
    <url>/2017/01/11/moduleDefinition/amd/requirejs/</url>
    <content><![CDATA[<p>随着前端项目的不断增大，js 文件越来越多，大部分都是 js 的依赖模块，传统的引入方式已经无法满足当前开发需求，急需模块化的方案来替我们管理这些依赖。<br>但，javascript 天生并不支持模块化，无法将多个模块文件分离出去，在使用时再将多个模块合并起来。事情总是需要解决，也总是不缺乏造轮子的人。<br>于是，前端模块化的始祖，<code>require.js</code> 出现了，其基于 <code>AMD</code> 规范。使用 <code>define</code> 函数定义模块，利用 <code>require</code> 函数 导入模块。详细使用方式请继续往下看。</p>
<span id="more"></span>


<h1 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h1><ul>
<li>官方地址: <a href="https://requirejs.org/">https://requirejs.org/</a></li>
<li>github: <a href="https://github.com/requirejs/requirejs">https://github.com/requirejs/requirejs</a></li>
</ul>
<h1 id="为什么要使用-require-js"><a href="#为什么要使用-require-js" class="headerlink" title="为什么要使用 require.js?"></a>为什么要使用 <code>require.js</code>?</h1><p>最早的时候，所有 Javascript 代码都写在一个文件里面，只要加载这一个文件就够了。后来，代码越来越多，一个文件不够了，必须分成多个文件，依次加载。下面的网页代码，相信很多人都见过。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　　&lt;script src=<span class="string">&quot;1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">　　<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">　　<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">　　<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">　　<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">　　<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;6.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这段代码依次加载多个 <code>js</code> 文件。</p>
<p>这样的写法有很大的缺点。首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；其次，由于 <code>js</code> 文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的<code>1.js</code> 要在 <code>2.js</code> 的前面），依赖性最大的模块一定要放到最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p><code>require.js</code> 的诞生，就是为了解决这两个问题：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">（1）实现js文件的异步加载，避免网页失去响应。</span><br><span class="line"></span><br><span class="line">（2）管理模块之间的依赖性，便于代码的编写和维护。</span><br></pre></td></tr></table></figure>


<h1 id="模块加载规则"><a href="#模块加载规则" class="headerlink" title="模块加载规则"></a>模块加载规则</h1><p><code>RequireJS</code> 以一个相对于 <code>baseUrl</code> 的地址来加载所有的代码。 即 <code>baseUrl + paths</code> 的解析过程。</p>
<p><strong>baseUrl的确定规则</strong></p>
<ul>
<li>以含有 <code>data-main</code> 属性的 <code>script</code> 的 <code>html</code> 页面所在文件目录为 <code>baseUrl</code>。</li>
</ul>
<p>页面顶层 <code>&lt;script&gt;</code> 标签含有一个特殊的属性 <code>data-main</code>，<code>require.js</code>使用它来启动脚本加载过程，而<code>baseUrl</code>一般设置到与该属性相一致的目录。</p>
<ul>
<li>以 <code>paths</code> 配置为准。(下面会介绍如何配置)</li>
</ul>
<div class="note warning"><p><strong>注：</strong><br><code>RequireJS</code> 默认假定所有的依赖资源都是 <code>js</code> 脚本，因此无需在 <code>module ID</code> 上再加 <code>.js</code> 后缀，<code>RequireJS</code> 在进行 <code>module ID</code> 到 <code>path</code> 的解析时会自动补上后缀。你可以通过 <code>paths config</code> 设置一组脚本，这些有助于我们在使用脚本时码更少的字。</p>
<p>有时候你想避开 <code>baseUrl + paths</code> 的解析过程，而是直接指定加载某一个目录下的脚本。此时可以这样做：如果一个 <code>module ID</code> 符合下述规则之一，其ID解析会避开常规的 <code>baseUrl + paths</code> 配置，而是直接将其加载为一个相对于当前 <code>HTML</code> 文档的脚本：</p>
</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 以 &quot;.js&quot; 结束.</span><br><span class="line">2. 以 &quot;/&quot; 开始.</span><br><span class="line">3. 包含 URL 协议, 如 &quot;http:&quot; or &quot;https:&quot;.</span><br></pre></td></tr></table></figure>


<p><strong>文件结构</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|-www/</span><br><span class="line">|   |-libs</span><br><span class="line">|   |   |- require.js</span><br><span class="line">|   |   |- jquery.js</span><br><span class="line">|   |   |- layer.js</span><br><span class="line">|   |-utils</span><br><span class="line">|   |   |- dom.js</span><br><span class="line">|   |-pages</span><br><span class="line">|   |   |-login</span><br><span class="line">|   |   |   |- login.html</span><br><span class="line">|   |   |   |- login.js</span><br><span class="line">|   |-style</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>login.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">&quot;./login.js&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/libs/require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>dom.js</strong><br>该模块导出了一个对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;dom module&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p><strong>login.js</strong></p>
<p>在 <code>login.js</code> 中，引用了 dom 模块，此时，<code>baseUrl</code> 为 <code>login.html</code> 所在的目录。所以，要想找到 <code>dom.js</code>，需要连跳两层文件夹，再进入 <code>utils</code>文件夹。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;../../utils/dom&#x27;</span>] , <span class="keyword">function</span>(<span class="params"> dom </span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( dom.<span class="property">name</span> ) <span class="comment">// dom module</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里有个需要注意的地方，如果你引用了那些定义了 <code>模块名</code> 的文件，是无法保证主逻辑文件和依赖文件的加载顺序的，也就是说，你很有可能获取不到依赖文件导出的变量。例如 <code>jquery.js</code> ，其内部 定义模块时，加上了模块名参数 <code>jquery</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&quot;jquery&quot;</span> , <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>基于这种情况，<code>require.js</code> 会根据 <code>paths</code> 配置查找文件路径 (关于配置下面会介绍)。如果没有配置 <code>paths</code> 的话，<code>require.js</code> 只会简单的将该依赖文件通过含有 <code>async</code> 属性的 <code>&lt;script&gt;</code> 标签加载到 <code>&lt;head&gt;</code> 中，并不会处理文件之间的依赖关系。所以，当你引用一个含有模块名定义的依赖，又没有为其配置 <code>paths</code> 时，就会出现如下状况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// login.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;../../libs/jquery&#x27;</span>] , <span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( $ )  <span class="comment">// undefined</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p>所以此时，我们需要对依赖进行配置 <code>paths</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// login.js</span></span><br><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&quot;/libs&quot;</span>,</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;jquery&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;jquery&#x27;</span>] , <span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( $ ); </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ƒ ( selector, context ) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		// The jQuery object is actually just the init constructor &#x27;enhanced&#x27;</span></span><br><span class="line"><span class="comment">		// Need init if jQuery is called (just allow error to be thrown if not included)</span></span><br><span class="line"><span class="comment">		return new jQuery…</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在，我们就可以拿到 <code>jquery</code> 导出的全局变量 <code>$</code> 了。</p>
<h1 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h1><h2 id="data-main属性"><a href="#data-main属性" class="headerlink" title="data-main属性"></a>data-main属性</h2><p>指定页面主逻辑文件的的路径，它有点像 <code>c语言</code> 中 <code>main()</code>函数，所有的代码都从这开始运行。同时，它也默认确定了 <code>baseUrl</code> 的值为当前页面所在的目录。</p>
<h2 id="require-config-配置方法"><a href="#require-config-配置方法" class="headerlink" title="require.config()配置方法"></a>require.config()配置方法</h2><p><strong>require.config.js文件：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="comment">//配置模块的基本路径</span></span><br><span class="line">  <span class="comment">//当在服务器模式下时，如果不使用 `/` 开头指定模块别名的路径的话，即当前的路径环境就是 根目录下的 assets 文件夹下</span></span><br><span class="line">  <span class="comment">//通常，多页面开发中，我们将第三方资源放在 assets 文件夹中</span></span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;/assets&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//配置模块别名,也可以称作路径别名</span></span><br><span class="line">  <span class="comment">//当配置 baseUrl 属性的 时候 ， 此时就不需要加上 `/assets/` 了</span></span><br><span class="line">  <span class="comment">// requirejs 会自动帮你拼上，同时，其默认处理的就是 js 文件，所以文件的 .js 后缀也不需要加。</span></span><br><span class="line">  paths : &#123;</span><br><span class="line">    jquery : <span class="string">&#x27;jquery/jquery.min&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//资源地址除了上面的 字符串格式，还可以是 数组格式，如：</span></span><br><span class="line">    <span class="comment">//其作用是：优先加载远程资源，当加载不成功时，则加载本地资源文件</span></span><br><span class="line">    bootstrap : [<span class="string">&#x27;https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js&#x27;</span> , <span class="string">&#x27;bootstrap/bootstrap.min&#x27;</span> ],</span><br><span class="line"></span><br><span class="line">    foo : <span class="string">&#x27;../js/foo&#x27;</span>   <span class="comment">// 配置一个自己定义的模块</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//处理不支持AMD模块化的第三方依赖</span></span><br><span class="line">  <span class="comment">//比如 bootstrap ，其不支持 AMD 规范 ，即其没有使用 define 函数进行模块定义</span></span><br><span class="line">  <span class="comment">//随后进行 define 函数 的 使用说明</span></span><br><span class="line">  shim : &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需要 shim (垫) 的模块 ， 上方已配置了 路径别名</span></span><br><span class="line">    bootstrap : &#123;</span><br><span class="line">      <span class="comment">//配置依赖项</span></span><br><span class="line">      deps : [<span class="string">&#x27;jquery&#x27;</span>],</span><br><span class="line">      <span class="comment">//配置导出变量名</span></span><br><span class="line">      <span class="built_in">exports</span> : <span class="string">&#x27;bootstrap&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//其他配置项</span></span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 至此，require.config.js 配置文件的配置就 基本完成了 ，当要引入其他模块时，继续配置即可。</span></span><br><span class="line"><span class="comment">// 支持AMD规范的 只需在 path 字段中 加个 配置 ， 不支持 AMD 规范的 再在 shim 字段中 垫 一下即可。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="define-函数"><a href="#define-函数" class="headerlink" title="define() 函数"></a>define() 函数</h2><p>AMD 规范要求 ，定义一个模块时 ，必须使用 <code>define()</code> 函数 来进行模块的 定义。</p>
<p><strong>define 函数的参数说明</strong></p>
<p>在定义一个模块时，其实 <code>define</code> 函数 接受 3个 参数。</p>
<p>参数1 : String类型，定义该模块的名字(一般不会写这个参数，使用路径的方式引用模块更易控)<br>参数2 : Array类型，该模块依赖，使用配置好的路径别名 或 路径<br>参数3 : callback, 该模块的主逻辑体 ， <code>callback</code> 回调函数的 可接收 一些参数，这些参数就是 该模块的依赖项所导出的模块变量<br>值得注意的是，你需要按照 参数2 模块依赖 数组中参数的顺序来 配置 回调函数 的 形参顺序。</p>
<p>@returns : 任意类型，指定定义模块导出的接口。</p>
<p><strong>例：</strong></p>
<blockquote>
<p>定义了一个 foo 模块，该模块依赖于 jquery<br>输出打印了一些信息<br>导出了一个对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;jquery&#x27;</span>] , <span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>($)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是foo模块&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>&#125;  <span class="comment">// 导出接口</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>




<h2 id="require-函数"><a href="#require-函数" class="headerlink" title="require() 函数"></a>require() 函数</h2><p>有定义，就有引用，AMD规范中，使用 <code>require()</code> 函数 来引用模块。</p>
<p><strong>require 函数的参数说明</strong></p>
<p>参数1 : Array类型，模块依赖<br>参数2 : callback , 主体逻辑</p>
<p><strong>例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;jquery&#x27;</span> , <span class="string">&#x27;foo&#x27;</span>] , <span class="keyword">function</span>(<span class="params"> $ </span>)&#123;</span><br><span class="line">  <span class="comment">// your main logic code ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><p>在多页面应用中，每个页面都会对应一个主逻辑文件，那如果，我们每次都在 <code>*.js</code> 文件头部写配置信息的话，那就太蠢了。效率低下而不优雅。</p>
<p>所以，在项目根目录下，创建一个 <code>require.config.js</code> 文件，将配置信息写在这个文件中。当然，文件名你可以随便定义，最好能够区分她是谁的配置文件。</p>
<p><strong>对于多页应用来说，通常我们会有如下项目结构：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">|-www/</span><br><span class="line">|   |-assets</span><br><span class="line">|   |   |- requirejs</span><br><span class="line">|   |       |- require.js</span><br><span class="line">|   |   |- jquery</span><br><span class="line">|   |       |- jquery.js</span><br><span class="line">|   |   |-  ...</span><br><span class="line">|   |-pages</span><br><span class="line">|   |   |- login</span><br><span class="line">|   |       |- login.html</span><br><span class="line">|   |       |- login.js</span><br><span class="line">|   |   |- demo</span><br><span class="line">|   |       |- demo.html</span><br><span class="line">|   |       |- demo.js</span><br><span class="line">|   |-utils</span><br><span class="line">|   |   |- dom.js</span><br><span class="line">|   |-style</span><br><span class="line">|   |-require.config.js</span><br><span class="line">|   |-README.md</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么我们会这样使用模块化。</p>
<p><strong>demo.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> this is demo page <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/assets/requirejs/require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 引入require.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/require.config.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 引入requirejs的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">require</span>([<span class="string">&#x27;../pages/demo/demo&#x27;</span>])  <span class="comment">//页面的主入口文件</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>require.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&quot;/assets&quot;</span>,</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;jquery/jquery&quot;</span>,</span><br><span class="line">    <span class="attr">dom</span>: <span class="string">&quot;../utils/dom&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>




<p><strong>demo.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;jquery&#x27;</span> , <span class="string">&#x27;dom&#x27;</span>] , <span class="keyword">function</span>(<span class="params">$ , dom</span>)&#123;</span><br><span class="line">  <span class="comment">//该 主程序文件 依赖于 2个 模块 ， 分别是 jquery, dom</span></span><br><span class="line">  <span class="comment">//其中 dom 为 自己定义的 模块</span></span><br><span class="line">  <span class="comment">// some code here...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也许你会想，哇！这不还是加载了 3 个 <code>script</code> 标签引用吗？ <br /></p>
<p><code>-- ||</code> 当你有 100 个 js 文件依赖时，你就不会这么想了！不信你可以试试。祝你好运！</p>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">IE 6+ .......... 兼容 ✔</span><br><span class="line">Firefox 2+ ..... 兼容 ✔</span><br><span class="line">Safari 3.2+ .... 兼容 ✔</span><br><span class="line">Chrome 3+ ...... 兼容 ✔</span><br><span class="line">Opera 10+ ...... 兼容 ✔</span><br></pre></td></tr></table></figure>


<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>这篇文章仅记录 <code>require.js</code> 的简单使用，可以帮助你快速入门，一般项目开发足够了，需要更多有关 <code>require.js</code> 的信息，可以翻阅 <a class="fc-primary" href="https://requirejs.org/"> requirejs 官网 </a>。</p>
]]></content>
      <categories>
        <category>模块化相关</category>
      </categories>
      <tags>
        <tag>模块化</tag>
        <tag>AMD规范</tag>
        <tag>requirejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs之模块加载</title>
    <url>/2018/01/01/moduleDefinition/commonJs/nodejs-module/</url>
    <content><![CDATA[<p>本文介绍 <code>nodejs</code> 中的模块加载方式及用法。</p>
<span id="more"></span>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 Node.js 模块系统中，每个文件都被视为一个独立的模块。 例如，假设有一个名为 foo.js 的文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> circle = <span class="built_in">require</span>(<span class="string">&#x27;./circle.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`半径为 4 的圆的面积是 <span class="subst">$&#123;circle.area(<span class="number">4</span>)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>在第一行中， foo.js 加载了与 foo.js 在同一目录中的 circle.js 模块。</p>
<p>以下是 circle.js 的内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">PI</span> &#125; = <span class="title class_">Math</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">area</span> = <span class="function">(<span class="params">r</span>) =&gt;</span> <span class="variable constant_">PI</span> * r ** <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">circumference</span> = <span class="function">(<span class="params">r</span>) =&gt;</span> <span class="number">2</span> * <span class="variable constant_">PI</span> * r;</span><br></pre></td></tr></table></figure>

<p>circle.js 模块导出了 area() 和 circumference() 函数。 通过在特殊的 exports 对象上指定额外的属性，可以将函数和对象添加到模块的根部。</p>
<p>模块内的本地变量是私有的，因为模块由 Node.js 封装在一个函数中（详见模块封装器）。 在这个例子中，变量 PI 对 circle.js 是私有的。</p>
<p>可以为 module.exports 属性分配新的值（例如函数或对象）。</p>
<p>下面的例子中， bar.js 使用了导出 Square 类的 square 模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Square</span> = <span class="built_in">require</span>(<span class="string">&#x27;./square.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mySquare = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`mySquare 的面积是 <span class="subst">$&#123;mySquare.area()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>square 模块定义在 square.js 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 赋值给 `exports` 不会修改模块，必须使用 `module.exports`。</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">area</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>模块系统在 require(‘module’) 模块中实现。</p>
<h1 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h1><p>在 <code>nodejs</code> 中，一个模块的定义或者说导出方式是使用 <code>module.exports</code> 或者 <code>exports</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is &#x27;</span>+ <span class="variable language_">this</span>.<span class="property">name</span> +<span class="string">&#x27; module&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，我们定义了 foo.js 模块，你可以是使用 <code>require</code> 函数来引用她。</p>
<p>使用 <code>exports</code> 向外提供接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// baz.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"> text </span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&#x27;hello&#x27;</span> + text + <span class="string">&#x27;!&#x27;</span> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，baz 模块向外提供了 <code>say</code> 方法。</p>
<h1 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h1><p>在 <code>nodejs</code> 中，使用 <code>require</code> 函数来引用一个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bar.js</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;./foo.js&#x27;</span>)</span><br><span class="line">foo.<span class="title function_">say</span>()     <span class="comment">// this is foo module</span></span><br></pre></td></tr></table></figure>

<p>如上代码，我们引用了 foo.js 模块，并使用了 <code>foo.say</code> 方法。</p>
<h1 id="exports-和-module-exports"><a href="#exports-和-module-exports" class="headerlink" title="exports 和 module.exports"></a>exports 和 module.exports</h1><p>我们已经知道了在 nodejs 中 模块的定义及引用方式，那么 <code>exports</code> 和 <code>module.exports</code> 这两种导出方式有何不同呢？ 当你使用 <code>require</code> 函数引用一个模块时，她返回的永远是 <code>module.exports</code> 对象。</p>
<p>类似于对 <code>exports</code> 重新赋值对外导出接口的方式是无效的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;wow&#x27;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bar.js</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;./foo.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( foo.<span class="property">msg</span> )      <span class="comment">// msg is undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( foo )          <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>如上代码的导出方式可以简单的这样理解：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = &#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;wow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a )  <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以，你可以为 <code>exports</code> 快捷方式添加属性，但是不可以对其直接重新赋值。</p>
<h1 id="nodejs-中的模块加载规则"><a href="#nodejs-中的模块加载规则" class="headerlink" title="nodejs 中的模块加载规则"></a>nodejs 中的模块加载规则</h1><h2 id="模块类型"><a href="#模块类型" class="headerlink" title="模块类型"></a>模块类型</h2><p>在 <code>nodejs</code> 中，存在不同类型的模块：外部模块，核心模块，文件模块，文件夹模块。那么对于这些模块的加载规则都有所不同。</p>
<h2 id="外部模块"><a href="#外部模块" class="headerlink" title="外部模块"></a>外部模块</h2><p>所谓 <code>外部模块</code> 指的是使用 <code>npm</code> 管理的第三方模块，即安装在 <code>node_modules</code> 文件夹中的模块。比如：<code>koa</code>等。</p>
<h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><p><code>核心模块</code> 指的是 <code>nodejs</code> 自身提供的一些内部模块，无需安装，可直接 <code>require</code> 引用。比如：<code>http, path, fs</code> 等。</p>
<h2 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h2><p>在本地自己新建的 <code>*.js</code> 、<code>*.json</code> 、<code>*.node</code> 被称作 <code>文件模块</code>。</p>
<h2 id="目录模块"><a href="#目录模块" class="headerlink" title="目录模块"></a>目录模块</h2><p>根据模块加载规则，<code>nodejs</code> 中，我们认为一个文件夹也是一个模块，也就是说，我们可以 <code>require(&#39;./directory&#39;)</code> 来引用一个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo 是一个文件夹，该文件夹下存在一个  index.js 文件</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;./foo&#x27;</span>)</span><br><span class="line"><span class="comment">// do something...</span></span><br></pre></td></tr></table></figure>

<p>具体为什么可以这么引用，在接下来的模块加载规则中会详细说明。</p>
<h2 id="加载规则"><a href="#加载规则" class="headerlink" title="加载规则"></a>加载规则</h2><p><strong>先看如下伪代码描述的高级算法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">require(X) from module at path Y</span><br><span class="line">1. If X is a core module,</span><br><span class="line">   a. return the core module</span><br><span class="line">   b. STOP</span><br><span class="line">2. If X begins with &#x27;/&#x27;</span><br><span class="line">   a. set Y to be the filesystem root</span><br><span class="line">3. If X begins with &#x27;./&#x27; or &#x27;/&#x27; or &#x27;../&#x27;</span><br><span class="line">   a. LOAD_AS_FILE(Y + X)</span><br><span class="line">   b. LOAD_AS_DIRECTORY(Y + X)</span><br><span class="line">4. LOAD_NODE_MODULES(X, dirname(Y))</span><br><span class="line">5. THROW &quot;not found&quot;</span><br><span class="line"></span><br><span class="line">LOAD_AS_FILE(X)</span><br><span class="line">1. If X is a file, load X as JavaScript text.  STOP</span><br><span class="line">2. If X.js is a file, load X.js as JavaScript text.  STOP</span><br><span class="line">3. If X.json is a file, parse X.json to a JavaScript Object.  STOP</span><br><span class="line">4. If X.node is a file, load X.node as binary addon.  STOP</span><br><span class="line"></span><br><span class="line">LOAD_INDEX(X)</span><br><span class="line">1. If X/index.js is a file, load X/index.js as JavaScript text.  STOP</span><br><span class="line">2. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP</span><br><span class="line">3. If X/index.node is a file, load X/index.node as binary addon.  STOP</span><br><span class="line"></span><br><span class="line">LOAD_AS_DIRECTORY(X)</span><br><span class="line">1. If X/package.json is a file,</span><br><span class="line">   a. Parse X/package.json, and look for &quot;main&quot; field.</span><br><span class="line">  b. If &quot;main&quot; is a falsy value, GOTO 2.</span><br><span class="line">   c. let M = X + (json main field)</span><br><span class="line">   d. LOAD_AS_FILE(M)</span><br><span class="line">   e. LOAD_INDEX(M)</span><br><span class="line">   f. LOAD_INDEX(X) DEPRECATED</span><br><span class="line">   g. THROW &quot;not found&quot;</span><br><span class="line">2. LOAD_INDEX(X)</span><br><span class="line"></span><br><span class="line">LOAD_NODE_MODULES(X, START)</span><br><span class="line">1. let DIRS = NODE_MODULES_PATHS(START)</span><br><span class="line">2. for each DIR in DIRS:</span><br><span class="line">   a. LOAD_AS_FILE(DIR/X)</span><br><span class="line">   b. LOAD_AS_DIRECTORY(DIR/X)</span><br><span class="line"></span><br><span class="line">NODE_MODULES_PATHS(START)</span><br><span class="line">1. let PARTS = path split(START)</span><br><span class="line">2. let I = count of PARTS - 1</span><br><span class="line">3. let DIRS = [GLOBAL_FOLDERS]</span><br><span class="line">4. while I &gt;= 0,</span><br><span class="line">   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE</span><br><span class="line">   b. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)</span><br><span class="line">   c. DIRS = DIRS + DIR</span><br><span class="line">   d. let I = I - 1</span><br><span class="line">5. return DIRS</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>翻译过来的具体行为如下：</strong></p>
<p>假设你要引用一个模块 x （x 可以是 nodejs 的核心模块，外部第三方模块，文件模块或者一个目录）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="built_in">require</span>(x)</span><br></pre></td></tr></table></figure>

<ol>
<li><p>判断模块 x 是否为 nodejs 核心模块，如果是，直接返回该<code>核心模块</code>。</p>
</li>
<li><p>不满足1时，判断 x 是否是以 <code>/</code> 、<code>./</code> 、 <code>../</code> 开头，如果是，这 x 被认为是 <code>本地模块（文件模块或目录模块）</code>。</p>
</li>
<li><p>如果根据路径找到的是文件类型 <code>*.js、*.json、*.node</code> ，则根据扩展名解析返回为不同的数据。</p>
</li>
<li><p>如果是 x.js 文件，则返回 javascript 文本。</p>
</li>
<li><p>如果是 x.json 文件，则将其解析为 javascript 对象并返回。</p>
</li>
<li><p>如果是 x.node 文件，则将其作为 node 的二进制插件并返回。</p>
</li>
<li><p>如果根据路径找到的是文件夹类型，那么 node 会继续在该文件夹下查找以 <code>index.*</code> 的文件，包括 <code>index.js</code>、<code>index.json</code> 、<code>index.node</code>等文件并将其返回。像在使用 <code>webpack</code> 这样的构建系统的 <code>@vue/cli</code> 项目中，<code>index.vue</code> 也会被匹配到。</p>
</li>
<li><p>如果根据以上条件都没有匹配到模块文件，那么 node 会将 x 视为 <code>第三方外部模块</code>。</p>
</li>
<li><p>满足条件 8 时，node 会以当前引用 x 模块的文件为原点，递归向外查找 <code>node_modules</code> 文件夹，直到项目根目录。</p>
</li>
<li><p>只要找到了第一个 <code>node_modules</code> 文件夹，那么 node 便会停止递归查找，并在该 <code>node_modules</code> 文件夹下查找 x 文件夹。</p>
</li>
<li><p>如果在 <code>node_modules</code> 中没有找到 x 文件夹，那么抛出 <code>not found</code> 错误。</p>
</li>
<li><p>如果在 <code>node_modules</code> 找到了 x 文件夹，那么 node 会查看解析 x 文件夹下的 <code>package.json</code> 文件</p>
</li>
<li><p>再查看该 <code>package.json</code> 文件中是否存在 <code>main</code> 字段，该字段表示 x 模块的入口文件路径，node 会根据该文件路径解析出具体的文件并将其返回。</p>
</li>
<li><p>如果 <code>package.json</code> 文件都不存在，那么 node 会尝试查找 x 文件夹下是否存在一个 <code>index.js</code> 的文件，如果有，直接将其返回，如果没有抛出 <code>not found</code> 错误。</p>
</li>
<li><p>至此，如果根据以上规则都没有找到指定的模块，那么 node 就不会再查找了，直接抛出 <code>not found</code> 错误。</p>
</li>
</ol>
<h1 id="模块封装器"><a href="#模块封装器" class="headerlink" title="模块封装器"></a>模块封装器</h1><p>在执行模块代码之前，Node.js 会使用一个如下的函数封装器将其封装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line"><span class="comment">// 模块的代码实际上在这里</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过这样做，Node.js 实现了以下几点：</p>
<p>它保持了顶层的变量（用 var、 const 或 let 定义）作用在模块范围内，而不是全局对象。</p>
<p>它有助于提供一些看似全局的但实际上是模块特定的变量，例如：</p>
<p>实现者可以用于从模块中导出值的 <code>module</code> 和 <code>exports</code> 对象。<br>包含模块绝对文件名和目录路径的快捷变量 <code>__filename</code> 和 <code>__dirname</code> 。</p>
]]></content>
      <categories>
        <category>模块化相关</category>
      </categories>
      <tags>
        <tag>模块化</tag>
        <tag>nodejs</tag>
        <tag>CommonJs</tag>
      </tags>
  </entry>
  <entry>
    <title>es6之模块加载</title>
    <url>/2018/02/14/moduleDefinition/esModule/es6-module/</url>
    <content><![CDATA[<p>本文记录 <code>esModule</code> 的语法及使用。</p>
<span id="more"></span>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 、AMD 和 CMD 三种。前者用于服务器，后两种用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS ，AMD 和 CMD 规范，成为浏览器和服务器通用的模块解决方案。</p>
<p>es6的模块功能主要由两个命令构成：<code>export</code> 和 <code>import</code>。<code>export</code> 命令用于规定模块的对外接口，<code>import</code> 命令用于输入其他模块提供的功能。</p>
<h1 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h1><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用 <code>export</code> 关键字输出该变量。下面是一个 JS 文件，里面使用 <code>export</code> 命令输出变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如上代码，向外导出了 <code>foo</code> 和 <code>str</code> 两个变量。</p>
<p>除了使用上面的导出方式，还可以这样导出对外接口：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  foo,</span><br><span class="line">  str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以像上面代码一样，在 <code>export</code> 后面使用一个大括号将一组变量导出。推荐优先使用这样的导出方式，这样就可以在文件的尾部一眼看出导出了多少变量。</p>
<p><code>export</code> 命令除了导出变量，还可以导出函数或类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上代码，导出了 <code>say</code> 函数 和 <code>Person</code> 类。</p>
<p>通常情况下，<code>export</code> 导出的变量就是原来的名字，但是可以使用 <code>as</code> 关键字修改导出变量的名字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  foo <span class="keyword">as</span> baz,</span><br><span class="line">  fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码共导出了 2 个变量，其中，导出的<code>foo</code> 被重新命名为了 <code>baz</code>。</p>
<p>需要特别注意的是，<code>export</code> 命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p>
<p>下面这样的写法是错误的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span></span><br><span class="line"><span class="keyword">export</span> foo</span><br></pre></td></tr></table></figure>

<p>上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> &#123;a&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>另外，<code>export</code> 语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> foo = <span class="string">&#x27;baz&#x27;</span>, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码输出变量 <code>foo</code>，值为 <code>bar</code>，500 毫秒之后变成 <code>baz</code>。</p>
<p>这一点与 CommonJS 规范完全不同。CommonJS 模块输出的是值的缓存，不存在动态更新。</p>
<div class="note warning"><p>注意：export 命令除了不能放在块级作用域内，模块顶层任何位置都可以。</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 报错</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h1><p>使用 <code>export</code> 命令定义了模块的对外接口以后，其他 JS 文件就可以通过 <code>import</code> 命令加载这个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  element.<span class="property">textContent</span> = firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的 <code>import</code> 命令，用于加载 <strong>profile.js</strong> 文件，并从中输入变量。<code>import</code> 命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</p>
<p>如果想为输入的变量重新取一个名字，<code>import</code> 命令要使用 <code>as</code> 关键字，将输入的变量重命名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><code>import</code> 命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br><span class="line"></span><br><span class="line">a = &#123;&#125;; <span class="comment">// Syntax Error : &#x27;a&#x27; is read-only;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，脚本加载了变量 <code>a</code>，对其重新赋值就会报错，因为 <code>a</code> 是一个只读的接口。但是，如果 <code>a</code> 是一个对象，改写 <code>a</code> 的属性是允许的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br><span class="line"></span><br><span class="line">a.<span class="property">foo</span> = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 合法操作</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>a</code> 的属性可以成功改写，并且其他模块也可以读到改写后的值。不过，这种写法很难查错，建议凡是输入的变量，都当作完全只读，不要轻易改变它的属性。</p>
<p><code>import</code> 后面的 <code>from</code> 指定模块文件的位置，可以是相对路径，也可以是绝对路径，<code>.js</code> 后缀可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;myMethod&#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>util</code> 是模块文件名，由于不带有路径，必须通过配置，告诉引擎怎么取到这个模块。</p>
<p>注意，<code>import</code> 命令具有提升效果，会提升到整个模块的头部，首先执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上面的代码不会报错，因为 <code>import</code> 的执行早于 <code>foo</code> 的调用。这种行为的本质是，<code>import</code> 命令是编译阶段执行的，在代码运行之前。</p>
<p>由于 <code>import</code> 是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="string">&#x27;f&#x27;</span> + <span class="string">&#x27;oo&#x27;</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable language_">module</span> = <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="variable language_">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;module1&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;module2&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面三种写法都会报错，因为它们用到了 <code>表达式、变量</code> 和  <code>if</code> 结构。在静态分析阶段，这些语法都是没法得到值的。</p>
<p>最后，<code>import</code> 语句会执行所加载的模块，因此可以有下面的写法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码仅仅执行 <code>lodash</code> 模块，但是不输入任何值。</p>
<p>如果多次重复执行同一句 <code>import</code> 语句，那么只会执行一次，而不会执行多次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码加载了两次 <code>lodash</code>，但是只会执行一次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码中，虽然 <code>foo</code> 和 <code>bar</code> 在两个语句中加载，但是它们对应的是同一个 <code>my_module</code> 实例。也就是说，<code>import</code> 语句是 <code>Singleton</code> 模式。</p>
<p>目前阶段，通过 Babel 转码，CommonJS 模块的 <code>require</code> 命令和 ES6 模块的 <code>import</code> 命令，可以写在同一个模块里面，但是最好不要这样做。因为 <code>import</code> 在静态解析阶段执行，所以它是一个模块之中最早执行的。下面的代码可能不会得到预期结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;core-js/modules/es6.symbol&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;core-js/modules/es6.promise&#x27;</span>);</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;React&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h1><p>除了指定加载某个输出值，还可以使用整体加载，即用星号 <code>*</code> 指定一个对象，所有输出值都加载在这个对象上面。</p>
<p>下面是一个circle.js文件，它输出两个方法 <code>area</code> 和 <code>circumference</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">area</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">circumference</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，加载这个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; area, circumference &#125; <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆面积：&#x27;</span> + <span class="title function_">area</span>(<span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆周长：&#x27;</span> + <span class="title function_">circumference</span>(<span class="number">14</span>));</span><br></pre></td></tr></table></figure>

<p>上面写法是逐一指定要加载的方法，整体加载的写法如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆面积：&#x27;</span> + circle.<span class="title function_">area</span>(<span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆周长：&#x27;</span> + circle.<span class="title function_">circumference</span>(<span class="number">14</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两行都是不允许的</span></span><br><span class="line">circle.<span class="property">foo</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">circle.<span class="property">area</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h1><p>一个模块中，还可以有默认导出，es6 中使用 <code>export default</code> 来导出默认接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码，默认导出了一个函数。然后，我们可以这样使用它：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<div class="note success"><p>一个模块只能有一个默认导出，在使用一个模块的默认导出时，<code>import</code> 命令后可以不使用大括号，并且可以使用任意的变量名来命名这个默认导出。</p>
</div>

<p>与上面的导入方式等价的如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p>本质上，<code>export default</code> 就是输出一个叫做 <code>default</code> 的变量或方法，然后系统允许你为它取任意名字。</p>
<h1 id="import-函数"><a href="#import-函数" class="headerlink" title="import() 函数"></a>import() 函数</h1><p>前面介绍过，<code>import</code> 命令会被 JavaScript 引擎静态分析，先于模块内的其他语句执行（<code>import</code>命令叫做 <strong>连接 binding</strong> 其实更合适）。所以，下面的代码会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span> <span class="title class_">MyModual</span> <span class="keyword">from</span> <span class="string">&#x27;./myModual&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，引擎处理 <code>import</code> 语句是在编译时，这时不会去分析或执行 <code>if</code> 语句，所以 <code>import</code> 语句放在 <code>if</code> 代码块之中毫无意义，因此会报句法错误，而不是执行时错误。也就是说，<code>import</code> 和 <code>export</code> 命令只能在模块的顶层，不能在代码块之中（比如，在<code>if</code>代码块之中，或在函数之中）。</p>
<p>这样的设计，固然有利于编译器提高效率，但也导致无法在运行时加载模块。在语法上，条件加载就不可能实现。如果 <code>import</code> 命令要取代 Node 的 <code>require</code> 方法，这就形成了一个障碍。因为<code>require</code> 是运行时加载模块，<code>import</code> 命令无法取代 <code>require</code> 的动态加载功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="string">&#x27;./&#x27;</span> + fileName;</span><br><span class="line"><span class="keyword">const</span> myModual = <span class="built_in">require</span>(path);</span><br></pre></td></tr></table></figure>

<p>上面的语句就是动态加载，<code>require</code> 到底加载哪一个模块，只有运行时才知道。<code>import</code> 命令做不到这一点。</p>
<p>因此，有一个提案，建议引入 <code>import()</code> 函数，完成动态加载。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(specifier)</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>import</code> 函数的参数 <code>specifier</code>，指定所要加载的模块的位置。<code>import</code> 命令能够接受什么参数，<code>import()</code> 函数就能接受什么参数，两者区别主要是后者为动态加载。</p>
<p><code>import()</code> 返回一个 <code>Promise</code> 对象。下面是一个例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">`./section-modules/<span class="subst">$&#123;someVariable&#125;</span>.js`</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="title function_">loadPageInto</span>(main);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    main.<span class="property">textContent</span> = err.<span class="property">message</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>import()</code> 函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的模块。另外，<code>import()</code>函数与所加载的模块没有静态连接关系，这点也是与 <code>import</code> 语句不相同。<code>import()</code> 类似于 Node 的 <code>require</code> 方法，区别主要是前者是异步加载，后者是同步加载。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><code>import()</code> 加载模块成功以后，这个模块会作为一个对象，当作 <code>then</code> 方法的参数。因此，可以使用对象解构赋值的语法，获取输出接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./myModule.js&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;export1, export2&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...·</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>export1</code> 和 <code>export2</code> 都是 <code>myModule.js</code> 的输出接口，可以解构获得。</p>
<p>如果模块有 <code>default</code> 输出接口，可以用参数直接获得。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./myModule.js&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">myModule</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myModule.<span class="property">default</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的代码也可以使用具名输入的形式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./myModule.js&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;<span class="keyword">default</span>: theDefault&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(theDefault);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果想同时加载多个模块，可以采用下面的写法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./module1.js&#x27;</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./module2.js&#x27;</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./module3.js&#x27;</span>),</span><br><span class="line">])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">[module1, module2, module3]</span>) =&gt;</span> &#123;</span><br><span class="line">   ···</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>import()</code> 也可以用在 <code>async</code> 函数之中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> myModule = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./myModule.js&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123;export1, export2&#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./myModule.js&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [module1, module2, module3] =</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">&#x27;./module1.js&#x27;</span>),</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">&#x27;./module2.js&#x27;</span>),</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">&#x27;./module3.js&#x27;</span>),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure>


<h1 id="在浏览器中的加载方式"><a href="#在浏览器中的加载方式" class="headerlink" title="在浏览器中的加载方式"></a>在浏览器中的加载方式</h1><p>es6 规定，要想在浏览器中使用 esModule 功能，需要在 <code>&lt;script&gt;</code> 标签上使用 <code>type=&quot;module&quot;</code> 的属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> dom <span class="keyword">from</span> <span class="string">&#x27;./dom.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// some code here ...</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上所示，<code>type=&quot;module&quot;</code> 的属性告诉 javascript 引擎，这个脚本是一个 es6 模块。它的加载方式同 <code>defer</code> 属性，也是异步的，会等到页面渲染完成后再下载执行。</p>
<p>如果有多个 <code>&lt;script&gt;</code> 标签，它会按顺序执行。</p>
<h1 id="es6-模块与-CommonJS-的区别"><a href="#es6-模块与-CommonJS-的区别" class="headerlink" title="es6 模块与 CommonJS 的区别"></a>es6 模块与 CommonJS 的区别</h1><p>它们有两个重大差异。</p>
<ul>
<li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li>
<li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li>
</ul>
<p>第二个差异是因为 CommonJS 加载的是一个对象（即 <code>module.exports</code> 属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>
<p>下面重点解释第一个差异。</p>
<p>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件 <code>lib.js</code> 的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">incCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">counter</span>: counter,</span><br><span class="line">  <span class="attr">incCounter</span>: incCounter,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码输出内部变量 <code>counter</code> 和改写这个变量的内部方法 <code>incCounter</code>。然后，在 <code>main.js</code> 里面加载这个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> mod = <span class="built_in">require</span>(<span class="string">&#x27;./lib&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mod.<span class="property">counter</span>);  <span class="comment">// 3</span></span><br><span class="line">mod.<span class="title function_">incCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mod.<span class="property">counter</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>上面代码说明，<code>lib.js</code> 模块加载以后，它的内部变化就影响不到输出的<code>mod.counter</code>了。这是因为<code>mod.counter</code>是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">incCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">counter</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">incCounter</span>: incCounter,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，输出的 <code>counter</code> 属性实际上是一个取值器函数。现在再执行 <code>main.js</code> ，就可以正确读取内部变量 <code>counter</code> 的变动了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 <code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的 <code>import</code> 有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code> 加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p>
<p>还是举上面的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">incCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; counter, incCounter &#125; <span class="keyword">from</span> <span class="string">&#x27;./lib&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter); <span class="comment">// 3</span></span><br><span class="line"><span class="title function_">incCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<p>上面代码说明，ES6 模块输入的变量 <code>counter</code> 是活的，完全反应其所在模块 <code>lib.js</code> 内部的变化。</p>
<p>再举一个出现在export一节中的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// m1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> foo = <span class="string">&#x27;baz&#x27;</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// m2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">&#x27;./m1.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(foo), <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>m1.js</code> 的变量 <code>foo</code>，在刚加载时等于 <code>bar</code>，过了 500 毫秒，又变为等于 <code>baz</code>。</p>
<p>让我们看看，<code>m2.js</code> 能否正确读取这个变化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ babel-node m2.js</span><br><span class="line"></span><br><span class="line">bar</span><br><span class="line">baz</span><br></pre></td></tr></table></figure>

<p>上面代码表明，ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。</p>
<p>由于 ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; obj &#125; <span class="keyword">from</span> <span class="string">&#x27;./lib&#x27;</span>;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">prop</span> = <span class="number">123</span>; <span class="comment">// OK</span></span><br><span class="line">obj = &#123;&#125;; <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>main.js</code> 从 <code>lib.js</code> 输入变量 <code>obj</code> ，可以对 <code>obj</code> 添加属性，但是重新赋值就会报错。因为变量 <code>obj</code> 指向的地址是只读的，不能重新赋值，这就好比 <code>main.js</code> 创造了一个名为 <code>obj</code> 的 <code>const</code> 变量。</p>
<p>最后，<code>export</code> 通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mod.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sum</span> += <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">sum</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br></pre></td></tr></table></figure>

<p>上面的脚本 <code>mod.js</code>，输出的是一个 C 的实例。不同的脚本加载这个模块，得到的都是同一个实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// x.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;c&#125; <span class="keyword">from</span> <span class="string">&#x27;./mod&#x27;</span>;</span><br><span class="line">c.<span class="title function_">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// y.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;c&#125; <span class="keyword">from</span> <span class="string">&#x27;./mod&#x27;</span>;</span><br><span class="line">c.<span class="title function_">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./x&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./y&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>现在执行 <code>main.js</code>，输出的是 1。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ babel-node main.js</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>这就证明了 <code>x.js</code> 和 <code>y.js</code> 加载的都是 C 的同一个实例。</p>
]]></content>
      <categories>
        <category>模块化相关</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>esModule</tag>
        <tag>export</tag>
        <tag>import</tag>
      </tags>
  </entry>
  <entry>
    <title>单页应用之预渲染(prerendering)</title>
    <url>/2019/09/10/vue/cli/prerender-spa-plugin/</url>
    <content><![CDATA[<p>如果你调研 <strong>服务器端渲染 (SSR)</strong> 只是用来改善少数营销页面（例如 &#x2F;, &#x2F;about, &#x2F;contact 等）的 SEO，那么你可能需要 <strong>预渲染</strong>。无需使用 web 服务器实时动态编译 HTML，而是使用预渲染方式，在构建时 (build time) 简单地生成针对特定路由的静态 HTML 文件。优点是设置预渲染更简单，并可以将你的前端作为一个完全静态的站点。</p>
<span id="more"></span>


<p>我们可以使用 <code>webpack</code> 的插件 <code>prerender-spa-plugin</code> 来轻松地添加预渲染。它已经被 Vue 应用程序广泛测试，并且它的作者是 Vue 核心团队的成员。</p>
<p>这篇文章会基于 <code>@vue/cli-3.x</code> 说明 <code>预渲染</code> 如何配置。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先使用 <code>npm</code> 安装最新版的 <code>prerender-spa-plugin</code> 插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install prerender-spa-plugin --save-dev</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>由于 <code>prerender-spa-plugin</code>新的 3.x 版本依赖于 <code>puppeteer</code> 库，并且 <code>puppeteer</code> 是很大的，大约有200多M，所以对于网速很慢的同学，经常会在下载这个库的时候超时失败。鉴于这样的情况，推荐使用<code>nrm</code> 工具将下载源设置为淘宝源，然后再安装 <code>prerender-spa-plugin</code>。</p>
</div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i nrm -g</span><br><span class="line">$ nrm use taobao</span><br><span class="line">$ npm i prerender-spa-plugin --save-dev</span><br></pre></td></tr></table></figure>

<h1 id="vue-config-js-配置"><a href="#vue-config-js-配置" class="headerlink" title="vue.config.js 配置"></a>vue.config.js 配置</h1><p>安装完毕后，我们在 <code>vue.config.js</code> 文件中添加如下配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Renderer</span> = <span class="title class_">PrerenderSPAPlugin</span>.<span class="property">PuppeteerRenderer</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//部署应用包时的基本 URL。</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="comment">// 打包输出文件路径（文件名，默认 dist ）。</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">  <span class="comment">//打包后静态静态资源的放置位置，该项配置默认为 &quot;&quot; , 即直接将 ( js/css/img/fonts/...) 这些文件夹放在了 dist 文件夹下</span></span><br><span class="line">  <span class="comment">//这里将这些静态资源放置在 assets 文件夹中。</span></span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&quot;assets&quot;</span>,</span><br><span class="line">  <span class="comment">//添加 webpack 配置</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="comment">//追加插件配置</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">PrerenderSPAPlugin</span>(&#123;</span><br><span class="line">        <span class="comment">// 预渲染打包后的静态资源存放目录（必须），要跟 outputDir 配置对应上</span></span><br><span class="line">        <span class="attr">staticDir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 预渲染的输出路径，默认使用 staticDir 字段设置的值</span></span><br><span class="line">        <span class="comment">// outputDir: path.join(__dirname, &#x27;dist/prerendered&#x27;),</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 本地的 html 页面模块文件（必须）</span></span><br><span class="line">        <span class="attr">indexPath</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要匹配的预渲染路由（必须）</span></span><br><span class="line">        <span class="attr">routes</span>: [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/about&#x27;</span>],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 渲染器（必须）</span></span><br><span class="line">        <span class="attr">renderer</span>: <span class="keyword">new</span> <span class="title class_">Renderer</span>(&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 默认挂在 window.__PRERENDER_INJECTED 对象上，可以通过 window.__PRERENDER_INJECTED.foo 在预渲染页面取值</span></span><br><span class="line">            <span class="attr">inject</span>: &#123;</span><br><span class="line">              <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">// 定义渲染事件名称， document.dispatch(new Event(&#x27;render-event&#x27;))</span></span><br><span class="line">            <span class="attr">renderAfterDocumentEvent</span>: <span class="string">&#x27;render-event&#x27;</span>,</span><br><span class="line">            <span class="comment">// 延迟渲染时间</span></span><br><span class="line">            <span class="comment">//renderAfterTime: 5000,</span></span><br><span class="line">            <span class="comment">// 触发渲染的元素，该元素生成后就保存渲染结果</span></span><br><span class="line">            <span class="comment">//renderAfterElementExists: &#x27;#app&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 服务器配置</span></span><br><span class="line">        <span class="comment">// server: &#123;</span></span><br><span class="line">        <span class="comment">//   // 代理，用于发送请求，设置与 webpack-dev-server 并不完全相同</span></span><br><span class="line">        <span class="comment">//   proxy: &#123;</span></span><br><span class="line">        <span class="comment">//     &#x27;/api&#x27;: &#123;</span></span><br><span class="line">        <span class="comment">//       // 代理地址</span></span><br><span class="line">        <span class="comment">//       target: &#x27;&#x27;,</span></span><br><span class="line">        <span class="comment">//       // pathRewrite: &#123;</span></span><br><span class="line">        <span class="comment">//       //   &#x27;^/api&#x27;: &#x27;/&#x27;,</span></span><br><span class="line">        <span class="comment">//       // &#125;,</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     // proxy的属性用于express: app.use(key, proxy[key])</span></span><br><span class="line">        <span class="comment">//     // &#x27;/:foo&#x27;: &#123; target &#125;, 可以不匹配 &#x27;/&#x27;</span></span><br><span class="line">        <span class="comment">//   &#125;,</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h1><p>接下来，<code>main.js</code> 文件中，在构造 <code>Vue</code> 实例配置的 <code>mounted</code> 钩子中添加 <strong>预渲染</strong> 的事件发布。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 忽略其他代码 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 实例被挂载后，触发渲染事件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&#x27;render-event&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h1><p>最后，我们需要将路由模式修改为 <code>mode: history</code> 模式。</p>
<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>

<p>执行构建命令后，我们可以看到多出了 <code>about</code> 文件夹。在使用 <code>/about</code> 访问关于页面时，展示的就是 <code>about</code> 文件夹下的 <code>index.html</code> 页面了。</p>
<img src="http://wx1.sinaimg.cn/mw690/005KBvkkgy1g6vkg6iahxj309f0gmt9d.jpg" />


<h1 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h1><p>更多的详细配置信息请参考 <a href="https://github.com/chrisvfritz/prerender-spa-plugin" class="fc-primary"> prerender-spa-plugin </a>。</p>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>prerender-spa-plugin</tag>
        <tag>vue-cli3</tag>
      </tags>
  </entry>
  <entry>
    <title>递归组件实现树结构</title>
    <url>/2018/11/10/vue/components/recursionTreeWithVuejs/</url>
    <content><![CDATA[<p>本文介绍如何实现一个基于 <code>vue</code> 的递归组件的树结构!</p>
<span id="more"></span>


<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul>
<li>根据树形数据渲染出树形结构</li>
<li>点击某个节点能够收缩其子节点</li>
<li>等其他功能…</li>
</ul>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>组件在其内部是可以调用其组件自身的，使用递归的思想循环调用树列表组件自身，就可以循环往复的渲染出所有树节点，但是必须确定跳出递归的条件，避免循环引用导致无限循环而出现如下错误。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Uncaught RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure>

<p>根据树形数据结构，我们可以将跳出循环的条件设置为 <strong>是否存在子节点数据</strong> ，如果有子节点数据，那继续循环，否则，跳出循环，只渲染当前节点。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>测试代码环境为 <code>vue-cli-3</code>，组件使用单文件组件。</p>
<h2 id="treeList-vue-组件"><a href="#treeList-vue-组件" class="headerlink" title="treeList.vue 组件"></a>treeList.vue 组件</h2><p>该组件为渲染树本身</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(child,index) in data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">treeLabel</span> <span class="attr">v-if</span>=<span class="string">&quot;child.children&quot;</span> <span class="attr">:folder</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">treeLabel</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;child.label&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> treeLabel <span class="keyword">from</span> <span class="string">&#x27;./treeLabel.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;treeList&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    treeLabel</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;data&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">ul</span> &#123; <span class="attribute">list-style</span>: none;&#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="treeLabel-vue-组件"><a href="#treeLabel-vue-组件" class="headerlink" title="treeLabel.vue 组件"></a>treeLabel.vue 组件</h2><p>该组件功能为，渲染当前节点标题，及其子组件数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>&#123;&#123;folder.label&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">treeList</span> <span class="attr">v-show</span>=<span class="string">&quot;isshow&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;folder.children&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">treeList</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 异步导入 treeList 组件，告诉模块系统 -&gt; 我们不需要先解析 treeList 组件，等到用到的时候再解析加载</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">treeList</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./treeList.vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;treeLabel&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isshow</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;folder&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    treeList</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">toggle</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">isshow</span> = !<span class="variable language_">this</span>.<span class="property">isshow</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">span</span> &#123; <span class="attribute">cursor</span>: pointer;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note warning"><p><strong>注：</strong> 如果你使用了模块化构建系统，像包含了 <code>webpack</code> 或 <code>Browserify</code> 的 <code>@vue/cli</code>，你会遇到像下面这样的错误：</p>
</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Failed to mount component: template or render function not defined.</span><br></pre></td></tr></table></figure>

<p>为了解释这里发生了什么，我们先把两个组件称为 A 和 B。模块系统发现它需要 A，但是首先 A 依赖 B，但是 B 又依赖 A，但是 A 又依赖 B，如此往复。这变成了一个循环，不知道如何不经过其中一个组件而完全解析出另一个组件。</p>
<div class="note success"><p>为了解决这个问题，我们需要给模块系统一个点，在那里 <strong>A 反正是需要 B 的，但是我们不需要先解析 B</strong>。</p>
</div>


<p>所以，对于上面我们定义的两个组件，我们可以把 <code>treeLabel</code> 组件作为那个点，而为了告诉 <strong>模块系统</strong> 我们不需要先解析 <code>treeList</code> 组件，而是等到用到的时候再加载解析她。那么，我们可以这样做：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">treeList</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./treeList.vue&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>没错！在 <code>webpack</code> 这样的模块系统中，我们可以使用异步的 <code>import()</code> 来注册异步组件，这样只有在 <code>treeList</code> 组件被用到的时候才会被模块系统解析。</p>
<blockquote>
<p>对于以上问题，只是会出现在 <strong>局部注册组件</strong> 时出现，如果你是以 <strong>全局注册组件</strong> 的显示定义有循环引用的两个组件时就不会出现这样的情况了。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;treeLabel&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;treeList&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>App.vue</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">treeList</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> treeList <span class="keyword">from</span> <span class="string">&#x27;./components/treeList.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    treeList</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">list</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">label</span>: <span class="string">&quot;一级菜单1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">children</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">label</span>: <span class="string">&quot;二级菜单1&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">children</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">label</span>: <span class="string">&quot;三级菜单1&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">label</span>: <span class="string">&quot;二级菜单2&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">label</span>: <span class="string">&quot;一级菜单2&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">label</span>: <span class="string">&quot;一级菜单3&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">children</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">label</span>: <span class="string">&quot;二级菜单1&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>至此就实现了最基本的树结构功能。</p>
<h2 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h2><p><a class="link" href="github: https://github.com/yisibell/recursion-tree.git">仓库地址</a></p>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>recursionTree</tag>
        <tag>component</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 vue 项目中构建权限菜单</title>
    <url>/2019/10/26/vue/demo/howToCreateADynamicRoutesByAuthTree/</url>
    <content><![CDATA[<p>在使用 <code>vue</code> 做中后台管理系统项目时，我们经常会涉及到权限管理，即对菜单树进行权限控制，由于不同框架本身的一些特性，通常实现权限功能的方式也大不相同。</p>
<p>本文就 <code>vue</code> 项目来介绍一种菜单树的权限管理方式。</p>
<span id="more"></span>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于 <code>vue</code> 项目来说，我们通常会将 <code>菜单树</code> 和 <code>路由表</code> 进行关联，也就是说，<code>最终的菜单树</code> 会根据 <code>完整的路由表</code> 生成。</p>
<p>这里 <code>完整的路由表</code> 可以分为：<code>静态路由</code> 和 <code>动态路由</code> 这两部分。</p>
<ul>
<li>静态路由</li>
</ul>
<p>指的是，用户可正常访问的路由，诸如 <code>/login</code> 、<code>/404</code> 、<code>/about</code> 等。这些路由信息不会与菜单树关联。</p>
<ul>
<li>动态路由</li>
</ul>
<p>指的是，有对应权限的用户才可以访问，这些路由信息会与菜单树进行关联。</p>
<p>那么，<code>最终的菜单树</code> 又可以如何确定呢？</p>
<p>我们可以借鉴像 <a href="https://panjiachen.github.io/vue-element-admin-site/zh/" class="fc-danger"> vue-element-admin </a> 这样的后台模板框架实现菜单树的思路，对 <code>完整的路由表</code> 中路由对象 <code>hidden</code> 属性为 <code>false</code> 的项作为一个菜单树节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/system&#x27;</span>,</span><br><span class="line">    <span class="comment">//当设置 true 的时候该路由不会在侧边栏出现 如 401，login等页面，或者如一些编辑页面 /edit/1</span></span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/system&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h1 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h1><p>为了做到对页面菜单项的灵活控制，我们的项目中应该有一个叫做 <code>资源管理</code> 的页面。该页面主要的作用是可以很方便的 <code>新增、修改、删除</code> 一个权限菜单项。</p>
<p>而该资源菜单树的每一个菜单项可以使用一个唯一的 <code>权限编码(code)</code> 与动态路由对象进行关联。</p>
<p>也就是说，后台存储的是一个有 <code>权限编码(code)</code> 信息的菜单树形数据结构，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> authTree = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="string">&quot;system_manage&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;系统管理&quot;</span>,</span><br><span class="line">    <span class="attr">child</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&quot;system_user_menu&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;用户管理&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&quot;system_role_menu&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;角色管理&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&quot;system_function_menu&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;资源管理&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="string">&quot;product_manage&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;商品管理&quot;</span>,</span><br><span class="line">    <span class="attr">child</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&quot;product_add_menu&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;添加商品&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&quot;product_all_menu&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;所有商品&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&quot;product_attribute_menu&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;属性管理&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>如上数据结构所示，<code>code</code> 属性表示该菜单节点的权限编码，<code>name</code> 属性表示该菜单节点的名称，当然，你也可以加入一些其他的可控字段。</p>
<h1 id="动态路由定义"><a href="#动态路由定义" class="headerlink" title="动态路由定义"></a>动态路由定义</h1><p>我们已经维护好了一份资源菜单树，那么，接下来的工作就是对每个 <code>权限编码</code> 去定义对应的路由对象信息，这样，我们就可以在后面通过 <strong>遍历权限菜单树</strong> 去生成一份动态路由表出来。</p>
<p>前端定义的 <strong>动态路由</strong> 类似于下面这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dynamicRoutes = &#123;</span><br><span class="line">  <span class="attr">system_manage</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;systemmanage&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/systemmanage&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;this is a component load with import() method&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;系统管理&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;iconfont icon-xitongguanli&quot;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">system_user_menu</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;usermanage&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/usermanage&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;this is a component load with import() method&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;用户管理&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;iconfont icon-xitongguanli&quot;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">system_role_menu</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;rolemanage&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/rolemanage&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;this is a component load with import() method&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;角色管理&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;iconfont icon-xitongguanli&quot;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">system_function_menu</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;sourcemanage&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/sourcemanage&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;this is a component load with import() method&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;资源管理&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;iconfont icon-xitongguanli&quot;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">product_manage</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;productmanage&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/productmanage&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;this is a component load with import() method&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;商品管理&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;iconfont icon-xitongguanli&quot;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">product_add_menu</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;addproduct&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/addproduct&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;this is a component load with import() method&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;添加商品&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;iconfont icon-xitongguanli&quot;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">product_all_menu</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;allproduct&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/allproduct&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;this is a component load with import() method&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;所有商品&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;iconfont icon-xitongguanli&quot;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">product_attribute_menu</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;attributemanage&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/attributemanage&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;this is a component load with import() method&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;属性管理&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;iconfont icon-xitongguanli&quot;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="根据权限树生成路由表"><a href="#根据权限树生成路由表" class="headerlink" title="根据权限树生成路由表"></a>根据权限树生成路由表</h1><p>权限树数据 和 动态路由定义已经处理好了，现在，我们就要根据这两份数据生成 <code>vue-router</code> 可用的路由表数据了。</p>
<p>可以使用如下函数进行生成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据权限树生成可用的路由表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filterMenu</span>(<span class="params">res, authTree, routes</span>) &#123;</span><br><span class="line">  authTree.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> routeObj = routes[v.<span class="property">code</span>],</span><br><span class="line">      name = v.<span class="property">name</span>,</span><br><span class="line">      child = v.<span class="property">child</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( name ) routeObj.<span class="property">meta</span>.<span class="property">title</span> = name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child &amp;&amp; child.<span class="property">length</span> &gt; <span class="number">0</span>) routeObj.<span class="property">children</span> = <span class="title function_">filterMenu</span>([], child, routes);</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">push</span>(routeObj);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">filterMenu</span>([], authTree, dynamicRoutes));</span><br></pre></td></tr></table></figure>

<h1 id="插入到路由表中"><a href="#插入到路由表中" class="headerlink" title="插入到路由表中"></a>插入到路由表中</h1><p>最后，我们可以使用 <code>addRoutes</code> 方法将生成的路由表数据添加到路由中，这样，<code>路由、权限和菜单</code>就进行了很好的关联，后续对菜单项的控制也会非常方便。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">addRoutes</span>( routes )</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的 <code>routes</code> 就是通过比对权限后生成的路由表数据了。</p>
<h1 id="用户角色管理"><a href="#用户角色管理" class="headerlink" title="用户角色管理"></a>用户角色管理</h1><p>通常，我们的权限是绑定到角色的，不同的角色有不同的权限，所以，我们可以在 <code>用户角色管理</code> 模块去绑定对应的菜单权限。</p>
<p>页面如何设计就看你自己了。</p>
<h1 id="动态路由与后台关联的另一种方式"><a href="#动态路由与后台关联的另一种方式" class="headerlink" title="动态路由与后台关联的另一种方式"></a>动态路由与后台关联的另一种方式</h1><p>在第一种方式中，当将菜单权限赋予某个角色后，那么，该角色对于的菜单树结构就已经成型了，只不过需要将菜单 权限<code>code</code> 替换为真正的<code>路由对象</code>。再在适合的时机插入到路由表中。</p>
<p>这里还有另一种实现方式。我们将完整的动态路由同步到后台数据库，除了路由对象中的 <code>component</code> 字段变为 <code>String</code> 类型以外，该动态路由没有任务其他特殊之处。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/system&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&#x27;Layout&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;系统管理&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;system-icon&#x27;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;rolesManagement&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;roles_management&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&#x27;rolesManagement&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">          <span class="attr">icon</span>: <span class="string">&#x27;roles-icon&#x27;</span>,</span><br><span class="line">          <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>如上动态路由所示，我们可以看到两个比较特殊的地方，第一个是 <code>component</code> 字段，第二个是 <code>meta</code> 中的 <code>roles</code> 字段。他们有什么意义呢？</p>
<p><strong>component字段</strong></p>
<p>该字段表示路由对象所映射的组件。由于我们需要将整个动态路由表存储到后台数据库，所以，原先的 <code>component</code> 设置方式不再适用，这里我们该用字典关联的方式来解决。我们会有这样一个文件，存储着动态路由中的所有动态组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dynamicRoutesMap.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title class_">Layout</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/layout&#x27;</span>),</span><br><span class="line">  <span class="attr">rolesManagement</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/system/rolesManagement&#x27;</span>),</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>roles字段</strong></p>
<p>该字段表示路由对象所关联的角色有哪些。也就是说，只要某个路由对象中的 <code>roles</code> 信息中的角色是当前用户所拥有的，那么该路由对象就该被显示出来。当然，<code>roles</code> 字段是后台动态追加进去的，可在 <strong>用户角色管理</strong> 页面进行处理。</p>
<h2 id="如何过滤出当前用户有权访问的路由表"><a href="#如何过滤出当前用户有权访问的路由表" class="headerlink" title="如何过滤出当前用户有权访问的路由表"></a>如何过滤出当前用户有权访问的路由表</h2><p><strong>获取当前用户信息</strong></p>
<p>我们首先需要获取当前用户信息，即，当前用户拥有的角色信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">roles</span>: [<span class="string">&#x27;role1&#x27;</span>, <span class="string">&#x27;role2&#x27;</span>, <span class="string">&#x27;role3&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上所示，<code>张三</code> 同时拥有 <code>role1</code>、<code>role2</code> 和 <code>role3</code> 这三个角色。</p>
<p><strong>获取动态路由信息</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/system&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&#x27;Layout&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;系统管理&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;system-icon&#x27;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&#x27;role1&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;rolesManagement&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;roles_management&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&#x27;rolesManagement&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">          <span class="attr">icon</span>: <span class="string">&#x27;roles-icon&#x27;</span>,</span><br><span class="line">          <span class="attr">roles</span>: [<span class="string">&#x27;role1&#x27;</span>, <span class="string">&#x27;admin&#x27;</span><span class="string">&#x27;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;</span>usersManagement<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        path: &#x27;</span>users_management<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        component: &#x27;</span>usersManagement<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        meta: &#123;</span></span><br><span class="line"><span class="string">          title: &#x27;</span>用户管理<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">          icon: &#x27;</span>users-icon<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">          roles: [&#x27;</span>role1<span class="string">&#x27;, &#x27;</span>admin<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;</span>resourceManagement<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        path: &#x27;</span>resource_management<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        component: &#x27;</span>resourceManagement<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        meta: &#123;</span></span><br><span class="line"><span class="string">          title: &#x27;</span>资源管理<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">          icon: &#x27;</span>resource-icon<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">          roles: [&#x27;</span>admin<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      // ...</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure>



<p>如上所示，这一个经过后台处理的含有完整 <code>roles</code> 信息的动态路由表。每个路由对象都有对应的 <code>roles</code> 信息。表示该路由对象对哪些角色可见。</p>
<p>经过过滤处理后，实际生成的动态路由表示这样的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/system&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&#x27;Layout&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;系统管理&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;system-icon&#x27;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&#x27;role1&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;rolesManagement&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;roles_management&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&#x27;rolesManagement&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">          <span class="attr">icon</span>: <span class="string">&#x27;roles-icon&#x27;</span>,</span><br><span class="line">          <span class="attr">roles</span>: [<span class="string">&#x27;role1&#x27;</span>, <span class="string">&#x27;admin&#x27;</span><span class="string">&#x27;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;</span>usersManagement<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        path: &#x27;</span>users_management<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        component: &#x27;</span>usersManagement<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        meta: &#123;</span></span><br><span class="line"><span class="string">          title: &#x27;</span>用户管理<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">          icon: &#x27;</span>users-icon<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">          roles: [&#x27;</span>role1<span class="string">&#x27;, &#x27;</span>admin<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      // ...</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure>



<p>因为，当前用户没有 <code>admin</code> 角色权限，所以 <strong>资源管理</strong> 这个路由对象被剔除。</p>
<p>最后，我们依然会使用 <code>addRoutes</code> 方法将生成的 <strong>动态路由表</strong> 插入到路由表中，菜单树，也会根据动态路由渲染出来。</p>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>auth</tag>
      </tags>
  </entry>
  <entry>
    <title>一个元素吸顶效果指令实现</title>
    <url>/2019/08/27/vue/directives/v-affix/</url>
    <content><![CDATA[<p>本文介绍基于 <code>vue</code> 的自定义吸顶指令 <code>v-affix</code> 的实现。</p>
<span id="more"></span>

<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// @/directives/affix.js</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 导入 dom 处理工具</span></span><br><span class="line"> <span class="keyword">import</span> dom <span class="keyword">from</span> <span class="string">&#x27;@/utils/dom&#x27;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el</span>)&#123;</span><br><span class="line">    dom.<span class="title function_">css</span>(el , &#123; </span><br><span class="line">      <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">      <span class="attr">zIndex</span>: <span class="string">&#x27;1994214&#x27;</span> </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params"> el , &#123;value&#125; </span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !value ) <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> nextEl = el.<span class="property">nextElementSibling</span>,                                                      <span class="comment">// 后一兄弟节点元素</span></span><br><span class="line">          nextElPaddingTop = <span class="title class_">Number</span>.<span class="built_in">parseFloat</span>( dom.<span class="title function_">getStyleValue</span>( nextEl , <span class="string">&#x27;paddingTop&#x27;</span>) ),   <span class="comment">// 后一兄弟节点元素 padding-top 值</span></span><br><span class="line">          elOffsetTop = <span class="title class_">Number</span>.<span class="built_in">parseFloat</span>( dom.<span class="title function_">offset</span>( el ).<span class="property">top</span> ) ,                            <span class="comment">// 当前元素距离屏幕顶部的距离值</span></span><br><span class="line">          elHeight = <span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(dom.<span class="title function_">getStyleValue</span>( el , <span class="string">&#x27;height&#x27;</span> ));                    <span class="comment">// 当前元素的高度值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滚动处理</span></span><br><span class="line">    el.<span class="property">_affix_scroll_handle</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> scroll_instance = <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">window</span>.<span class="property">scrollY</span>,</span><br><span class="line">          position = <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">          paddingTop = nextElPaddingTop;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> ( scroll_instance &gt;= elOffsetTop )&#123;</span><br><span class="line">        position = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">        paddingTop = elHeight + nextElPaddingTop + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        position = <span class="string">&#x27;static&#x27;</span></span><br><span class="line">        paddingTop = nextElPaddingTop + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      dom.<span class="title function_">css</span>( el , &#123;</span><br><span class="line">        position,</span><br><span class="line">        <span class="attr">left</span>: <span class="string">&#x27;0px&#x27;</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="string">&#x27;0px&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      dom.<span class="title function_">css</span>(nextEl , &#123;paddingTop&#125;)</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 点击处理（点击被绑指令元素时，自动滚动到顶部）</span></span><br><span class="line">    el.<span class="property">_affix_click_handle</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>( <span class="string">&#x27;scroll&#x27;</span> , el.<span class="property">_affix_scroll_handle</span> )</span><br><span class="line">    el.<span class="title function_">addEventListener</span>( <span class="string">&#x27;click&#x27;</span>, el.<span class="property">_affix_click_handle</span> )</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">unbind</span>(<span class="params">el</span>)&#123;</span><br><span class="line">    el.<span class="property">_affix_scroll_handle</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>( <span class="string">&#x27;scroll&#x27;</span> , el.<span class="property">_affix_scroll_handle</span> )</span><br><span class="line">    el.<span class="property">_affix_click_handle</span> &amp;&amp; el.<span class="title function_">removeEventListener</span>( <span class="string">&#x27;click&#x27;</span> , el.<span class="property">_affix_click_handle</span> )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>dom.js工具函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// /utils/dom.js</span></span><br><span class="line"> <span class="keyword">const</span> dom = &#123;</span><br><span class="line">  <span class="comment">// 设置样式</span></span><br><span class="line">  <span class="title function_">css</span>(<span class="params"> el , styles </span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> k <span class="keyword">in</span> styles )&#123;</span><br><span class="line">      <span class="keyword">if</span> ( styles.<span class="title function_">hasOwnProperty</span>(k) )</span><br><span class="line">      el.<span class="property">style</span>[k] = styles[k]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//获取指定样式</span></span><br><span class="line">  <span class="title function_">getStyleValue</span>(<span class="params">elObj,attr</span>)&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">var</span> view = elObj.<span class="property">ownerDocument</span>.<span class="property">defaultView</span>;</span><br><span class="line">    <span class="keyword">if</span> (!view || !view.<span class="property">opener</span>) &#123;</span><br><span class="line">        view = <span class="variable language_">window</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(elObj.<span class="property">currentStyle</span>)&#123;      <span class="comment">//IE</span></span><br><span class="line">        <span class="keyword">return</span> elObj.<span class="property">currentStyle</span>[attr];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view.<span class="title function_">getComputedStyle</span>(elObj)[attr];     <span class="comment">//Firefox</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取元素偏移量( top , left )</span></span><br><span class="line">  <span class="title function_">offset</span>(<span class="params">curEle</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> totalLeft = <span class="literal">null</span>,totalTop = <span class="literal">null</span>,par = curEle.<span class="property">offsetParent</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//首先把自己本身的进行累加</span></span><br><span class="line">    totalLeft += curEle.<span class="property">offsetLeft</span>;</span><br><span class="line">    totalTop += curEle.<span class="property">offsetTop</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//只要没有找到body，我们就把父级参照物的边框和偏移量累加</span></span><br><span class="line">    <span class="keyword">while</span>(par)&#123;</span><br><span class="line">      <span class="keyword">if</span>(navigator.<span class="property">userAgent</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;MSIE 8.0&quot;</span>) === -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//不是标准的ie8浏览器，才进行边框累加</span></span><br><span class="line">        <span class="comment">//累加父级参照物边框</span></span><br><span class="line">        totalLeft += par.<span class="property">clientLeft</span>;</span><br><span class="line">        totalTop += par.<span class="property">clientTop</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//累加父级参照物本身的偏移</span></span><br><span class="line">      totalLeft += par.<span class="property">offsetLeft</span>;</span><br><span class="line">      totalTop += par.<span class="property">offsetTop</span>;</span><br><span class="line">      par = par.<span class="property">offsetParent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">left</span>:totalLeft,<span class="attr">top</span>:totalTop&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> dom;</span><br></pre></td></tr></table></figure>

<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><ol>
<li>注册 <code>v-affix</code> 指令。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> affix <span class="keyword">from</span> <span class="string">&#x27;@/directives/affix&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>( <span class="string">&#x27;affix&#x27;</span> , affix )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 忽略其他代码 ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>对需要吸顶的元素或组件添加 <code>v-affix</code> 指令即可。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">some-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">some-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">some-comp2</span> <span class="attr">v-affix</span>&gt;</span><span class="tag">&lt;/<span class="name">some-comp2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">some-comp3</span>&gt;</span><span class="tag">&lt;/<span class="name">some-comp3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>然后，在窗体滚动到一定距离后，吸顶效果就会出现。</p>
<blockquote>
<p>如果需要控制吸顶效果的开启状态，可向 <code>v-affix</code> 指令传入一个 <code>Boolean</code> 类型值。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">some-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">some-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">some-comp2</span> <span class="attr">v-affix</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">some-comp2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">some-comp3</span>&gt;</span><span class="tag">&lt;/<span class="name">some-comp3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样，就可以控制 <code>v-affix</code> 的开启状态。</p>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue自定义指令</tag>
        <tag>吸顶效果</tag>
        <tag>v-affix</tag>
      </tags>
  </entry>
  <entry>
    <title>h-picker移动端滑动单选组件说明</title>
    <url>/2019/01/01/vue/h-ui/h-picker/</url>
    <content><![CDATA[<p>介绍个人实现的 <code>移动端滑动选择效果</code> 组件 <code>h-picker</code> 的使用。</p>
<span id="more"></span>


<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>以基于 <code>vue-cli</code> 构建的单文件系统为示例说明。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// in main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假定你已经将核心文件拷贝到你的 components 文件夹下（到仓库中拷贝即可）</span></span><br><span class="line"><span class="comment">// 为什么还来个假定这么骚的操作？ 因为在下不想发 npm 包 ，占用包名， 这类滑动选择组件各大 ui 库都包含</span></span><br><span class="line"><span class="comment">// 本例作为学习参考</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HPicker</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/HPicker&#x27;</span>  <span class="comment">//导入</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">HPicker</span>)  <span class="comment">//安装</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>in App.vue</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h-picker</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h-picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>:  [</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项1&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项2&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项3&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项4&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项5&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项6&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项7&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项8&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项9&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项10&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项11&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项12&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项13&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项14&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项15&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项16&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项17&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项18&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项19&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">label</span>: <span class="string">&quot;测试文字项20&quot;</span>&#125;,</span><br><span class="line">      ] </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//选择项变化时触发句柄</span></span><br><span class="line">    <span class="title function_">handleChange</span>(<span class="params"> data , index</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( data , index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><table>
<thead>
<tr>
<th align="center"><strong>特性</strong></th>
<th align="center"><strong>类型</strong></th>
<th align="center"><strong>默认值</strong></th>
<th align="center"><strong>可选值</strong></th>
<th align="center"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>data</code></td>
<td align="center">Array of Object</td>
<td align="center"><code>[]</code></td>
<td align="center">-</td>
<td align="center">选项数据，当没有使用作用域插槽自定义每一项的模板内容时，每项的 <code>label</code> 字段是必须的</td>
</tr>
<tr>
<td align="center"><code>item-height</code></td>
<td align="center">Number</td>
<td align="center"><code>37</code></td>
<td align="center">-</td>
<td align="center">每个选择项的高度值，单位为 <code>px</code></td>
</tr>
<tr>
<td align="center"><code>count</code></td>
<td align="center">Number</td>
<td align="center"><code>5</code></td>
<td align="center">大于1的整数值</td>
<td align="center">选择器可见选项的个数</td>
</tr>
</tbody></table>
<h1 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h1><p><strong>change</strong></p>
<p>当选项被滑动选择时触发，每次手指离开都会触发。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ***** 省略其他选项</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">//选择项变化时触发句柄</span></span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params"> data , index</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">`当前选中项的数据<span class="subst">$&#123;data&#125;</span>`</span> , <span class="string">`当前选中项的索引值<span class="subst">$&#123;index&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ***** 省略其他选项</span></span><br></pre></td></tr></table></figure>


<h1 id="Slots"><a href="#Slots" class="headerlink" title="Slots"></a>Slots</h1><p><strong>default</strong></p>
<p><code>h-picker</code> 组件中设置了一个默认的作用域插槽，使得你可以对每个选择项的内容进行自定义。</p>
<ul>
<li>基于 <code>vue 2.5.x</code> 的使用方式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h-picker</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; data , index &#125;&quot;</span>&gt;</span>&#123;&#123; `自定义选项内容$&#123;index&#125;` &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h-picker</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>基于 <code>vue 2.6.x</code> 的使用方式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h-picker</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;&#123; data , index &#125;&quot;</span>&gt;</span>&#123;&#123; `自定义选项内容$&#123;index&#125;` &#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; data , index &#125;&quot;</span>&gt;</span>&#123;&#123; `自定义选项内容$&#123;index&#125;` &#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">h-picker</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h1><p><a href="https://github.com/yisibell/vue-picker">仓库地址传送</a></p>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>picker</tag>
      </tags>
  </entry>
  <entry>
    <title>h-slide-picker移动端滑动单选弹出层说明</title>
    <url>/2019/03/01/vue/h-ui/h-slide-picker/</url>
    <content><![CDATA[<p><code>h-slide-picker</code> 文档说明。</p>
<span id="more"></span>

<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://github.com/yisibell/vue-picker/raw/master/src/assets/h_slide_picker.gif" alt="效果"></p>
<h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><table>
<thead>
<tr>
<th align="center">特性</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">可选值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>visible</code></td>
<td align="center">Boolean</td>
<td align="center"><code>false</code></td>
<td align="center">-</td>
<td align="center">控制滑动弹出层的显示状态，支持 <code>.sync</code> 语法。</td>
</tr>
<tr>
<td align="center"><code>dataList</code></td>
<td align="center">Array of Object</td>
<td align="center"><code>[]</code></td>
<td align="center">-</td>
<td align="center">滑动选项数据，如果不自定义每个选择项 <code>slot</code> , 则数据元素 <code>Object</code> 中必须包含 <code>label</code> 字段用来显示每个选项的文本内容</td>
</tr>
<tr>
<td align="center"><code>title</code></td>
<td align="center">String</td>
<td align="center"><code>&#39;&#39;</code></td>
<td align="center">-</td>
<td align="center">滑动组件的标题内容</td>
</tr>
<tr>
<td align="center"><code>itemHeight</code></td>
<td align="center">Number</td>
<td align="center">37</td>
<td align="center">-</td>
<td align="center">每个选择项的高度值，单位px</td>
</tr>
<tr>
<td align="center"><code>count</code></td>
<td align="center">Number</td>
<td align="center">5</td>
<td align="center">-</td>
<td align="center">滑动选择项的可见个数</td>
</tr>
</tbody></table>
<h1 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h1><table>
<thead>
<tr>
<th align="center">事件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>confirm</code></td>
<td align="center">点击确定按钮时触发事件。参数：data(选中数据) , index(当前数据在数组中的索引值)</td>
</tr>
<tr>
<td align="center"><code>cancel</code></td>
<td align="center">点击取消触发事件</td>
</tr>
</tbody></table>
<h1 id="Slots"><a href="#Slots" class="headerlink" title="Slots"></a>Slots</h1><table>
<thead>
<tr>
<th align="center">插槽名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>title</code></td>
<td align="center">弹出层标题处 <code>slot</code>。可用来自定义标题处的内容</td>
</tr>
</tbody></table>
<h1 id="Scope-slots"><a href="#Scope-slots" class="headerlink" title="Scope-slots"></a>Scope-slots</h1><table>
<thead>
<tr>
<th align="center">插槽名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>default</code></td>
<td align="center">默认作用域插槽。可用来自定义每个选择项的内容，可用参数：<code>curr</code> , <code>index</code>。你可以使用如下方式使用，<code>&lt;template v-slot=&quot;&#123;curr, index&#125;&quot;&gt;&#123;&#123;curr.label&#125;&#125;&lt;/template&gt;</code></td>
</tr>
</tbody></table>
<h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><p><a class="link" href="https://github.com/yisibell/vue-picker">项目仓库地址</a></p>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>picker</tag>
        <tag>components</tag>
      </tags>
  </entry>
  <entry>
    <title>安利一下自己写的vue插件</title>
    <url>/2018/09/10/vue/h-ui/h-ui-list/</url>
    <content><![CDATA[<p>分享一下自己写的几款基于 <code>vue</code> 的组件，都是一些很常用的功能组件，使用起来都很简单，可供参考学习。</p>
<span id="more"></span>

<h1 id="分页条"><a href="#分页条" class="headerlink" title="分页条"></a>分页条</h1><p>npm 地址：<a href="https://www.npmjs.com/package/@aidol/vue-pagination">@aidol&#x2F;vue-pagination</a></p>
<h1 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h1><p>npm 地址：<a href="https://www.npmjs.com/package/@aidol/vue-slideshow">@aidol&#x2F;vue-slideshow</a></p>
<h1 id="旋转木马轮播"><a href="#旋转木马轮播" class="headerlink" title="旋转木马轮播"></a>旋转木马轮播</h1><p>npm 地址：<a href="https://www.npmjs.com/package/@aidol/vue-carousel">@aidol&#x2F;vue-carousel</a></p>
<h1 id="手风琴效果"><a href="#手风琴效果" class="headerlink" title="手风琴效果"></a>手风琴效果</h1><p>npm 地址：<a href="https://www.npmjs.com/package/@aidol/vue-pagination">@aidol&#x2F;vue-accordion</a></p>
<h1 id="炫酷的-loading-服务"><a href="#炫酷的-loading-服务" class="headerlink" title="炫酷的 loading 服务"></a>炫酷的 loading 服务</h1><p>npm 地址：<a href="https://www.npmjs.com/package/@aidol/vue-laydal">@aidol&#x2F;vue-laydal</a></p>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-magnifying-glass放大镜组件说明</title>
    <url>/2018/12/28/vue/h-ui/vue-magnifying-glass/</url>
    <content><![CDATA[<p>vue-magnifying-glass 放大镜组件使用文档</p>
<span id="more"></span>

<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p><strong>main.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自行拷贝核心文件夹到本地，此组件不发 npm 包，任性。</span></span><br><span class="line"><span class="keyword">import</span> hMagnifyingGlass <span class="keyword">from</span> <span class="string">&#x27;@/components/magnifyingGlass&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>( hMagnifyingGlass )</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>demo.vue</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h-magnifying-glass</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">small-url</span>=<span class="string">&quot;http://localhost:8080/assets/01.jpg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">big-url</span>=<span class="string">&quot;http://localhost:8080/assets/02.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h-magnifying-glass</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><table>
<thead>
<tr>
<th align="center">特性</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">可选值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>small-url</code></td>
<td align="center"><code>String</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">小图片地址</td>
</tr>
<tr>
<td align="center"><code>big-url</code></td>
<td align="center"><code>String</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">大图片地址</td>
</tr>
<tr>
<td align="center"><code>small-size</code></td>
<td align="center"><code>Number</code></td>
<td align="center"><code>350</code></td>
<td align="center"></td>
<td align="center">小图片大小</td>
</tr>
<tr>
<td align="center"><code>big-size</code></td>
<td align="center"><code>Number</code></td>
<td align="center"><code>800</code></td>
<td align="center"></td>
<td align="center">大图片大小</td>
</tr>
<tr>
<td align="center"><code>mask-color</code></td>
<td align="center"><code>String</code></td>
<td align="center"><code>rgba(255, 255, 0, 0.4)</code></td>
<td align="center"></td>
<td align="center">移动遮罩颜色</td>
</tr>
<tr>
<td align="center"><code>gap</code></td>
<td align="center"><code>Number</code></td>
<td align="center"><code>10</code></td>
<td align="center"></td>
<td align="center">小图于大图之间间隔</td>
</tr>
</tbody></table>
<h1 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h1><p><a class="link" href="https://github.com/yisibell/vue-magnifying-glass">仓库地址</a></p>
]]></content>
      <categories>
        <category>vue相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
